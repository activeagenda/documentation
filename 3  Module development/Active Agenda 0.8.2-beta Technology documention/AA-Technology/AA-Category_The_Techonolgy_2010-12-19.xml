<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd" version="0.3" xml:lang="en">
  <siteinfo>
    <sitename>AADoc</sitename>
    <base>http://www.activeagenda.net/documentation/index.php?title=Main_Page</base>
    <generator>MediaWiki 1.8.2</generator>
    <case>first-letter</case>
      <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0" />
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">AADoc</namespace>
      <namespace key="5">AADoc talk</namespace>
      <namespace key="6">Image</namespace>
      <namespace key="7">Image talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Add On File</title>
    <id>2680</id>
    <revision>
      <id>8105</id>
      <timestamp>2010-05-16T00:10:04Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Add-On Files</title>
    <id>2666</id>
    <revision>
      <id>6391</id>
      <timestamp>2009-01-20T03:17:11Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>formatting</comment>
      <text xml:space="preserve">'''Add-on files''' provide a way to extend an [[XML Module Definition]] of a &quot;host&quot; module without modifying the original module definition file. An add-on file is in itself an XML file. The purpose of this functionality is to enable easier distribution of additions to the standard module definitions.

The allowed XML elements of an add-on file are the same as the XML Module Definition, except that the root element should not be called &lt;Module&gt; but &lt;ModuleAddOn&gt;. Unlike the XML Module Definition, all elements except the root element, and attributes are optional.

In order to apply the same add-on to multiple module definitions, it is possible to use the &quot;central&quot; add-on functionality (see below).

The purpose of many module add-ons would be to insert the necessary [[SubModule]]s, [[ViewGrid]]s and [[EditScreen]]s for adding a submodule into a host module. This is not the only conceivable purpose, however, as XML elements can be inserted anywhere in the the host module's XML structure.

==File names==
In order for a regular module add-on to be applied to a module definition, its name must end with &quot;_{moduleID}_ModuleAddOn.xml&quot;, where {moduleID} must be replaced by the [[module ID]] of the host module.  Files containing central add-on definitions must have names ending with &quot;_CentralModuleAddOn.xml&quot;. 

We suggest using a naming convention such that the beginning of the file name indicates the purpose of the add-on. For inserting submodule functionality, we suggest using the submodule's module ID as the prefix. A module that adds the functionality of the Learnings (lrn) module into the Organizations (org) module would then be named lrn_org_ModuleAddOn.xml.

==File locations==
Add-on files must be located in the designated XML directory (by default s2a/active_agenda/xml) or, if used, the custom XML directory (by default s2a/active_agenda/xml/custom). Any file placed in the custom directory will be used instead of an identically named file in the regular XML directory.

==Merging principles==
The merging of the XML elements from an add-on file into a host module is done on a &quot;matching identifier&quot; principle. Depending on the element, the identifier may be the element name itself, or the value of an attribute (&quot;name&quot;, &quot;field&quot;, or &quot;moduleID&quot;).

&quot;Section&quot; elements such as &lt;ModuleFields&gt;, &lt;SubModules&gt;, &lt;Screens&gt; are identified by their names only. This is not a problem, since only one of each is allowed in a module definition anyway.

Other fields are typically identified either by their &quot;name&quot; attribute (any [[ModuleField]] or [[ScreenField]]) or &quot;moduleID&quot; attribute (&lt;SubModule&gt;, any grid elements).

The merging process will walk through the add-on file's XML elements and look for a matching element in the host module definition. If a matching element is found, any attributes in the corresponding element of the add-on will be added to the host module's element; existing matching attributes will be overwritten. If the add-on element contains any sub-elements, the merge will then look for matching sub-elements in the host element. If a matching element is not found, the element from the add-on file will be inserted at this point, with all its contents. If a matching element was found, the merge will continue down the element hierarchy.

=== Example ===
''Note: ellipsis (...) indicates code which is excluded from the example.''

A snippet of a host XML file (orgModuleDef.xml):
 &lt;Module name=&quot;Organizations&quot; moduleID=&quot;org&quot; ... more attributes here ...&gt;
    ...
    &lt;/SubModules&gt;
       ...
       &lt;SubModule moduleID=&quot;bpc&quot; name=&quot;Best Practices&quot; parentKey=&quot;OrganizationID&quot; localKey=&quot;RelatedRecordID&quot;&gt;
          &lt;SubModuleCondition field=&quot;RelatedModuleID&quot; value=&quot;org&quot;/&gt;
       &lt;/SubModule&gt;
    &lt;/SubModules&gt;
    ...
    &lt;Screens&gt;
       ...
       &lt;ViewScreen name=&quot;View&quot; phrase=&quot;View|View summary information about an organization&quot;&gt;
          ... (ViewFields, ViewGrids, ViewScreenSections) ...
          &lt;ViewScreenSection name=&quot;Associations&quot; phrase=&quot;Associations&quot;&gt;
             &lt;ViewGrid moduleID=&quot;ppl&quot; import=&quot;yes&quot;&gt;
                &lt;Conditions&gt;
                   &lt;Condition field=&quot;StillEmployed&quot; value=&quot;yes&quot;/&gt;
                &lt;/Conditions&gt;
             &lt;/ViewGrid&gt;
             ... (more ViewGrids) ...
             &lt;ViewGrid moduleID=&quot;bpc&quot;/&gt;
          &lt;/ViewScreenSection&gt;
          ...
       &lt;/ViewScreen&gt;
       ...
    &lt;Screens&gt;
    ...
 &lt;/Module&gt;

An add-on file:
 &lt;ModuleAddOn&gt;
    &lt;SubModules&gt;
       &lt;SubModule moduleID=&quot;lrn&quot; name=&quot;Learning&quot; parentKey=&quot;OrganizationID&quot; localKey=&quot;RelatedRecordID&quot;&gt;
          &lt;SubModuleCondition field=&quot;RelatedModuleID&quot; value=&quot;org&quot;/&gt;
       &lt;/SubModule&gt;
    &lt;/SubModules&gt;
    &lt;Screens&gt;
       &lt;ViewScreen name=&quot;View&quot;&gt;
          &lt;ViewScreenSection name=&quot;Associations&quot;&gt;
             &lt;ViewGrid moduleID=&quot;lrn&quot;/&gt;
          &lt;/ViewScreenSection&gt;
       &lt;/ViewScreen&gt;
       &lt;EditScreen name=&quot;Learning&quot; phrase=&quot;Learning|Associate learning events with the organization&quot;&gt;
          &lt;RecordSummaryFieldsRef/&gt;
          &lt;EditGrid moduleID=&quot;lrn&quot;/&gt;
       &lt;/EditScreen&gt;
    &lt;/Screens&gt;
 &lt;/ModuleAddOn&gt;

Result:
 &lt;Module name=&quot;Organizations&quot; moduleID=&quot;org&quot; ... more attributes here ...&gt;
    ...
    &lt;/SubModules&gt;
       ...
       &lt;SubModule moduleID=&quot;bpc&quot; name=&quot;Best Practices&quot; parentKey=&quot;OrganizationID&quot; localKey=&quot;RelatedRecordID&quot;&gt;
          &lt;SubModuleCondition field=&quot;RelatedModuleID&quot; value=&quot;org&quot;/&gt;
       &lt;/SubModule&gt;
       '''&lt;SubModule moduleID=&quot;lrn&quot; name=&quot;Learning&quot; parentKey=&quot;OrganizationID&quot; localKey=&quot;RelatedRecordID&quot;&gt;'''
          '''&lt;SubModuleCondition field=&quot;RelatedModuleID&quot; value=&quot;org&quot;/&gt;'''
       '''&lt;/SubModule&gt;'''
    &lt;/SubModules&gt;
    ...
    &lt;Screens&gt;
       ...
       &lt;ViewScreen name=&quot;View&quot; phrase=&quot;View|View summary information about an organization&quot;&gt;
          ... (ViewFields, ViewGrids, ViewScreenSections) ...
          &lt;ViewScreenSection name=&quot;Associations&quot; phrase=&quot;Associations&quot;&gt;
             &lt;ViewGrid moduleID=&quot;ppl&quot; import=&quot;yes&quot;&gt;
                &lt;Conditions&gt;
                   &lt;Condition field=&quot;StillEmployed&quot; value=&quot;yes&quot;/&gt;
                &lt;/Conditions&gt;
             &lt;/ViewGrid&gt;
             ... (more ViewGrids) ...
             &lt;ViewGrid moduleID=&quot;bpc&quot;/&gt;
             '''&lt;ViewGrid moduleID=&quot;lrn&quot;/&gt;'''
          &lt;/ViewScreenSection&gt;
          ...
       &lt;/ViewScreen&gt;
       ...
       '''&lt;EditScreen name=&quot;Learning&quot; phrase=&quot;Learning|Associate learning events with the organization&quot;&gt;'''
          '''&lt;RecordSummaryFieldsRef/&gt;'''
          '''&lt;EditGrid moduleID=&quot;lrn&quot;/&gt;'''
       '''&lt;/EditScreen&gt;'''
    &lt;Screens&gt;
    ...
 &lt;/Module&gt;

===InsertionTarget: An optional element in the host module definition ===

Elements inserted from an add-on file are by default inserted into the host element at the end of its siblings (compare for instance how the &quot;lrn&quot; ViewGrid is inserted after the &quot;bpc&quot; ViewGrid in the example above), but this is not always desirable. In order to enable inserting an element at a different location among siblings, a special element named &lt;InsertionTarget/&gt; may be inserted into the host module.

The host module file could be changed like this:

 ...
 &lt;ViewScreenSection name=&quot;Associations&quot; phrase=&quot;Associations&quot;&gt;
    &lt;ViewGrid moduleID=&quot;ppl&quot; import=&quot;yes&quot;&gt;
       &lt;Conditions&gt;
          &lt;Condition field=&quot;StillEmployed&quot; value=&quot;yes&quot;/&gt;
       &lt;/Conditions&gt;
    &lt;/ViewGrid&gt;
    ... (more ViewGrids) ...
    &lt;InsertionTarget/&gt;
    &lt;ViewGrid moduleID=&quot;bpc&quot;/&gt;
 &lt;/ViewScreenSection&gt;
 ...

The resulting section of the merged code would look like this:

 ...
 &lt;ViewScreenSection name=&quot;Associations&quot; phrase=&quot;Associations&quot;&gt;
    &lt;ViewGrid moduleID=&quot;ppl&quot; import=&quot;yes&quot;&gt;
       &lt;Conditions&gt;
          &lt;Condition field=&quot;StillEmployed&quot; value=&quot;yes&quot;/&gt;
       &lt;/Conditions&gt;
    &lt;/ViewGrid&gt;
    ... (more ViewGrids) ...
    '''&lt;ViewGrid moduleID=&quot;lrn&quot;/&gt;'''
    &lt;InsertionTarget/&gt;
    &lt;ViewGrid moduleID=&quot;bpc&quot;/&gt;
 &lt;/ViewScreenSection&gt;
 ...

The InsertionTarget is kept while processing all add-on files but removed before the actual processing of the XML data begins, i.e. generating the module.

==Central Add-ons==
A central add-on must indicate which modules that it applies to. This is done through a special attribute in the &lt;ModuleAddOn&gt; element, named applyToModules:

 &lt;ModuleAddOn '''applyToModules=&quot;org chm&quot;'''&gt;

The module IDs of the intended host modules should be separated by space characters.

===Host module replacement strings===
Because it may be necessary for a central add-on to reference certain (very few) properties of the host module, the following replacement strings are supported in element attributes:

; **host_moduleID** :Is replaced with the module ID of the host module.
; **host_recordIDField** :Is replaced with the record ID field (last or only defined Primary Key field).

Example usage:
 &lt;SubModule moduleID=&quot;lrn&quot; name=&quot;Learning&quot; parentKey=&quot;**host_recordIDField**&quot; localKey=&quot;RelatedRecordID&quot;&gt;
    &lt;SubModuleCondition field=&quot;RelatedModuleID&quot; value=&quot;**host_moduleID**&quot;/&gt;
 &lt;/SubModule&gt;

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>AnonEditScreen</title>
    <id>2661</id>
    <revision>
      <id>7656</id>
      <timestamp>2010-03-06T02:19:44Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">The AnonEditScreen allows anonymous users to enter a record into Active Agenda. This is useful in cases where anonymous reporting is desirable or required by law. For the AnonEditScreen to work, you must create a user account (within the Active Agenda application) for the purpose of anonymous data entry, and assign edit permissions for the desired modules. Only modules with a defined AnonEditScreen support anonymous data entry. The following example was taken from the Suggestions module. 

 &lt;AnonEditScreen name=&quot;Submit&quot; phrase=&quot;Submit|Submit a new suggestion&quot;&gt;
   &lt;ViewField name=&quot;SuggestionID&quot;/&gt;
   &lt;OrgComboField name=&quot;OrganizationID&quot; findMode=&quot;text&quot;&gt;
      &lt;SampleItem ID=&quot;1&quot; name=&quot;Active Agenda, HQ&quot;/&gt;
      &lt;SampleItem ID=&quot;3&quot; name=&quot;Active Agenda, Sacramento&quot;/&gt;
      &lt;SampleItem ID=&quot;5&quot; name=&quot;Active Agenda, New York&quot;/&gt;
      &lt;SampleItem ID=&quot;7&quot; name=&quot;Active Agenda, Munich&quot;/&gt;
   &lt;/OrgComboField&gt;
   &lt;PersonComboField name=&quot;PersonSubmitID&quot; findMode=&quot;alpha&quot;&gt;
      &lt;SampleItem ID=&quot;1&quot; name=&quot;Mattias Thorslund&quot; orgName=&quot;Active Agenda, HQ&quot;/&gt;
      &lt;SampleItem ID=&quot;2&quot; name=&quot;Larry Hansen&quot; orgName=&quot;Active Agenda, Norway&quot;/&gt;
      &lt;SampleItem ID=&quot;3&quot; name=&quot;Dan Zahlis&quot; orgName=&quot;Active Agenda, Sweden&quot;/&gt;
      &lt;SampleItem ID=&quot;4&quot; name=&quot;Jane Doe&quot; orgName=&quot;Active Agenda, Latvia&quot;/&gt;
   &lt;/PersonComboField&gt;
   &lt;DateField name=&quot;SubmittalDate&quot;/&gt;
   &lt;EditField name=&quot;SuggestionTitle&quot; size=&quot;75&quot; maxLength=&quot;128&quot;/&gt;
   &lt;MemoField name=&quot;PresentMethod&quot; rows=&quot;5&quot; cols=&quot;75&quot;/&gt;
   &lt;MemoField name=&quot;ProposedImprovement&quot; rows=&quot;5&quot; cols=&quot;75&quot;/&gt;
   &lt;MemoField name=&quot;PotentialOpp&quot; rows=&quot;5&quot; cols=&quot;75&quot;/&gt;
   &lt;CheckBoxField name=&quot;WorkOrderRequired&quot;/&gt;
 &lt;/AnonEditScreen&gt;


You must also define the anonymous account's user credentials within the config.php file (see config-dist.php). You must define the credentials established for the anonymous user within the application in ANON_USER and ANON_PASS.

 define('ANON_USER', 'anonymous');
 define('ANON_PASS', 'change_me');

To enter an anonymous record, you must stipulate the correct path within the browser address field. The path must include the following elements:

 sitename/path/anonedit.php?mdl=moduleID&amp;scr=ScreenName

The following link would be used for the anonymous edit screen of the Suggestions module running on the demo installation of Active Agenda installed to the s2a folder directory:

 http://demo.activeagenda.net/s2a/anonedit.php?mdl=sgg&amp;scr=Submit

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>CalculatedField</title>
    <id>1217</id>
    <revision>
      <id>6525</id>
      <timestamp>2009-06-19T22:14:32Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Attributes */</comment>
      <text xml:space="preserve">A '''CalculatedField''' is a [[ModuleField]] that is used to represent calculated values as fields.

== XML syntax ==
''(Note: optional attributes omitted):''
 &lt;CalculatedField
            name=&quot;FieldName&quot; 
            calcFunction=&quot;(supported function)&quot; 
            params=&quot;(supported parameters)&quot; 
            phrase=&quot;[[Phrase|Short Phrase|Long phrase]]&quot;/&gt;

== Attributes ==
;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.

;calcFunction:''Required.''  Which built-in function to use.
:Valid functions:
::&quot;add&quot;
::&quot;dateadd&quot;
::&quot;datediff&quot;
::&quot;datediff_day_hour&quot;
::&quot;datediff_inclusive&quot; (includes the end day of the interval, e.g. 2007-08-26 thru 2007-08-27 = 2 days)
::&quot;datediff_year_month&quot;
::&quot;daysremaining&quot;      (may return negative value)
::&quot;daysremaining_not_negative&quot;
::&quot;divide&quot;
::&quot;duedateformat&quot;
::&quot;extractdate&quot;
::&quot;extracttime&quot;
::&quot;filesize&quot;           (converts number of bytes to a human-readable string, as kiB or MiB)
::&quot;greatest&quot;           (returns the largest value of any number of parameters)
::&quot;if&quot;
::&quot;is_greater_than&quot;    (useful for summarizing bool fields where value is true)
::&quot;ifnull&quot;
::&quot;is_recent&quot;
::&quot;least&quot;              (returns the smallest value of any number of parameters)
::&quot;max&quot;                (returns the greater of two values. Use &quot;greatest&quot; instead.)
::&quot;multiply&quot;
::&quot;subtract&quot;
::&quot;sum&quot;                (adds an arbitrary number of parameters together)
::&quot;timediff&quot;
::&quot;timeremaining&quot;

;params:''Required.''  The specific field parameters and/or conditions to be associated with the calcFunction.
:Valid parameters:
::&quot;Field1&quot;
::&quot;Field1 Field2&quot;
::&quot;#now()&quot;
::&quot;Field #value&quot;

;validate:''Optional.'' [[Validation instructions|Validation instructions]] used to require data entry or permit the saving of empty fields.
;phrase:''Required.'' A [[phrase]] that contains the English label that the field should be displayed with in the application.
;sample:''Optional.'' A value that serves as sample data when viewing an XML module definition file with the [[XSL viewer]].

== Parameters ==
Each calcFunction takes one or more parameters, in the params attribute. A parameter can be another [[ModuleField]] that is defined in the same module, a constant value (number), or a SQL function. Data types of the parameters matter to calculated fields.

* Field names are assumed by default.
* To specify a constant value, precede the number with &quot;#&quot;: #1
* To specify a SQL function (we only use &quot;now()&quot;, currently), enter it like a constant value: #now()
**This is not ideal: We need to use a different &quot;special character&quot; to specify SQL functions... --[[User:AADocAdmin|Aaadmin]] 13:15, 3 Apr 2006 (PDT)

== Basic Math ==

=== ''Add'' ===
Adds the first paramter to the second. 

 calcFunction=&quot;add&quot;

'''Parameters:'''
#First value (number)
#Second value (number)

=== ''Subtract'' ===
Subtracts the the first paramter from the second. 

 calcFunction=&quot;subtract&quot;

'''Parameters:'''
#First value (number)
#Second value (number)

 &lt;CalculatedField name=&quot;ActualDays&quot; calcFunction=&quot;subtract&quot; params=&quot;Days DaysNotScheduled&quot; 
 validate=&quot;&quot; phrase=&quot;Sample Phrase|This is a sample phrase&quot; sample=&quot;15&quot;/&gt;

=== ''Multiply'' ===
Multiplies the first parameter with the second. 

 calcFunction=&quot;multiply&quot;

'''Parameters:'''
#First value (number)
#Second value (number)

=== ''Divide'' ===
 calcFunction=&quot;divide&quot;

'''Parameters:'''
#First value (number)
#Second value (number)

=== ''Sum'' ===
Adds an arbitrary number of parameters together. 

 calcFunction=&quot;sum&quot;

'''Parameters:'''
#First value (number)
#Second value (number)
#...additional parameters

=== ''Greatest'' ===
Finds the largest value out or an arbitrary number of parameters.

 calcFunction=&quot;greatest&quot;

'''Parameters:'''
#First value (number)
#Second value (number)
#...additional parameters

=== ''Least'' ===
Finds the smallest value out or an arbitrary number of parameters.

 calcFunction=&quot;least&quot;

'''Parameters:'''
#First value (number)
#Second value (number)
#...additional parameters

== Time ==
Calculated fields can also be used to calculate time values:

=== '''''Days Remaining''''' ===
The Days Remaining function calculates the number of days remaining between a stated parameter; such as, a date field and the current date of the internal calendar on the server. The days remaining function will return and display a negative value if the calculated days remaining results in a negative number. This function is ideally used when the value tracked needs to reflect the number of days passed since the stated parameter (e.g. Days remaining to complete an action before the action due date).  

 calcFunction=&quot;daysremaining&quot;

'''Parameters:'''
#A date (date)

=== '''''Days Remaining (Not Negative)''''' ===
The Days Remaining (Not Negative) function calculates the number of days remaining between a stated parameter; such as, a date field and the current date of the internal calendar on the server. Adding &quot;_not_negative&quot; to the days remaining function will display a &quot;0&quot; if the calculated days remaining result in a negative number. This function is ideally used when the value tracked needs to reflect the days remaining between a beginning and a stipulated end date (e.g. current date).  

 calcFunction=&quot;daysremaining_not_negative&quot;

'''Parameters:'''
#A date (date)

 &lt;CalculatedField name=&quot;DaysRemaining&quot; type=&quot;int&quot; calcFunction=&quot;daysremaining_not_negative&quot;
 params=&quot;EndDate&quot; phrase=&quot;Sample Phrase|This is a sample phrase&quot; sample=&quot;3&quot;/&gt;

=== '''''Date Add''''' ===
The Date Add function calculates the value of an &quot;ending date&quot; based on stated parameters; such as, a date field, a term value, and an associated term unit. Using a date field type will result in a date value which equals the date field plus the term and term units. This function is ideally used when the value tracked needs to reflect a distinct date that ends after a period of time (e.g. expiration date).

 calcFunction=&quot;dateadd&quot;

'''Parameters:'''
#A date (date)
#A term unit (TermUnitID)
#A term value (integer or float)

 &lt;CalculatedField name=&quot;QualificationExpirationDate&quot; type=&quot;date&quot; calcFunction=&quot;dateadd&quot; 
 params=&quot;QualificationDate QualificationTermUnitsID QualificationTerm&quot; 
 phrase=&quot;Expiration Date|The date the qualification will expire and no longer be valid&quot; 
 sample=&quot;01/01/2004&quot;/&gt;

=== '''''Date Difference''''' ===
The date difference function is used to calculate the number of days between two date fields. 

 calcFunction=&quot;datediff&quot;

'''Parameters:'''
#The later date (date)
#The earlier date (date)

 &lt;CalculatedField name=&quot;Days&quot; calcFunction=&quot;datediff&quot; params=&quot;EndDate StartDate&quot; validate=&quot;&quot;
 phrase=&quot;Sample Phrase|This is a sample phrase&quot; sample=&quot;21&quot;/&gt;

=== '''''Date Difference With Second Parameter Optionally Null''''' ===
Certain date calculations are based on the calendar date of the server and a date field which may contain empty values. This is accomplished by using two calculated fields. The first calculated field (Field 1 below) utilizes an &quot;ifnull&quot; function to display the current calendar date of the server when no data is entered into the date field. The second calculated field (Field 2 below) can then use the first field to calculate a date difference with an empty field. This is particularly useful for situations such as calculating an employment service term prior to an employee being terminated. In this example, the service term is calculated based on the empoyee's ServiceEndDate and BeginDate.  

 Field 1. &lt;CalculatedField name=&quot;ServiceEndDate&quot; calcFunction=&quot;ifnull&quot; params=&quot;EndDate #now()&quot; 
 validate=&quot;&quot; phrase=&quot;Sample Phrase|This is a sample phrase&quot; sample=&quot;02/02/2002&quot;/&gt;

 Field 2. &lt;CalculatedField name=&quot;Service&quot; calcFunction=&quot;datediff_year_month&quot; params=&quot;ServiceEndDate 
 BeginDate&quot; validate=&quot;&quot; phrase=&quot;Sample Phrase|This is a sample phrase&quot; sample=&quot;21&quot;/&gt;

== Conditionals ==
=== ''If/else'' ===
 calcFunction=&quot;if&quot;

'''Parameters:'''
#What to evaluate - must be 1 for true, 0 for false.
#What to return if true (1)
#What to return if false (0)

=== ''If null - dealing with empty values'' ===
 calcFunction=&quot;ifnull&quot;

'''Parameters:'''
#Returned as long as it is not null  (any datatype)
#Returned if first parameter is null (any datatype, but same as first)

== Other ==
=== ''File size formatting'' ===
Formats an integer value (representing the number of bytes) in a more human-friendly way. For example: &quot;123 bytes&quot;, &quot;123.4 kilobytes&quot;, or &quot;1.2 megabytes&quot;.

 calcFunction=&quot;filesize&quot;

'''Parameters:'''
#The file size in bytes (number)

 &lt;CalculatedField name=&quot;FileSizeDisplay&quot; calcFunction=&quot;filesize&quot; params=&quot;FileSize&quot; 
 phrase=&quot;File Size|The size of the uploaded file&quot; sample=&quot;2.02&quot;/&gt;


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Central Sub Modules</title>
    <id>1142</id>
    <revision>
      <id>8104</id>
      <timestamp>2010-05-14T23:55:12Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">A Central Sub Module (CSM) is a sub-module which is populated from more than one module. CSM's utilize several field types to display a description of records contributing data to the CSM:

* A [[ForeignField]] is used to display the module name of the module contributing to the record to the CSM,
* A [[DynamicForeignField]] is used to display the [[RecordDescription]] of the contributing record,
* A DynamicForeignField is used to capture the [[OwnerOrganizationID]] of the organization associated with the contributing record, and a related ForeignField is used to display, search, report, and chart the CSM records based on the contributing organization.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Charts</title>
    <id>1124</id>
    <revision>
      <id>7641</id>
      <timestamp>2010-01-05T05:59:56Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Attributes */</comment>
      <text xml:space="preserve">The data included within charts is defined by the search filter parameters selected by a user. The search criteria applied on the [[SearchScreen|Search Screen]] filters the records to be included on the [[ListScreen|List Screen]]. The records included on the list screen are used to generate charts and reports.

== Pie Chart ==
[[Image:ChartPie.png|250px|right|Sample Pie Chart]]
The following script generates a simple '''Pie Chart''' which groups the data based on the RelatedModule field and summarizes the data based on the ImperativeID. This example groups risk imperatives by module and displays a summary count of records within a pie chart: 

 &lt;Charts&gt;
   &lt;PieChart name=&quot;Pie01&quot; title=&quot;Risk Imperatives By Module&quot;&gt;
     &lt;GroupByField name=&quot;RelatedModule&quot;/&gt;
     &lt;SummaryField name=&quot;ImperativeID&quot; type=&quot;count&quot;/&gt;
   &lt;/PieChart&gt;
 &lt;/Charts&gt;

== Pareto Chart ==
[[Image:ChartPareto.png|250px|right|Sample Pareto Chart]]
The following script generates a simple '''Pareto Chart''' which groups the data based on the RelatedModule field and summarizes the data based on the ImperativeID. This example groups risk imperatives by module and displays a summary count of records within a Pareto format: 

 &lt;Charts&gt;
   &lt;ParetoChart name=&quot;Pareto01&quot; title=&quot;Risk Imperatives By Module&quot;&gt;
     &lt;GroupByField name=&quot;RelatedModule&quot;/&gt;
     &lt;SummaryField name=&quot;ImperativeID&quot; type=&quot;count&quot;/&gt;
   &lt;/ParetoChart&gt;
 &lt;/Charts&gt;

== Radar Chart ==
[[Image:ChartRadar.png|250px|right|Sample Radar Chart]]
The following script generates a simple '''Radar Chart''' which groups the data based on the RelatedModule field and summarizes the data based on the ImperativeID. This example groups risk imperatives by module and displays a summary count of records within a Radar format:
 &lt;Charts&gt; 
   &lt;RadarChart name=&quot;Radar01&quot; title=&quot;Hazards categorized by Risk Imperative&quot; subModuleID=&quot;rsk&quot; mode=&quot;categorize&quot;&gt;
     &lt;GroupByField name=&quot;RiskImperative&quot;/&gt;
     &lt;SummaryField name=&quot;ImperativeID&quot; type=&quot;count&quot;/&gt;
   &lt;/RadarChart&gt;
 &lt;/Charts&gt;

== Bar Chart ==
[[Image:ChartBar.png|250px|right|Sample Bar Chart]]
The following script generates a simple '''Bar Chart''' which groups the data based on a specified date field.
 &lt;BarChart name=&quot;Bar10&quot; title=&quot;Corrective Actions by Month&quot;&gt;
   &lt;GroupByField name=&quot;CorrActDate&quot; dateInterval=&quot;yearmonth&quot;/&gt;
   &lt;SummaryField name=&quot;CorrActID&quot; type=&quot;count&quot;/&gt;
 &lt;/BarChart&gt;

A dateInterval attribute can be applied to the GroupByField and is used to stipulate a time period to group the data within. The acceptable values for this attribute are as follows:

* dateInterval=&quot;year&quot;
* dateInterval=&quot;yearquarter&quot;
* dateInterval=&quot;yearmonth&quot;
* dateInterval=&quot;yearweek&quot;

Example:
 &lt;BarChart name=&quot;Bar09&quot; title=&quot;Corrective Actions by Week&quot;&gt;
   &lt;GroupByField name=&quot;CorrActDate&quot; '''dateInterval=&quot;yearweek&quot;'''/&gt;
   &lt;SummaryField name=&quot;CorrActID&quot; type=&quot;count&quot;/&gt;
 &lt;/BarChart&gt;

The type attribute can be used to generate charts based on a sum total of numerical values. This is achieved by adding the type=&quot;sum&quot; attribute value.

Example:
 &lt;BarChart name=&quot;Bar15&quot; title=&quot;Outstanding Costs By Day&quot;&gt;
   &lt;GroupByField name=&quot;CostDate&quot;/&gt;
   &lt;SummaryField name=&quot;Outstanding&quot; '''type=&quot;sum&quot;'''/&gt;
 &lt;/BarChart&gt;

=== Attributes ===
[[Image:ValueLabels.png|250px|right|Sample Chart With Values]]
;valueLabels: ''Optional.'' Displays a numerical value on a chart. Valid choices: &quot;yes&quot;, &quot;no&quot;.

Example:
 &lt;BarChart name=&quot;Bar06&quot; title=&quot;Measurement Results By Date&quot; '''valueLabels=&quot;yes&quot;'''&gt;
   &lt;GroupByField name=&quot;MeasurementResultDate&quot;/&gt;
   &lt;SummaryField name=&quot;Result&quot;/&gt;
 &lt;/BarChart&gt; 

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>CheckBoxField</title>
    <id>2605</id>
    <revision>
      <id>6118</id>
      <timestamp>2007-11-28T04:14:18Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Image:CheckBoxField.png|frame|right|A series of CheckBoxFields]]
The '''CheckBoxField''' element displays CodeField items using [http://en.wikipedia.org/wiki/Check_box check boxes] within the graphical user interface. A CheckBoxField allows users to make multiple selections from a number of options.

Contrary to the name, this element displays a set of [http://en.wikipedia.org/wiki/Radio_button radio buttons] for &quot;Yes&quot;, &quot;No&quot; and &quot;No value&quot; (for the NULL value).



== XML syntax ==


'''''Code Item Selection''' for [[Data_type|int]] fields'':


 &lt;CheckBoxFieldname=&quot;RiskImperativeID&quot; orientation=&quot;vertical&quot;&gt;
   &lt;SampleItem ID=&quot;1&quot; name=&quot;Operations&quot;/&gt;
   &lt;SampleItem ID=&quot;2&quot; name=&quot;Human Safety&quot;/&gt;
   &lt;SampleItem ID=&quot;3&quot; name=&quot;Product Quality&quot;/&gt;
   &lt;SampleItem ID=&quot;4&quot; name=&quot;Labor Relations&quot;/&gt;
   &lt;SampleItem ID=&quot;5&quot; name=&quot;Corporate Ethics&quot;/&gt;
 &lt;/CheckBoxField&gt;


== Attributes ==
;name:''Required.'' A [[TableField]] name that exists within the XML definition file's ModuleFields section and the field is a valid &quot;int&quot; [[Data_type|data type]]. The TableField must correspond with a [[CodeField]] that includes the codeTypeID attribute with the numerical value of the code type to be selected.   
;orientation:''Optional.'' The orientation attribute enables the display of radio buttons in a horizontal or vertical alignment. The default value is horizontal. The method for displaying radio buttons in a vertical alignment is as follows: orientation=&quot;vertical&quot;

== Elements ==
;SampleItem:''Optional.'' The SampleItem element is used to help XML authors understand the types of data anticipated. This attribute is always optional.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>CodeCheckSearchField</title>
    <id>2572</id>
    <revision>
      <id>6141</id>
      <timestamp>2007-11-28T18:33:24Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Image:CodeCheckSearchField.png|frame|right|Check boxes on the Search Screen]]
The CodeCheckSearchField (CCSF) is used within the [[SearchScreen|Search Screen]] to search sub-module records using a series of check boxes corresponding with the related code items. The CCSF searches records of a sub-module and therefore requires a corresponding sub-module declaration within the SubModules section.


== XML syntax ==

'''''Using a CodeCheckSearchField to enable filtering by one or more risk imperatives associated with a Corrective Action module record''''':

 &lt;SubModules&gt;
   &lt;SubModule moduleID=&quot;rsk&quot; name=&quot;Risk Imperatives&quot; parentKey=&quot;CorrActID&quot; localKey=&quot;RelatedRecordID&quot;&gt;
     &lt;SubModuleCondition field=&quot;RelatedModuleID&quot; value=&quot;cor&quot;/&gt;
   &lt;/SubModule&gt;
 &lt;SubModules&gt;

 &lt;Screens&gt;
   &lt;SearchScreen name=&quot;Search&quot; phrase=&quot;Search|Search corrective actions&quot;&gt; 
     &lt;CodeCheckSearchField name=&quot;RiskImperativeID&quot;
       subModuleID=&quot;rsk&quot;
       subModuleModuleIDField=&quot;RelatedModuleID&quot;
       subModuleRecordIDField=&quot;RelatedRecordID&quot;
       codeIDField=&quot;RiskImperativeID&quot;
       codeTypeID=&quot;234&quot;
       phrase=&quot;Risk Imperatives|Filter search results by one or more related risk imperatives&quot;/&gt;
   &lt;/SearchScreen&quot;&gt; 
 &lt;/Screens&gt;

== Elements ==
;SubModule:''Required.'' The SubModule element is required to establish the relationship between the parent and related records being searched.
;SubModuleCondition:''Optional.'' The SubModuleCondition element is optional unless the submodule is a [[Central_Sub_Modules|Central Sub Module]] used to associate the search conditions with many different modules. '''In the case of a Central Sub Module, the SubModuleCondition element is required to establish the table relationships'''.
;CodeCheckSearchField:''Required.'' The CodeCheckSearchField element is required to establish the relationship between the parent and related records and the filter conditions of the search.

== Attributes ==

;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.
;subModuleID:''Required.'' The subModuleID attribute is used to identify the sub-module containing the associated records.
;subModuleModuleIDField:''Required.'' The subModuleModuleIDField attribute is used to identify the module contributing the data to the sub-module. For [[:Category:Association Modules|association modules]], this is usually defined as &quot;RelatedModuleID&quot;
;subModuleRecordIDField:''Required.'' The subModuleRecordIDField attribute is used to associate the sub-module record with the contributing module record. For [[:Category:Association Modules|association modules]], this is usually defined as &quot;RelatedRecordID&quot;
;codeIDField:''Required.'' The codeIDField attribute is used to define the [[TableField|table field]] to be included within the search. The table field defined will always be associated with a [[CodeField|code field]].
;codeTypeID:''Required.'' The codeTypeID attribute is used to define the specific code type to be used for the search. The codeTypeID must correspond with the codeTypeID attribute applied to the [[CodeField|code field]] of the corresponding sub-module field. The codeTypeID is a numerical value which corresponds with the primary key of the respective code type entered into the [[Codes Module|Codes module]]. 
;phrase:''Required.'' A [[phrase]] that contains the English label that the field should be displayed with in the application.
;sample:''Optional.'' A value that serves as sample data when viewing an XML module definition file with the [[XSL viewer]].



 
[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>CodeComboField</title>
    <id>1297</id>
    <revision>
      <id>6206</id>
      <timestamp>2008-02-27T18:39:20Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>fixed findMode info</comment>
      <text xml:space="preserve">[[Image:CodeCombo.png|frame|right|CodeComboField Display]]
The '''CodeComboField''' element is used to enable code item selection from a code types list using a combo box on the graphical user interface. A '''CodeComboField''' is a special case of the [[ComboField]].






== XML syntax ==

'''''Code Selection''' for [[Data_type|int]] fields'':

 &lt;CodeComboField name=&quot;ReportSourceID&quot; findMode=&quot;text&quot;&gt;
   &lt;SampleItem ID=&quot;1&quot; name=&quot;Employee&quot;/&gt;
   &lt;SampleItem ID=&quot;2&quot; name=&quot;Internal Audit&quot;/&gt;
   &lt;SampleItem ID=&quot;3&quot; name=&quot;External Audit&quot;/&gt;
   &lt;SampleItem ID=&quot;4&quot; name=&quot;Contractor Report&quot;/&gt;
   &lt;SampleItem ID=&quot;5&quot; name=&quot;Visitor Report&quot;/&gt;
   &lt;SampleItem ID=&quot;6&quot; name=&quot;Regulatory Visit&quot;/&gt;
   &lt;SampleItem ID=&quot;7&quot; name=&quot;Customer Report&quot;/&gt;
   &lt;SampleItem ID=&quot;8&quot; name=&quot;Claim of Loss&quot;/&gt;
 &lt;/CodeComboField&gt;

== Attributes ==
;name:''Required.'' A [[TableField]] name that exists within the XML definition file's ModuleFields section and the field is a valid &quot;int&quot; [[Data_type|data type]]. The TableField must correspond with a [[CodeField]] that includes the codeTypeID attribute with the numerical value of the code type to be selected.   
;findMode:''Optional.''The findMode attribute enables searching of combo box list items based on text entered into a text box preceeding the combo box. There is currently one available findMode, &quot;text&quot;, which filters the list items based on the contents of the text entered into the text box, alphabetically. An older findMode value, &quot;alpha&quot; is now implemented the same way. &quot;text&quot; and &quot;alpha&quot; are therefore synonymous.
;suppressItemAdd:''Optional.'' Adding the suppressItemAdd=&quot;yes&quot; attribute to any Code, Person, or Org Combo field will suppress the functionality that allows users to edit these lists from an edit screen.

== Elements ==
;SampleItem:''Optional.'' The SampleItem element is used to help XML authors understand the types of data anticipated. This element is always optional.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>CodeField</title>
    <id>1211</id>
    <revision>
      <id>6521</id>
      <timestamp>2009-06-15T03:44:53Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Attributes */</comment>
      <text xml:space="preserve">CodeFields (CF's) are a sub-type of the ForeignField which is hard-coded to join to the [[Codes Module|Codes module]]. Provides a standardized method of incorporating data from basic lookup lists that are kept as codes.

The CodeField usually serves as the &quot;list&quot; [[ModuleField]] corresponding with a [[CodeComboField]] that is used in [[Screen|Screens]] or [[GridForm|Grid Forms]].

== Attributes ==
;codeTypeID:''Required.'' The codeTypeID attribute is used to identify which code type to use to populate the code list. The codeTypeID is a numerical value which corresponds with the primary key of the respective code type entered into the [[Codes Module|Codes module]]. When introducing a new code type into an XML module specification, a corresponding codeTypeID must be added to the database. In order to avoid codeTypeID conflicts, we encourage those using custom codes to use negative integers.
;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.
;key:''Required.'' The name of a local module field (not necessarily a [[TableField]]) to be matched against the ''foreignKey'' field.
;displayValueField: ''Optional.'' Whether to display the content of the Value field (rather than the Description field) in the code record. Usage: displayValueField=&quot;yes&quot;
;phrase:''Required.'' A [[phrase]] that contains the English label that the field should be displayed with in the application.
;sample:''Optional.'' A value that serves as sample data when viewing an XML module definition file with the [[XSL viewer]].

== Sub-elements ==
Optionally, one or more [[ListCondition]] elements can be included.

== Sample usage ==

'''''Using a CodeField to associate a code list from the Codes module as a Module TableField''''': 
 &lt;ModuleFields&gt;
  
  &lt;TableField name=&quot;LikelyChangeID&quot; type=&quot;int&quot; validate=&quot;noValidation&quot; phrase=&quot;Likely to Result 
  in Change|Whether the feedback is accepted and going to result in change&quot; sample=&quot;1&quot;/&gt;
  
  &lt;CodeField name=&quot;LikelyChange&quot; key=&quot;LikelyChangeID&quot; phrase=&quot;Likely to Result in Change|
  Whether the feedback is accepted and going to result in change&quot; sample=&quot;Yes&quot; codeTypeID=&quot;143&quot;/&gt;
  
 &lt;/ModuleFields&gt;

 
[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>CodeRadioField</title>
    <id>2604</id>
    <revision>
      <id>6120</id>
      <timestamp>2007-11-28T06:51:55Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Image:CodeRadioField.png|frame|right|CodeRadioField with orientation=&quot;vertical&quot; attribute]]
The '''CodeRadioField''' element displays CodeField items using [http://en.wikipedia.org/wiki/Radio_button radio buttons] within the graphical user interface.





== XML syntax ==

'''''Code Item Selection''' for [[Data_type|int]] fields'':

 &lt;CodeRadioField name=&quot;RiskImperativeID&quot; orientation=&quot;vertical&quot;&gt;
   &lt;SampleItem ID=&quot;1&quot; name=&quot;Operations&quot;/&gt;
   &lt;SampleItem ID=&quot;2&quot; name=&quot;Human Safety&quot;/&gt;
   &lt;SampleItem ID=&quot;3&quot; name=&quot;Product Quality&quot;/&gt;
   &lt;SampleItem ID=&quot;4&quot; name=&quot;Labor Relations&quot;/&gt;
   &lt;SampleItem ID=&quot;5&quot; name=&quot;Corporate Ethics&quot;/&gt;
 &lt;/CodeRadioField&gt;


== Attributes ==
;name:''Required.'' A [[TableField]] name that exists within the XML definition file's ModuleFields section and the field is a valid &quot;int&quot; [[Data_type|data type]]. The TableField must correspond with a [[CodeField]] that includes the codeTypeID attribute with the numerical value of the code type to be selected.   
;orientation:''Optional.'' The orientation attribute enables the display of radio buttons in a horizontal or vertical alignment. The default value is horizontal. The method for displaying radio buttons in a vertical alignment is as follows: orientation=&quot;vertical&quot;

== Elements ==
;SampleItem:''Optional.'' The SampleItem element is used to help XML authors understand the types of data anticipated. This attribute is always optional.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>CombinedField</title>
    <id>1123</id>
    <revision>
      <id>3099</id>
      <timestamp>2006-04-22T02:05:13Z</timestamp>
      <contributor>
        <username>MThorslund</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve">A CombinedField (CF) is used to display more than one [[ModuleField]] within a single field. A most common use of the CombinedField is the [[RecordDescriptionField]] 


== XML syntax ==
''(Note: optional attributes omitted):''

 &lt;CombinedField name=&quot;RecordLabel&quot; 
    phrase=&quot;Record Label|The short, concise, label of the record for display purposes&quot; 
    sample=&quot;Mattias Thorslund | 01-01-2006 | Ongoing&quot;&gt;
     &lt;CombinedFieldRef name=&quot;PersonAccountable&quot;/&gt;;_
     &lt;CombinedFieldRef name=&quot;DueDate&quot;/&gt;;_
     &lt;CombinedFieldRef name=&quot;ActionStatus&quot;/&gt;
 &lt;/CombinedField&gt;

The fields referenced in the CombinedFieldRef elements must be present in the ModuleFields section of the same module definition. Text or characters between the CombinedFieldRef elements will be rendered directly in the application, with the following exceptions:

* The ';' (semicolon) character translates to a '|' (pipe, vertical bar) character.
* The '_' (underscore) character translate to a space character (' ').

For instance, the CombinedField in the example above would result in the following display:

'''''Mattias Thorslund | 01-01-2006 | Ongoing'''''

Inserting additional text and characters between the field references would result in a more meaningful description of the same record. For instance, the CombinedField could be modified as follows:

 &lt;CombinedField name=&quot;RecordLabel&quot; 
    phrase=&quot;Record Label|The short, concise, label of the record for display purposes&quot; 
    sample=&quot;Mattias Thorslund | 01-01-2006 | Ongoing&quot;&gt;
     &lt;CombinedFieldRef name=&quot;PersonAccountable&quot;/&gt;'''_is required to complete this task by_'''
     &lt;CombinedFieldRef name=&quot;DueDate&quot;/&gt;'''_and the task is_'''
     &lt;CombinedFieldRef name=&quot;ActionStatus&quot;/&gt;
 &lt;/CombinedField&gt; 

This syntax above would result in the following display:

'''''Mattias Thorslund is required to complete this task by 01-01-2006 and the task is Ongoing'''''

== Attributes ==
;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.
;separator:''Optional.'' A character combination to separate all the fields in the CombinedField. Best used without any additional text between field references, since that would cause additional insertions of the separator sequence. NULL values will be ignored.
;phrase:''Required.'' A [[phrase]] that contains the English label that the field should be displayed with in the application.
;sample:''Optional.'' A value that serves as sample data when viewing an XML module definition file with the [[XSL viewer]].

== CombinedFieldRef Attributes ==
The CombinedFieldRef sub-element has the following attributes:
;name:''Required.'' The name of a ModuleField in the same module definition.
;prepend:''Optional.'' A character sequence that will be displayed immediately before the value of the referenced field, when the field value is not NULL.
;append:''Optional.'' A character sequence that will be displayed immediately after the value of the referenced field, when the field value is not NULL.



[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ComboField</title>
    <id>2612</id>
    <revision>
      <id>6207</id>
      <timestamp>2008-02-27T18:40:23Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>/* Attributes */ fixed findMode info</comment>
      <text xml:space="preserve">[[Image:ComboBox.png|frame|right|ComboField Display]]
The '''ComboField''' element is used to display [[ForeignField]] items using a combo box within the graphical user interface.






== XML syntax ==

'''''Foreign Field Selection''' for [[Data_type|int]] fields'':

 &lt;ComboField name=&quot;RegionID&quot; findMode=&quot;text&quot;&gt;
   &lt;SampleItem ID=&quot;1&quot; name=&quot;North&quot;/&gt;
   &lt;SampleItem ID=&quot;2&quot; name=&quot;North-East&quot;/&gt;
   &lt;SampleItem ID=&quot;3&quot; name=&quot;North-West&quot;/&gt;
 &lt;/ComboField&gt;

== Attributes ==
;name:''Required.'' A [[TableField]] name that exists within the XML definition file's ModuleFields section and the field is a valid &quot;int&quot; [[Data_type|data type]]. The TableField must correspond with a [[ForeignField]] used to display the foreign module's [[RecordDescriptionField]].   
;findMode:''Optional.''The findMode attribute enables searching of combo box list items based on text entered into a text box preceeding the combo box. There is currently one available findMode, &quot;text&quot;, which filters the list items based on the contents of the text entered into the text box, alphabetically. An older findMode value, &quot;alpha&quot; is now implemented the same way. &quot;text&quot; and &quot;alpha&quot; are therefore synonymous.
;suppressItemAdd:''Optional.'' Adding the suppressItemAdd=&quot;yes&quot; attribute to any Code, Person, or Org Combo field will suppress the functionality that allows users to edit these lists from an edit screen.

== Elements ==
;SampleItem:''Optional.'' The SampleItem element is used to help XML authors understand the types of data anticipated. This attribute is always optional.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ComboSearchField</title>
    <id>2618</id>
    <revision>
      <id>6151</id>
      <timestamp>2007-11-29T05:37:25Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* XML syntax */</comment>
      <text xml:space="preserve">[[Image:ComboSearchField.png|frame|right|ComboSearchField combo box on the Search Screen]]
The ComboSearchField (CSF) is used within the [[SearchScreen|Search Screen]] to search sub-module records using a combo box populated with sub module records. The CSF searches records of a sub-module and therefore requires a corresponding sub-module declaration within the SubModules section.











== XML syntax ==

'''''Using a ComboSearchField to search Situations associated with an Incident Reporting module record''''':



 &lt;SubModules&gt;
   &lt;SubModule moduleID=&quot;ires&quot; name=&quot;Situations&quot; parentKey=&quot;IncidentReportID&quot; localKey=&quot;IncidentReportID&quot;/&gt;
 &lt;/SubModule&gt;
 


 &lt;Screens&gt;
   &lt;SearchScreen name=&quot;Search&quot; phrase=&quot;Search|Search reported incidents and/or situations&quot;&gt; 
     &lt;ComboSearchField name=&quot;IncidentReportSituationID&quot;
     subModuleID=&quot;ires&quot;
     listModuleID=&quot;sit&quot;
     subModuleKey=&quot;IncidentReportSituationID&quot;
     listKey=&quot;SituationID&quot;
     listField=&quot;Situation&quot;
     phrase=&quot;Situation|Filter search results by an associated situation&quot;/&gt;
   &lt;/SearchScreen&quot;&gt; 
 &lt;/Screens&gt;

== Elements ==
;SubModule:''Required.'' The SubModule element is required to establish the relationship between the parent and related records being searched.
;SubModuleCondition:''Optional.'' The SubModuleCondition element is optional unless the submodule is a [[Central_Sub_Modules|Central Sub Module]] used to associate the search conditions with many different modules. '''In the case of a Central Sub Module, the SubModuleCondition element is required to establish the table relationships'''.
;ComboSearchField:''Required.'' The ComboSearchField element is required to establish the relationship between the parent and related records and the filter conditions of the search.

== Attributes ==

;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.
;subModuleID:''Required.'' The subModuleID attribute is used to identify the sub-module containing the associated records.
;listModuleID:''Required.'' The listModuleID attribute is used to identify the module contributing the data to the parent module. For [[:Category:Association Modules|association modules]], this is usually defined as &quot;RelatedModuleID&quot;
;subModuleKey:''Required.'' 
;listKey:''Required.''
;listField:''Required.''
;phrase:''Required.''
;sample:''Optional.''



 
[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Consistency Conditions</title>
    <id>2660</id>
    <revision>
      <id>7714</id>
      <timestamp>2010-03-15T19:07:04Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Image:ConsistencyCondition.png|thumb|Consistency Condition]]
A '''ConsistencyCondition''' is defined in the &lt;ModuleInfo&gt; section of the [[XML Module Definition]] file.
It allows multiple data consistency conditions to be defined within a given module.
These conditions are used to communicate minimum data entry requirements associated with a module.

Unlike [[validation]], a record may be saved in an inconsistent state (i.e. a state that violates the rules of the condition), but the record will be marked as &quot;inconsistent&quot; until all the consistency conditions have been met.

== Anatomy of a Consistency Condition ==
A condition consists of one or more &quot;triggers&quot;, and one or more &quot;targets&quot;.
When a record is saved and a trigger evaluates as true (triggered), the targets are checked.
If a target is not met, the record is said to be in an '''inconsistent state''', and logged in the `ccs` module.

=== Triggers ===
ConditionTriggers are defined as one or more fields of the local module (the module in which the condition is defined) matching an expression.
If there are more than one defined trigger fields in the condition, the trigger is not triggered unless the expressions of all the trigger fields are true.

A consistency condition may have more than one trigger, however, and '''only one trigger''' needs to be triggered in order for the targets to be evaluated.

=== Targets ===
Targets come in two flavors: local and submodule targets.
A '''local target''' will check that a local field evaluates according to a defined expression, much like a single-field condition trigger above.
A '''submodule target''' will check for matching records in a defined submodule.

If there is more than one target defined for the condition that was triggered, '''all the targets must be satisfied''' for the condition to be satisfied.

== XML syntax ==
Here is an example with two ConsistencyConditions:

 &lt;ModuleInfo&gt;
   &lt;!-- other ModuleInfo content here --&gt;
   &lt;ConsistencyCondition&gt;
     &lt;ConditionTrigger&gt;
       &lt;TriggerField name=&quot;Other&quot; mode=&quot;equals&quot; phrase=&quot;the 'Other' field is 'Yes'&quot;&gt;
         &lt;StaticValue value=&quot;1&quot;/&gt;
       &lt;/TriggerField&gt;
     &lt;/ConditionTrigger&gt;
     &lt;LocalFieldTarget name=&quot;OtherDescription&quot; phrase=&quot;Add description in 'Specify Other' field.&quot;&gt;
       &lt;Satisfaction type=&quot;non-empty&quot;/&gt;
     &lt;/LocalFieldTarget&gt;
   &lt;/ConsistencyCondition&gt;
   &lt;ConsistencyCondition&gt;
     &lt;ConditionTrigger&gt;
       &lt;TriggerField name=&quot;ReportedEventID&quot; mode=&quot;equals&quot; phrase=&quot;Event is reported as Incident&quot;&gt;
         &lt;StaticValue value=&quot;1&quot;/&gt;
       &lt;/TriggerField&gt;
     &lt;/ConditionTrigger&gt;
     &lt;SubModuleTarget moduleID=&quot;xhepi&quot; phrase=&quot;Complete Patient Information for involved patients.&quot;&gt;
       &lt;Satisfaction type=&quot;matching-rows&quot; mode=&quot;min&quot; value=&quot;1&quot;/&gt;
     &lt;/SubModuleTarget&gt;
   &lt;/ConsistencyCondition&gt;
 &lt;/ModuleInfo&gt;
 
Within the &lt;ModuleInfo&gt; section of the XML module definition, there can be any number of &lt;ConsistencyCondition&gt; elements.

== Sub-elements and Attributes ==
ConsistencyCondition sub-elements are required to delineate data entry conditions associated with a module. There can be any number of sub-elements within a &lt;ConsistencyCondition&gt; element.

=== ConditionTrigger ===
At least one ConditionTrigger element is required.
If the need arises, we may make it possible to define a ConsistencyCondition that is always &quot;triggered&quot;, which would make the ConditionTrigger element optional.

Example:
 &lt;ConditionTrigger&gt;
     &lt;TriggerField name=&quot;Field1&quot; mode=&quot;equals&quot; phrase=&quot;the 'Field One' field is 'Yes'&quot;&gt;
         &lt;StaticValue value=&quot;1&quot;/&gt;
     &lt;/TriggerField&gt;
 &lt;/ConditionTrigger&gt;

==== TriggerField ====
The ConditionTrigger element must contain at least one TriggerField element. Depending on the choice specified in the &quot;mode&quot; attribute, one or more &quot;value&quot; sub-elements may be required. These may be either StaticValue or FieldValue elements.

'''''Attributes:'''''
;name:''Required.'' The name of a local [[ModuleField]] to be checked by the trigger.
;mode:''Required.'' A comparison mode, described below. Depending on the mode, one or more &quot;value&quot; elements (StaticValue or FieldValue) may be required within the TriggerField element.
;phrase:''Required.'' A phrase that describes the triggered state of the TriggerField. For best appearance in the consistency message, write it without a beginning capital letter, and without an ending period. This is because the phrase will be included as a clause in a single sentence. Example: &quot;the Birth Date field is empty&quot;.


'''''Comparison modes requiring no value sub-elements:'''''
;non-empty: The field contains any value that is not empty 
;non-zero: The field contains any value but 0. 


'''''Comparison modes requiring exactly one value sub-element:'''''
;greater-than: The value of the trigger field is greater than the specified value.
;less-than: The value of the trigger field is less than the specified value.
;equals: The value of the trigger field is equal to the specified value.
;not: The value of the trigger field is not equal to the specified value.


'''''Comparison modes requiring at least one value sub-element:'''''
;in: The value of the trigger field is equal to one of the specified values.
;one-of: Synonymous to 'in'.

More comparison modes can certainly be implemented.    

===== StaticValue =====
'''''Attributes:'''''
;value:''Required.'' A literal value.

===== FieldValue =====
'''''Attributes:'''''
;value:''Required.'' The name of a local field.

=== LocalFieldTarget ===
The local field target element represents a local module field. It must contain one or more Satisfaction elements.

'''''Attributes:'''''
;name:''Required.''  The name of the module field.
;phrase:''Required.'' A an instruction that describes what the user must do to satisfy the target. For best appearance in the consistency message, write it as one or more complete sentences. Example: &quot;Enter the person's birth date in the Birth Date field.&quot;

==== Satisfaction ====
The 'mode' attribute was named 'type' previously. A workaround was committed with revision 1343 that supports either 'mode' or 'type' but issues a warning for 'type'.

'''''Attributes:'''''
;mode:''Required.'' Same as &quot;mode&quot; for a TriggerField. See above.

Note that the Satisfaction of a LocalFieldTarget is not the same to that of a SubModuleTarget. If the mode requires it, one or more FieldValue or StaticValue elements (just as with TriggerField above) must be added within the Satisfaction element.

=== SubModuleTarget ===
The SubModuleTarget element represents a target that depends on a submodule. The relationship to the submodule must be defined in the SubModules section of the module definition file. A SubModuleTarget requires at least one Satisfaction sub-element.

'''Attributes:'''
;moduleID:''Required.'' The module ID of the submodule.
;phrase:''Required.'' A phrase that describes what the user must do in order to satisfy the target. Write the phrase as an instruction, using one or more complete sentences.

==== Satisfaction ====
The Satisfaction element within a SubModuleTarget currently does not accept any value sub-elements. Instead, it uses the &quot;value&quot; attribute for the value.

'''Attributes:'''
;type:''Required.'' This describes what about the submodule to check. The only supported &quot;type&quot; at this time is 'matching-rows', which counts the number of submodule rows that are associated with a record in the current module.
;mode:''Required.'' Which type of comparison is to be made. Currently, the only two modes supported are 'min' and 'max'.
;value:''Required.'' A value to compare with for the expression. 

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Custom XML Definitions</title>
    <id>2632</id>
    <revision>
      <id>8106</id>
      <timestamp>2010-05-16T00:10:24Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">Since SVN revision 1151, you may place customized copies of [[XML Module Definition]] files in a separate folder, away from the default files.  This would keep your customizations from getting overwritten (and/or prevent merge conflicts) when you update your code via SVN. Using the custom folder for customizations also means they are easy to find when you need to review them. 

The s2a generator will look for custom files if the CUSTOM_XML_PATH config.php setting is defined. The suggested location for the custom XML folder is s2a/active_agenda/xml/custom. Just insert the following into your config.php file:

 /**
  *  Location of custom XML module definitions.
  *
  *  When defined, any matching files in this folder will override those in XML_PATH.
  */
 define('CUSTOM_XML_PATH', APP_FOLDER . '/xml/custom');

Files in the custom folder are not limited to Module Definitions but can also be e.g. report definitions. If you create custom modules from scratch, be sure to prefix the [[module ID]] with 'x' in order to avoid future conflicts (otherwise, we may develop a module with the same ID).

== A note on licensing ==
Please note that while you are '''more than welcome''' to customize Active Agenda, you must comply with the [http://www.activeagenda.net/license License].  This means (among other things) that unless you have an  [http://www.activeagenda.net/content/view/399/181/ agreement with Active Agenda, Inc.], you must publicize your changes. A convenient way to do this would be to post them to our Forum, or the development mailing list.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>CustomCode</title>
    <id>2627</id>
    <revision>
      <id>6171</id>
      <timestamp>2007-12-03T17:01:16Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>new article</comment>
      <text xml:space="preserve">The '''CustomCode''' element provides a hook to insert custom PHP code into generated files of screens defined within an [[XML Module Definition]] file. It is used in modules where some unique functionality is needed, which does not make sense to implement into the core and thus be made available to all modules.

The PHP template file (a *Model.php file in s2a/lib/templates) must contain a special insertion placeholder with the format:

 /**CUSTOM_CODE|placeholder-name**/

The PHP code contained in the XML element will be inserted into the generated file where the ''location'' attribute matches the placeholder name in the template file. In order to maintain as little PHP code within the XML files themselves, we use external files for the bulk of the custom PHP code. The typical code to be included in the CustomCode element would be an include statement or a function call.

== Example: ==
'''From accModuleDef.xml (Accountabilities Module):'''

 &lt;ListScreen name=&quot;List&quot;&gt;
      '''&lt;CustomCode location=&quot;accReassign&quot;&gt;
           &lt;![CDATA[ include_once(APP_INCLUDE_PATH . '/accPopUpLink.php'); ]]&gt;
      &lt;/CustomCode&gt;'''
      &lt;ListField name=&quot;AccountabilityID&quot;/&gt;
      (more ListFields)
 &lt;/ListScreen&gt;

The ListModule.php file contains the custom code placeholder &quot;accReassign&quot;, on line 191 (SVN rev. 878).

== More examples: ==
Look at the module definition files for the mtg, ntf, and usr modules for more examples.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>DateField</title>
    <id>2617</id>
    <revision>
      <id>6139</id>
      <timestamp>2007-11-28T18:18:59Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Attributes */</comment>
      <text xml:space="preserve">[[Image:DateField.png|frame|right|DateField Display]]
[[Image:DateTimeField.png|frame|right|DateTimeField Display]]
The '''DateField''' element is used to insert a date [[RemoteField]] or [[TableField]] using a calendar widget within the graphical user interface. Remote fields are the most commonly used field type for date and datetime fields. Using remote fields allows the date and datetime entries to be captured in a central table. Future plans include using  [http://en.wikipedia.org/wiki/Ajax_(programming) AJAX] technologies to display all date entries in a global calendar view. 




== XML syntax ==

'''''Date and/or Date/Time Selection''' for [[Data_type|date or datetime]] fields'':

 &lt;DateField name=&quot;CorrActDate&quot;/&gt;

== Attributes ==
;name:''Required.'' A [[ModuleField]] name that exists within the XML definition file's ModuleFields section and the field is a valid &quot;date&quot; or &quot;datetime&quot; [[Data_type|data type]]. The DateField element is the same whether the ModuleField is a date or datetime data type.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Debugging PHP</title>
    <id>2386</id>
    <revision>
      <id>7927</id>
      <timestamp>2010-03-18T00:50:34Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">Here are some pointers to debugging the PHP code in Active Agenda:

== While generating: ==

The '''s2a.php''' generator is actually a wrapper script which in turn calls '''s2a-generate-module.php''' for each module. The latter script outputs a lot of debug information, which is collected by s2a.php.  The default behavior is to discard this debug information if the module was successfully generated, and to save it as a file if there was an error.

These debug files are saved in the active_agenda/s2alog/ folder. They are named '''debug_'''[module ID]'''_'''[date/time]'''.log'''.

=== Keeping the debug info when a module was successfully generated ===

If you'd like to look into the debug info of modules that were successfully generated, you can pass the '''-d''' parameter with the value '''always''':

 php s2a.php -d always

'''Note''' that the debug info can be a few '''megabytes ''per module''''', so it's probably better to limit the number of modules to be generated with the '''-m''' parameter! See [[Generating a Module]].

=== Seeing the debug info as a module is being generated ===
'''''Note:''' This is not very useful on Windows, as explained below.''

To see the debug info as the module is being generated, it is possible to run the '''s2a-generate-module.php''' script directly from the command line. Note that the syntax for passing the necessary parameters is a little different:

 php s2a-generate-module.php &lt;project_name&gt; &lt;module_id&gt;

* &lt;project_name&gt; is required and should typically be ''active_agenda''.
* &lt;module_id&gt; should be the [[moduleID]] of the module you'd like to generate/debug.

'''The above command will dump ''LOTS'' of debug info directly in your console!'''

This is not very practical. Happily, on Linux and other UNIX-like systems (even Mac?) there is a handy utility program called '''&quot;less&quot;''' (and there is also an older one called &quot;more&quot;), which allows you to easily scroll through the output. On the Windows command-line, there is no such thing as far as we know, and you'd probably be better off reading the debug files as described earlier.

To use &quot;less&quot; with the debug output from the generator, we use the &quot;pipe&quot; character:

 php s2a-generate-module.php &lt;project_name&gt; &lt;module_id&gt; | less


== At run-time: ==

At &quot;run time&quot; (i.e. when accessing the application from your browser), there is of course the venerable old method of printing the debug info directly to the HTML output. Often, this is simple enough but there are situations where it can't be used easily (&quot;AJAX&quot; responses for instance), and it can be confusing to other users if they happen to see the output.

=== debug_r() ===
Active Agenda has a handy function that easily shows the contents of an array or object: debug_r(), which uses PHP's print_r() function and converts the output to HTML. The second parameter is an optional title for the output.

 &lt;?php
  print debug_r($myObject, &quot;This is the content of the object&quot;);
 ?&gt;

=== Logging debug info at run-time: ===

By temporarily setting the TRACE_RUNTIME setting in '''config.php''' to ''true'', any call to '''trace()''' will dump debug information to a log file in your active_agenda/s2alog folder. You can pass strings, arrays, objects, and optionally a title as a second parameter.

 &lt;?php
  print trace($myObject, &quot;This is the content of the object&quot;);
 ?&gt;

There will be a new log file for each page request, named '''debug_'''[date/time]'''.txt'''.

Saving a debug file for each page request is of course not good for performance, which is why we recommend TRACE_RUNTIME to be set to ''false'' when you're not debugging... 

During generating, trace() simply prints the information to the screen directly, and no extra log file is saved.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Directions</title>
    <id>2286</id>
    <revision>
      <id>5630</id>
      <timestamp>2007-07-11T19:23:32Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>+cat</comment>
      <text xml:space="preserve">'''Directions''' is a feature that displays module-specific instructions and directives in View and Edit screens.

The data is located in the [[Module Direction Module]], and in order to appear in a screen, the following conditions must be met:

* Directions must match the [[moduleID]] of the record being viewed.
* The organization that owns the record must have an assigned Direction Organization.
* Directions must match the direction organization of the record's owner organization.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>DocumentationSection</title>
    <id>1020</id>
    <revision>
      <id>3248</id>
      <timestamp>2006-10-10T00:44:58Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">The '''&lt;code&gt;&lt;DocumentationSection&gt;&lt;/code&gt;''' element represents a documentation topic in a [[XML Module Definition]] file.  

Certain modules are simple sub-modules of a parent module. These sub-modules do not justify the development of a full documentation section and can inherit the documentation section of their parent modules. An example would be one of the many sub-modules of the [[Operating_Permits_Module|Operating Permits module]]. The operating permits sub-modules serve to track data related to an operating permit; such as, tracking numbers, applications, etc. Rather than generating a separate documentation secton, the operating permits sub-modules simply inherit the documentation section of the operating permits parent module. This is accomplished by adding the following syntax within the Documentation section tag:

 &lt;Documentation useSupportDoc=&quot;opp&quot;/&gt;



''Note: editing in progress! The below is just some scribbles that are looking for a home. Will fix it soon...'' --[[User:AADocAdmin|Aaadmin]] 17:36, 16 Aug 2005 (PDT)

We use the 

The support section is automatically populated by the [[parser]] when each module is parsed. Each section of the support documentation can also be protected from automatic &quot;overwrites&quot; by checking a box from within Active Agenda.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>DynamicForeignField</title>
    <id>1127</id>
    <revision>
      <id>6432</id>
      <timestamp>2009-03-07T23:24:39Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>removed joinType attribute</comment>
      <text xml:space="preserve">DynamicForeignFields (DFF's) are a data handling invention we created to display a certain information about records from any record in pretty much any module. What enables this is the [[Record Description Cache]].

The most frequent use of DFF's is within [[Central Sub Modules]] (CSM's). DFF's are used within CSM's to display the [[RecordDescription]] of records, from tables, contributing data to the CSM. For instance, the script below represents a DFF within the General Hazards CSM that is retrieving the related record descriptions of records that have general hazards associated with them.

'''''Using a DFF to display the record description of a contributing module''''': 
 &lt;ModuleFields&gt;
  &lt;'''DynamicForeignField''' name=&quot;RelatedRecordDescription&quot; 
  key=&quot;RelatedRecordID&quot; ModuleIDField=&quot;RelatedModuleID&quot;
  foreignField=&quot;RecordDescription&quot; phrase=&quot;Related Record Description|...&quot;
  sample=&quot;Sugar Coating Raisins&quot;/&gt;
 &lt;/ModuleFields&gt;

Another frequent use of DFF's occurs when we try to display the organization associated with a record that contributes to a CSM (see svcript below). For instance, one might want to know which organization the hazard abatement report came from which resulted in the assignment of a hazard. This is made possible by using a DFF in conjunction with a [[ForeignField]] (FF) to retrieve the OrganizationID (DFF) and display the organization name (FF). Utilizing a DFF and FF in this way allows users to search, report, and chart CSM records based on contributing organizations. 

'''''Using a DFF within a CSM, in conjunction with a FF, to display the organization associated with a contributing record''''':

 &lt;ModuleFields&gt;
   &lt;'''DynamicForeignField''' name=&quot;OwnerOrganizationID&quot; 
   key=&quot;RelatedRecordID&quot; moduleIDField=&quot;RelatedModuleID&quot; 
   foreignField=&quot;OwnerOrganizationID&quot; 
   phrase=&quot;Organization|The name of the organization where the hazard is located&quot; sample=&quot;1&quot;/&gt;
   &lt;'''ForeignField''' name=&quot;OwnerOrganization&quot; foreignTable=&quot;org&quot; 
   foreignKey=&quot;OrganizationID&quot; foreignField=&quot;Name&quot; key=&quot;OwnerOrganizationID&quot; 
   joinType=&quot;left&quot; phrase=&quot;Organization|The name of the organization...&quot; sample=&quot;Active Agenda, Inc.&quot;/&gt;
 &lt;/ModuleFields&gt;

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>EditField</title>
    <id>2596</id>
    <revision>
      <id>6085</id>
      <timestamp>2007-11-27T22:32:20Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Image:EditField.png|frame|right|&quot;Report Title&quot; EditField]]

The '''EditField''' element is used to establish the data entry field size and maximum character limits for varchar fields on the graphical user interface.



== XML syntax ==

'''''Text Edit''' for [[Data_type|varchar]] fields'':	
 &lt;EditField name=&quot;MSDSURL&quot; size=&quot;75&quot; maxLength=&quot;128&quot;/&gt;

== Attributes ==
;name:''Required.'' A [[ModuleField]] name that exists within the XML definition file's ModuleFields section and the field is a valid &quot;varchar&quot; [[Data_type|data type]].
;size:''Required.'' The size attribute is used to establish the data entry box size to be display on the graphical user interface.
;maxLength:''Required.'' The maxLength attribute is used to establish the maximum content size of the data entry box displayed on the graphical user interface. If the maxLength attribute is larger than the size attribute, data can be added up to the maxLangth but will only be visible up to the number of characters stipulated by the size attribute.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>EditGrid</title>
    <id>2580</id>
    <revision>
      <id>6067</id>
      <timestamp>2007-11-23T20:18:41Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Attributes */</comment>
      <text xml:space="preserve">[[Image:EditGridFeedbackResponses.png|thumb|100px|right|Edit Grid]]
Edit grids are used as the primary user interface for adding sub-module records. Edit grids use the same XML tags as the [[EditScreen|Edit Screen]] to dictate the behavior of data input fields. Edit grids must be inserted within the Exports section of an XML module definition file in order to be available within a parent module.

==Inserting Edit Grids Into &quot;Exports&quot; Section==

In order for an edit grid to be available for sub-module record associations, the edit grid XML tags must be inserted into the Exports section of the module where the edit grid data will reside.

The following syntax is used to insert an edit grid into the Exports section:

 &lt;Exports&gt;
   &lt;EditGrid moduleID=&quot;fbkr&quot; phrase=&quot;Responses&quot;&gt;
     &lt;GridForm&gt;
       &lt;InvisibleField name=&quot;primarykeyID&quot;/&gt;
       &lt;Local module fields based on the [[EditScreen|edit screens]] XML elements/&gt;
     &lt;/GridForm&gt;
     &lt;ViewField name=&quot;PersonResponding&quot; sample=&quot;Jane Doe&quot;/&gt;
          '''Note: The view fields are used to define the column headers of the edit grid.''' 
     &lt;ViewField name=&quot;ResponseDate&quot; sample=&quot;09-21-2003&quot;/&gt;
     &lt;ViewField name=&quot;Delay&quot; sample=&quot;30&quot;/&gt;
     &lt;ViewField name=&quot;Response&quot; sample=&quot;Thanks for the feedback...&quot;/&gt;
     &lt;ViewField name=&quot;Impact&quot; sample=&quot;Likely to Reinforce&quot;/&gt;
   &lt;/EditGrid&gt;
 &lt;/Exports&gt;

===Elements===
;EditGrid:''Required.'' The EditGrid element is required to define the edit grid fields contained wihtin the grid form.
;GridForm:''Required.'' The GridForm element is used to define the primary user interface for entering data into a sub-module.
;InvisibleField:''Required.'' The InvisibleField element is needed to establish the data relationships between the edit grid module and the module of the parent table where the edit grid will be displayed.
;[[ViewField|ViewField]]:''Required.'' The ViewField element is required to display the fields of the edit grid module in a columnar format. All view fields must exist within the ModuleFields section.

===Attributes===
;moduleID:''Required.'' The moduleID attribute is required to identify the edit grid for modules inheriting the functionality. The moduleID attribute value must be the same as the module exporting the edit grid.
;phrase:''Optional.'' A [[phrase]] that contains the label that should be displayed within the application. The phrase attribute is used to define the sub-module folder label. This label will be blank if the phrase attribute is omitted. The phrase attribute can be overridden by inserting the attribute on the EditGrid element within the module inheriting the functionality.

==Inserting Edit Grids Into Module Edit Screens==
To make an edit grid available within a module, the sub-module containing the exported edit grid must be declared within the SubModules section of the parent module's XML module definition file. The edit grid must also be added to an [[EditScreen|edit screen]] of the parent module.

=== Sub-Module Declarations  ===
Direct sub-module:

 &lt;SubModule moduleID=&quot;fbkr&quot; name=&quot;Feedback Responses&quot; parentKey=&quot;FeedbackID&quot; localKey=&quot;FeedbackID&quot;/&gt;

[[:Category:Central Sub-Modules|Central Sub-Modules]] or [[:Category:Association Modules|Association Sub-Modules]]:
 &lt;SubModule moduleID=&quot;prta&quot; name=&quot;Accountabilities&quot; parentKey=&quot;FeedbackID&quot; LocalKey=&quot;RelatedRecordID&quot;&gt;
   &lt;SubModuleCondition field=&quot;RelatedModuleID&quot; value=&quot;fbk&quot;/&gt;
 &lt;/SubModule&gt;

=== Adding An Edit Grid to An Edit Screen  ===
For an edit grid to appear within a module, the edit grid must be added as an [[EditScreen|edit screen]] of the module. The XML syntax for adding an edit grid to an edit screen is as follows:

 &lt;[[EditScreen|EditScreen]] name=&quot;Responses&quot; phrase=&quot;Responses|Associate feedback responses with feedback&quot;&gt;
   &lt;[[RecordSummaryFields|RecordSummaryFieldsRef]]/&gt;
   &lt;EditGrid moduleID=&quot;fbkr&quot; dataCollectionForm=&quot;no&quot;/&gt;
 &lt;/EditScreen&gt;

===Elements===
;RecordSummaryFieldRef: Optional. Adding the RecordSummaryFieldsRef element will display all view fields included within the [[RecordSummaryFields|RecordSummaryFields]] section, assuming the section has been added to the module definition file. Alternatively, view fields can be stipulated on a field-by-field basis.
;EditGrid:''Required.'' The EditGrid element is required to identify the edit grid's source module.

===Attributes===
;moduleID:''Required.'' The moduleID attribute is required to identify the view grid for modules inheriting the view grid functionality. The moduleID attribute value must be the same as the module exporting the view grid.
;dataCollectionForm: Optional. Whether a blank data collection form will be included for a sub-module during the generation of a parent module data collection form. This attribute is only required if you want to suppress a sub-module edit grid from being included within a module's blank data collection form. This attribute is applied to sub-module edit grids and NOT the export edit grid of a module. Setting this to &quot;no&quot; suppresses the functionality.
;phrase:''Required (EditScreen).'' A [[phrase]] containing a label that is displayed within the application. The phrase attribute within the EditScreen element is used to define the screen tab label. 
;phrase:''Optional (EditGrid).'' A [[phrase]] containing a label that is displayed within the application. The phrase attribute is used to define the sub-module folder label. This label is inherited from the view grid export but can be overridden by inserting the phrase attribute on the ViewGrid element within the ViewScreen section.

===Expanding Edit Fields Within An Edit Grid===

Edit grid fields can be limited or expanded (customized) by encapsulating field names within the EditGrid elements. However, any field included within the EditGrid tags must exist within the edit grid module's ModuleFields section. The syntax for stipulating different edit grid fields is the same syntax used for [[EditScreen|edit screens]] and edit grid exports - '''minus the GridForm element'''''Italic text''.

Example:
 &lt;EditGrid moduleID=&quot;fbkr&quot; phrase=&quot;Responses&quot;&gt;
   &lt;InvisibleField name=&quot;FeedbackResponseID&quot;/&gt;
   &lt;PersonComboField name=&quot;PersonRespondingID&quot; findMode=&quot;alpha&quot;/&gt;
   &lt;DateField name=&quot;ResponseDate&quot;/&gt;
   &lt;ViewField name=&quot;ResponseDelay&quot;/&gt;
   &lt;MemoField name=&quot;Response&quot; rows=&quot;5&quot; cols=&quot;75&quot;/&gt;
   &lt;CodeRadioField name=&quot;ImpactID&quot;/&gt;
 &lt;/EditGrid&gt;

===Edit Grid Folder Tab Labels===
[[Image:EditGridFolderTabLabel.png|frame|none|Edit Grid Folder Label = &quot;Responses&quot;]]
The edit grid folder label is stipulated within the Exports section of the module generating the edit grid. This label can be overridden by inserting the phrase attribute on the EditGrid element of the inheriting module as follows:

 &lt;EditScreen name=&quot;BestPractices&quot; phrase=&quot;'''Short Phrase'''|Long Phrase&quot;&gt;
     &lt;RecordSummaryFieldsRef/&gt;
     &lt;EditGrid moduleID=&quot;bpc&quot; '''phrase=&quot;Responses&quot;'''/&gt;
 &lt;/EditScreen&gt;

The folder tab labels are automatically generated as links to the edit grid's module.

==Generating Grids==
The Exports section of a module definition file is generated when a module that relies on a grid is  [[Generating a Module|generated]]. If you make modifications to an Exports section of a module definition file, you will need to generate the module, or modules, dependent upon the export grid to see your changes take affect.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>EditScreen</title>
    <id>1141</id>
    <revision>
      <id>6095</id>
      <timestamp>2007-11-27T23:10:28Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>/* Suppressing List Edit Functionality: */</comment>
      <text xml:space="preserve">'''Edit screens''' are used as the primary user interface for adding new records and modifying existing records within the database.  Edit screens use XML tags to dictate the behavior of edit screens and data input fields. Examples of XML tags and their respective purposes are as follows:

==Module Screen Tabs==

Active Agenda's edit screens are accessed using module screen tabs. Module screen tab labels are defined using the &quot;Short Phrase&quot; within the &quot;EditScreen&quot; tag as displayed below:
 
 &lt;EditScreen name=&quot;BestPractices&quot; phrase=&quot;'''Short Phrase'''|Long Phrase&quot;&gt;
     &lt;RecordSummaryFieldsRef/&gt;
     &lt;EditGrid moduleID=&quot;bpc&quot;/&gt;
 &lt;/EditScreen&gt;

===Removing a Screen Tab===

Screen tabs can be removed by adding the tabCondistionModuleID attribute to the EditScreen tag as displayed below:
 
 &lt;EditScreen name=&quot;BestPractices&quot; phrase=&quot;Short Phrase|Long Phrase&quot; '''tabConditionModuleID=&quot;bpc&quot;'''&gt;
     &lt;RecordSummaryFieldsRef/&gt;
     &lt;EditGrid moduleID=&quot;bpc&quot;/&gt;
 &lt;/EditScreen&gt;

==Combo Boxes==

'''''Organization Combo Box''' for selecting organizations entered into the Organizations module'':
 &lt;OrgComboField name=&quot;OrganizationID&quot; findMode=&quot;text&quot;&gt;
     &lt;SampleItem ID=&quot;1&quot; name=&quot;Active Agenda, HQ&quot;/&gt;
     &lt;SampleItem ID=&quot;2&quot; name=&quot;Active Agenda, Sweden&quot;/&gt;
 &lt;/OrgComboField&gt;

'''''Person Combo Box''' for selecting people entered into the People module'':
 &lt;PersonComboField name=&quot;PersonAccountableID&quot; findMode=&quot;alpha&quot;&gt;
     &lt;SampleItem ID=&quot;1&quot; name=&quot;Mattias Thorslund&quot; orgName=&quot;Active Agenda, HQ&quot;/&gt;
     &lt;SampleItem ID=&quot;2&quot; name=&quot;Larry Hansen&quot; orgName=&quot;Active Agenda, Norway&quot;/&gt;
     &lt;SampleItem ID=&quot;3&quot; name=&quot;Dan Zahlis'&quot; orgName=&quot;Active Agenda, Sweden&quot;/&gt;
     &lt;SampleItem ID=&quot;4&quot; name=&quot;Jane Doe&quot; orgName=&quot;Active Agenda, Latvia&quot;/&gt;
 &lt;/PersonComboField&gt;

'''''Code Combo Box''' which displays a list of code items entered into the code table'':
 &lt;CodeComboField name=&quot;TempUnitsID&quot;&gt;
     &lt;SampleItem ID=&quot;1&quot; name=&quot;Fahrenheit&quot;/&gt;
     &lt;SampleItem ID=&quot;3&quot; name=&quot;Celcius&quot;/&gt;
 &lt;/CodeComboField&gt;

'''''Combo Box''' used to display a list of records from another module'':
 &lt;ComboField name=&quot;WeightVolUnitCategoryID&quot;&gt;
     &lt;SampleItem ID=&quot;1&quot; name=&quot;Weight&quot;/&gt;
     &lt;SampleItem ID=&quot;2&quot; name=&quot;Area&quot;/&gt;
     &lt;SampleItem ID=&quot;6&quot; name=&quot;Distance&quot;/&gt;
     &lt;SampleItem ID=&quot;3&quot; name=&quot;Packaging&quot;/&gt;
     &lt;SampleItem ID=&quot;4&quot; name=&quot;Time&quot;/&gt;
     &lt;SampleItem ID=&quot;5&quot; name=&quot;Volume&quot;/&gt;
 &lt;/ComboField&gt;

=== Suppressing List Edit Functionality: ===

Adding the attribute '''suppressItemAdd=&quot;yes&quot;''' to any ComboField, CodeComboField, PersonComboField, or OrgComboField will suppress the functionality that allows users to edit these lists from an edit screen. This is particularly important for CodeComboFields being used to filter subsequent fields:

 &lt;CodeComboField name=&quot;TaskCategoryID&quot; findMode=&quot;text&quot; '''suppressItemAdd=&quot;yes&quot;'''&gt;
   &lt;SampleItem ID=&quot;1&quot; name=&quot;Operating Machinery&quot;/&gt;
   &lt;SampleItem ID=&quot;2&quot; name=&quot;Cleaning&quot;/&gt;
   &lt;SampleItem ID=&quot;3&quot; name=&quot;Repairing&quot;/&gt;
   &lt;SampleItem ID=&quot;4&quot; name=&quot;Administering&quot;/&gt;
 &lt;/CodeComboField&gt;

== Text Fields ==

'''''Text Edit''' for [[Data_type|varchar]] fields'':	
 &lt;EditField name=&quot;MSDSURL&quot; size=&quot;75&quot; maxLength=&quot;128&quot;/&gt;

'''''Memo Field''' for text fields'':	
 &lt;MemoField name=&quot;MSDSURL&quot; cols=&quot;75&quot; rows=&quot;10&quot;/&gt;

== Date Fields ==

'''''Date Field''' used to display the date control'':
 &lt;DateField name=&quot;GuarExpirDate&quot;/&gt;

== Check Box and Radio Fields ==

'''''Check Box field''' used to display a list of check boxes labeled with codes entered into the Codes module. Check boxes can be used to select one or more codes'':
 &lt;CheckBoxField name=&quot;MSDSAvailable&quot;/&gt;

'''''Code Radio field''' used to display a list of choices labeled with codes entered into the Codes module. Code Radio fields require a user to select one item from a list of choices'':
 &lt;CheckBoxField name=&quot;MSDSAvailable&quot;/&gt;


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>FieldRef</title>
    <id>2574</id>
    <revision>
      <id>5939</id>
      <timestamp>2007-11-20T19:07:30Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>new article</comment>
      <text xml:space="preserve">The '''FieldRef''' element provides a way to reference a TableField element within an XML Module Definition file. It is used within the [[PrimaryKey]] and [[Index]] elements.

== XML Syntax ==
 &lt;FieldRef name=&quot;FieldName&quot;/&gt;

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Folder structure</title>
    <id>1144</id>
    <revision>
      <id>8107</id>
      <timestamp>2010-05-16T00:10:39Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">We're in the process of revising the '''folder structure''' (or file structure) of Active Agenda, in order to separate the generic [[spec2app]] (parser) code from the Active Agenda-specific code.

== Objectives ==
The objectives of the reorganization are as follows:
* Separate Spec2App code from application-specific code.
* Minimize the amount of &quot;parse-time only&quot; code that is included at run-time.
* Clean up other inconsistencies.

== Current structure ==
The current structure was evolved during the development of the PHP/MySQL version of Active Agenda. One important thing to notice is that the bulk of the code is kept outside of direct web-access.

=== Legend ===
:P = Files executed or accessed by the &quot;parser&quot;, at [[parse-time]]
:R = Files executed or accessed by the Web server, at [[run-time]] 
:3 = Third-party code
:X = Executed from command-line

===  Base folder ===
 /var/projects/active_agenda/

=== Sub-folders of the above base folder ===
 app/
     cached/           (R)   files generated by the parser
     classes/          (P,R) class files
     html_templates/   (R)   HTML layout files
     includes/         (P,R) various utility functions
     lang/             (R)   resource files for Gettext
     parser_templates/ (P)   template files for making &quot;cached&quot; files
     uploads/          (R)   attachment files
     '''web/              (R)   web access here only (and sub-folders)'''
         img/          (R)   icons and other graphics
         lang/         (R)   language files for JavaScript calendar
         menuG5/       (R,3) files for navigation menu
         overlib/      (R,3) used by &quot;bubble over&quot; help
         rpc/          (R,3) files that support JSON (&quot;AJAX&quot;) functionality
 
 xml/                  (P*)  XML module definition files
                             * Navigation.xml is (R)

=== Important files ===

 app/
     general.config        (P,R) defines global constants, such as folder locations
     createModule.php      (P,X) the &quot;parser&quot; script: generates one module
     batch-parser.php      (X)   generates multiple modules by running createModule.php
     setUpRDCaches.php     (X)   re-populates the [[RecordDescription Cache]]
     uninstall-module.php  (X)   removes a module completely (database and files)
 app/classes/
     module.class.php      (P)   major &quot;parser&quot; functionality. Defines Module class and more.
     modulefields.php      (P,R) defines classes for [[ModuleFields]]. &quot;Database layer&quot;
     components.php        (P,R) defines classes for screen fields. &quot;Presentation layer&quot;
     search.class.php      (R)   defines Search class
     user.class.php        (R)   defines User class
 app/includes/
     general_include.php   (R)   general page-setup stuff: starts session, DB connection,
                                   etc. Redirects to login.php if needed
     util_include.php      (P,R) all kinds of utility functions
 app/html_templates/
     component_html.php    (R)   HTML snippets for screen fields and other components
     *.tmpl files          (R)   HTML layout files, with PHP placeholders
 app/web/
     login.php             (R)   Login page
     logout.php            (R)   Logout page - terminates session
     frames.php            (R)   Loads frames: Lower frame depends on parameter passed
     home.php              (R)   &quot;Dashboard&quot; page
     navigation.php        (R)   Upper frame, contains navigation menu.
     list.php              (R)   Displays multiple records of a module, based on search conditions
     view.php              (R)   Displays all the data of a record
     edit.php              (R)   Edit a record
     search.php            (R)   Search a module
     charts.php            (R)   Display charts based on search results

== New Structure ==
Note: this is still a &quot;work in progress&quot;! --[[User:MThorslund|MThorslund]] 18:45, 13 Feb 2006 (PST)

=== Suggested base folder: ===
 /var/www/s2a/

=== Sub-folders of the above base folder ===
 s2alib/              &lt;-- generic &quot;parser&quot; functionality
     classes/
     templates/    &lt;-- new name for &quot;parser_templates&quot;
     includes/     &lt;-- generic include files from &quot;includes&quot;
 
 dogfood/     &lt;-- same structure as active_agenda, below, but for a &quot;generic&quot; web app
 
 active_agenda/
     xml/          &lt;-- or &quot;specs&quot;: XML module definitions
     .generated/    &lt;-- new name for &quot;cached&quot; folder
     lang/         &lt;-- resource files for Gettext
     themes/       &lt;-- replaces &quot;html_templates&quot;; subfolders for each theme
         aa_theme/ &lt;-- default AA theme
     includes/     &lt;-- module-specific include files from &quot;includes&quot;
     uploads/      &lt;-- may choose a different location: this is data
     '''web/          &lt;-- web access here'''
         img/
         js/
         3rdparty/ &lt;-- all third-party utilities here

=== Files ===
Suggested reorganization of files, in order to make their purpose more obvious, or to separate run-time from parse-time code.

 s2a/
     s2a-generate-module.php   &lt;-- ex createModule.php
     s2a.php                   &lt;-- ex batch-parser.php
     s2a-rdc-refresh.php       &lt;-- ex SetUpRDCaches.php
     s2a-remove-module.php     &lt;-- ex uninstall-module.php
     s2alib/
         includes/
             parse_util.php    &lt;-- utility functions that are only needed at parse-time
             general_util.php  &lt;-- utility functions useful at both parse- and run-time
             web_util.php      &lt;-- utility functions only needed at run-time (from components.php)
             page_startup.php  &lt;-- ex general_include.php
 
     active_agenda/
         config.php            &lt;-- ex general.config
         themes/
             aa_theme/
                 *.template.php  &lt;-- renamed from *.tmpl


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ForeignField</title>
    <id>1023</id>
    <revision>
      <id>3251</id>
      <timestamp>2006-05-26T20:36:57Z</timestamp>
      <contributor>
        <username>MThorslund</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve">A '''ForeignField''' is a [[ModuleField]] that represents a field in a module other than the one where it is declared. It is read-only.

In the PHP code, the ForeignField class has methods to generate the necessary SQL snippets to be inserted in the SELECT and FROM clauses of a SQL SELECT query.

== XML syntax ==
''(Note: optional attributes omitted):''
 &lt;ForeignField 
  name=&quot;FieldName&quot; 
  key=&quot;LocalKeyField&quot; 
  foreignTable=&quot;xyz&quot;
  foreignKey=&quot;ForeignKeyField&quot;
  foreignField=&quot;ForeignFieldName&quot;
  phrase=&quot;[[Phrase|Short Phrase|Long phrase]]&quot;
 /&gt;

== Attributes ==
;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.
;key:''Required.'' The name of a local module field (not necessarily a [[TableField]]) to be matched against the ''foreignKey'' field.
;foreignTable:''Required.'' The [[moduleID]] of the module from which to extract data.
;foreignKey:''Required.'' The name of a TableField or RemoteField in the foreign module, to be matched against the ''key'' field.
;foreignField:''Required.'' The name of a TableField or RemoteField in the foreign module, whose matching value should be displayed in the local module.
;listCondition:''Optional.'' Any additional filtering condition, to be used when the ''foreignKey'' field is not unique in the foreign table.
;joinType:''Optional.'' The SQL join type. Either &quot;left&quot; (for LEFT OUTER JOIN), or &quot;inner&quot; (for INNER JOIN). Defaults to &quot;left&quot;.
;phrase:''Required.'' A [[phrase]] that contains the English label that the field should be displayed with in the application.
;sample:''Optional.'' A value that serves as sample data when viewing an XML module definition file with the [[XSL viewer]].

== Sub-elements ==
Optionally, one or more [[ListCondition]] elements can be included.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Generating a Module</title>
    <id>1215</id>
    <revision>
      <id>7422</id>
      <timestamp>2009-10-28T15:22:32Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>/* Running the command */</comment>
      <text xml:space="preserve">'''Generating a module''' requires running a [[wikipedia:Command_line|command-line utility]] called 's2a.php', located in the s2a folder. This utility generates all modules by default, but the list of modules can also be specified in a search expression.

== Prerequisites ==
The generator needs more memory than the 8 megabytes that is the default limit in the PHP settings. In order to increase this limit, edit the php.ini file, and change the memory_limit setting to something larger. We use 64 MB, which works fine. It might be possible to get away with a smaller limit but we haven't been experimenting with this setting lately.

The php.ini file is typically located in the /etc directory on Linux (under LAMPP, the default location is /opt/lampp/etc/php.ini).

Look for the ''memory_limit'' declaration, approximately 200 lines from the beginning of the file. Syntax:

 memory_limit = 64M

== Running the command ==

The script s2a.php has the following important options:

'''-t'''
Removes all triggers before starting the generating procedure.

'''-d value'''
When to generate separate debug logs for modules. Options: 'always', 'onfail',                                     'never' (onfail)

'''-h'''
Show the complete list of command options.

'''-m'''
A wildcard expression that matches the IDs of the modules to generate. Skipping this parameter will generate all available module definitions. Use &quot;%&quot; or &quot;_&quot; as wildcard characters (&quot;%&quot; for matching multiple characters, &quot;_&quot; for matching a single character) &quot;*&quot; or &quot;?&quot; may also be used but those may be trapped by the shell. Examples: %, ac%, act (%)

'''-s'''
Within the matched module IDs, this will skip all modules prior to the module ID specified here. This is useful if a previous full generation job was canceled in mid-process, to continue from where it left off.


=== On Linux and other Unix-ish systems===
To generate all modules:
 cd /var/www/s2a
 php s2a.php -t

=== On Windows ===
Because the PHP executable is not typically in the default execution path on Windows, you will need to supply the location of the PHP executable in your command:

 &gt; cd c:\s2a
 &gt; c:\php\php -t s2a.php

== Search Expressions ==
To generate just one or a few modules, you can specify the -m parameter:

 php s2a.php -m &lt;expression&gt;

&lt;expression&gt; is a wildcard expression, matching one or more [[module ID]]s. On Windows, you can use either % or * as the wildcard, while % is preferred on Linux/Unix (the * character has special meaning in [[wikipedia:bash|bash]]). Valid examples are:

 a%     (matches all modules with moduleIDs beginning with 'a')
 acc    (matches only the 'acc' module)

Additionally, multiple expressions can be combined with commas:
 acc,cos%,lbr%    (matches the 'acc' module, and all modules beginning with 'cos' or 'lbr')

Avoid spaces in the search expression (or wrap it in quotes), since the shell will not interpret the expression as a single parameter otherwise. Asterisk is allowed as a substitute, but since the shell will interpret the expression and try to match files/folders against the expression it should be wrapped in quotes.

== Generating a new module ==

'''In the latest code, new module definitions will be automatically detected, and you will be prompted to confirm whether you want to install them.'''

In the 0.8.2 release, if you want to generate a module which has not yet been installed on your system, you must add the &quot;-l&quot; switch (with the value &quot;files&quot;) to the command. The following command would install the new module &quot;ewkt&quot;:

 $ php s2a.php -m ewkt -l files

== Optional [[wikipedia:Batch_file|Batch Files]] for Windows ==

A simple way to execute the command line is to create a batch file and place it in the c:\Windows\system32 sub directory. More than one batch file can be used to execute different parameters. For instance:

'''A batch file to generate modifications to a single, existing, module''':  
 File Name: s2a.bat
 cd c:\s2a
 c:\php4\php s2a.php -p active_agenda -m %1

Executing the &quot;s2a&quot; batch file would require one to enter &quot;s2a  &lt;expression&gt;&quot; at the command prompt.

'''A batch file to generate a new, not previously existing, module''':
 File Name: s2anew.bat
 cd c:\s2a
 c:\php4\php s2a.php -p active_agenda -m %1 -l files

Executing the &quot;s2anew&quot; batch file would require one to enter &quot;s2anew  &lt;expression&gt;&quot; at the command prompt.

'''A batch file to remove a module''':
 File Name: s2aremove.bat
 cd c:\s2a
 c:\php4\php s2a-remove-module.php active_agenda %1

Executing the &quot;s2aremove&quot; batch file would require one to enter &quot;s2aremove &lt;expression&gt;&quot; at the command prompt.

'''A batch file to remove module triggers''':
 File Name: s2aremovetriggers.bat
 cd c:\s2a
 c:\php4\php.exe s2a-remove-module.php active_agenda %1 cachetriggers

Executing the &quot;s2aremovetriggers&quot; batch file would require one to enter &quot;s2aremovetriggers &lt;expression&gt;&quot; at the command prompt.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Generator</title>
    <id>1026</id>
    <revision>
      <id>8108</id>
      <timestamp>2010-05-16T00:10:56Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">The '''parser''' is a command-line utility that converts an [[XML Module Definition|XML module spec]] file into a running [[module]] of the Active Agenda application.

The PHP implementation of the generator consists mainly of the files &lt;code&gt;s2a-generate-module.php&lt;/code&gt; and &lt;code&gt;classes/module.class.php&lt;/code&gt;, though it does share some code with the web application, notably &lt;code&gt;classes/modulefields.php&lt;/code&gt; and &lt;code&gt;classes/components.php&lt;/code&gt;.

The '''s2a.php''' script provides the best user interface for generating modules, as it allows for easily generating multiple modules with a single command. It also provides some other maintenance features.

== What the generator does ==
* Creates database tables (main module table and [[log table]]).
* Updates table structure according to changes in the XML spec when re-generating an existing module.
* Generates a number of &quot;[[generated files]]&quot;, which contain the module-specific application logic for working with the module. These files contain SQL statements, and screen, grid and field definitions.

== Security philosophy ==
It could seem convenient to integrate the module generating into the web application so that modules could be added or updated from the application itself. 

However, we have chosen '''not''' to do this, and discourage this idea.

The reason we keep the generator separate from the web application is that installing or updating modules require generous server and database permissions, and keeping that functionality out of the web application will allow system administrators to &quot;button down&quot; the permissions granted to the web application better.

== How to use the generator ==
See [[Generating a Module]].

== Uninstalling a module ==
The &lt;code&gt;s2a-uninstall-module.php&lt;/code&gt; script provides the recommended way to uninstall a module completely from the system. Usage:

 $ php s2a-uninstall-module.php xyz

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Getting the latest code</title>
    <id>2347</id>
    <revision>
      <id>5723</id>
      <timestamp>2007-08-30T00:05:06Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <text xml:space="preserve">Our '''source code repository''' at SourceForge.net contains the &quot;latest greatest&quot; of the Active Agenda source code. This is a [[wikipedia:Subversion (software)|Subversion]] repository (you'll often see it abbreviated to &quot;SVN&quot; or &quot;svn&quot;). It can be accessed via your web browser, as well as specialized client software (more below).  

== Web Interface ==
With the [http://activeagenda.svn.sourceforge.net/viewvc/activeagenda/trunk/ web interface], you can look up and read any particular file that interests you, directly in your web browser. You can study the change logs and also compare different versions of the same file. It is also possible to download and save files directly to your system, but that only allows downloading the files one by one.  To get all the latest files in one go, you should use a Subversion client.

== Subversion Clients ==
A Subversion client makes it easy to download all the files in a single operation, and also lets you keep updating your system as we commit new changes to the repository. For an extensive list of available Subversion client applications, see this [[wikipedia:Subversion (software)#Related_software|Wikipedia]] article, or the &quot;Clients and plugins&quot; list at [http://subversion.tigris.org/links.html this page] on the Subversion site.

Below are recommended clients that we use ourselves.

=== Linux/Unix and similar ===
The standard &quot;svn&quot; command-line client is recommended for anyone who is comfortable with using the console. Graphical clients do exist (but we have only tried a few, like eSVN).

If you're running Linux, install the ''subversion'' package via your program installer (which is called something different depending on distribution). In [http://kubuntu.org Kubuntu] (my current favorite), the command is:

 sudo aptitude install subversion

The [http://svnbook.red-bean.com/ documentation] for Subversion does a great job of explaining how to use the program.

=== Windows ===
On the Windows platform, our experience with TortoiseSVN has been excellent. It integrates as a plugin into Windows Explorer and provides access to the Subversion commands via additional menu items on the right-click menu.

To install TortoiseSVN, download and run the installer from http://tortoisesvn.net/downloads. The [http://tortoisesvn.net/support documentation] for TortoiseSVN is also great.

== Running the latest Active Agenda on your computer ==
By using a subversion client, it is easy to follow the development of new features in Active Agenda. This should be done for testing/learning/evaluation purposes only, not &quot;production&quot;. 

The following &quot;recipe&quot; assumes that you have installed the SVN client of your choice, as well as the general [[Installation#Requirements|requirements]].

'''1.''' Download the latest release from http://www.sourceforge.net/projects/activeagenda

'''2.''' Follow the general [[Installation#Installation Procedure|general installation procedure]]: Edit the config.php and gen-config.php files. Install the database. Configure the web server and test that all is working.

'''3.''' Re-name the '''s2a''' folder to '''s2a_release'''.

'''4.''' Use your Subversion client to check out the latest source from https://activeagenda.svn.sourceforge.net/svnroot/activeagenda/trunk into a new '''s2a''' folder in the same parent folder as your '''s2a_release''' folder.

Using the svn client, it would be done like this:

 $ cd /path/to/s2a-parent
 $ svn checkout https://activeagenda.svn.sourceforge.net/svnroot/activeagenda/trunk s2a

In TortoiseSVN, you would right-click in the correct folder (parent of s2a_release) and find the TortoiseSVN-&gt;Checkout... menu item. In the [http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-checkout.html dialog box], enter the URL 
https://activeagenda.svn.sourceforge.net/svnroot/activeagenda/trunk and make sure it places the checked out contents in a new '''s2a''' folder: C:\path\to\s2a-parent\s2a.

'''5.''' Now we need to copy some files and folders from the '''s2a_release''' folder to the same location in the new '''s2a''' folder tree:

 active_agenda/config.php
 active_agenda/gen-config.php
 active_agenda/uploads

'''6.''' Generate all modules with the s2a.php script (see the [[Generating a Module]] article). 

 cd /path/to/s2a
 php s2a.php

Depending on the changes that have occurred since the latest release, you may be prompted to allow database table modifications. There is also a possibility that dependencies with not-yet-generated modules cause a module to fail with an error message: after the other module has been generated, you can simply re-try the failed module again (the script will prompt you once).

'''7.''' You should now have the latest code running on your server. 

Check that file permissions allow error messages to be saved in active_agenda/s2alog/errors.log (web server must have write permissions to this file), as well as active_agenda/uploads.


== Staying up-to-date ==
In order to know when new changes have been committed to the source code repository, you can [https://lists.sourceforge.net/lists/listinfo/activeagenda-svn sign up] to the '''activeagenda-svn''' mailing list, and you'll get notified of every commit (there's the choice of getting daily summaries instead).

Whenever you want to sync your server to the latest source code all you have to do is use the &quot;update&quot; command of your Subversion client. The SVN client is smart enough to preserve any modifications you have made. However, merging conflicts '''can''' occur (see the [http://svnbook.red-bean.com/nightly/en/svn.tour.cycle.html#svn.tour.cycle.resolve svn] or [http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-conflicts.html TortoiseSVN] documentations, respectively).

'''svn:'''
 $ cd /path/to/s2a
 $ svn update

'''TortoiseSVN:'''
Right-click on the s2a folder and choose [http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-update.html TortoiseSVN-&gt;Update].

=== Re-generating modules ===
Because of the nature of how the application is designed, many changes to the code will require that one or more modules are re-generated. The easiest policy regarding this is to simply always re-generate all modules after an SVN update.

If you would like to know some general rules of thumb, expect that files modified in the s2a/active_agenda/xml folder or s2a/lib/templates will '''always''' require re-generating. Similarly, changes inside the s2a/active_agenda/web folder will typically '''never''' trigger the need for re-generating.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Grids</title>
    <id>1296</id>
    <revision>
      <id>6726</id>
      <timestamp>2009-10-09T15:25:33Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Add On File Definitions */</comment>
      <text xml:space="preserve">== Edit Grids ==
[[Image:EditGridFeedbackResponses.png|thumb|right|Edit Grid]]
Edit grids are used as the primary user interface for adding sub-module records. Edit grids use the same XML tags as the [[EditScreen|Edit Screen]] to dictate the behavior of data input fields. Edit grids must be inserted within the Exports section of an XML module definition file in order to be available within a parent module.

Review the [[EditGrid | XML]].

== View Grids ==
[[Image:ViewGrid.png|thumb|right|View Grid]]
View grids are used to display sub-module records in a columnar format. View grids must be inserted within the Exports section of an XML module definition file in order to be available within a parent module.

Review the [[ViewGrid | XML]]

== Select Grids ==
[[Image:SelectGrid.png|thumb|right|Select Grid]]
Select grids are used for adding multiple sub-module records simultaneously. Select grids must be inserted within the [[Exports|Exports]] section of an XML module definition file in order to be available within a parent module. Select grids must also be declared within a parent file's SubModules section and added as an edit screen.

Review the [[SelectGrid | XML]]

== Search Select Grids ==
[[Image:SearchSelect.png|thumb|right|Search Select Grid]]
Search select grids are used for adding multiple sub-module records simultaneously. Search select grids must be inserted within the Exports section of an XML module definition file in order to be available within a parent module. Search select grids must also be declared within a parent file's SubModules section and added as an edit screen.

Review the [[SearchSelectGrid | XML]]

== Add-On File Definitions ==

Review the [[Add-On Files| XML]]

==Generating Grids==
The Exports section of a module definition file is generated when a module that relies on a grid is  [[Generating a Module|generated]]. If you make modifications to an Exports section of a module definition file, you will need to generate the module, or modules, dependent upon the export grid to see your changes take affect.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Guidance Modules Design</title>
    <id>2657</id>
    <revision>
      <id>7924</id>
      <timestamp>2010-03-18T00:43:44Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">The Guidance Modules allow [http://en.wikipedia.org/wiki/Subject_matter_expert: subject matter experts] to make recommendations regarding the [[:Category:Guidance_Module|types]] of risks encountered by an organization. This is achieved using several closely related modules and transfer grid functionality.

*'''[[:Category:Guidance_Module|Types modules]]''': Types modules are used to create and associate categories and types with a variety of modules throughout the application. The &quot;types&quot; lists utilize a combination of [[Code_Type|codes]] and [[Module_Type|modules]].
[[Image:Guidance.png|thumb|right|Figure 1]]
:'''''Example''''': Buildings consist of many types. Organizations typically want to categorize their buildings by type. Within Active Agenda, an organization would use [[Code_Type|codes]] to create building categories (e.g. Warehouse) and [[Module_Type|modules]] to create more specific subcategories or types (Ingredients Warehouse). Once the types are established, subject matter experts can associate considerations with these &quot;types&quot; of risks using the Considerations modules.

::'''''Technical Note''''': All Types modules that are capable of receiving guidance are automatically identified during module generation. The Types modules save two [[RemoteField|remote fields]] to the Guidance Types module &lt;guit&gt;, thereby automatically saving a Guidance Types record when a new type is added to a respective Types module (e.g. Adding a record to the Building Types module &lt;buit&gt; will save two remote fields to a new, and parallel, Guidance Types module record).

*'''Guidance Types Module &lt;guit&gt;''': The Guidance Types module is a [[Central_Sub_Modules|central submodule]]. The two remote fields (Title and Description) located in the Types modules are used by the [[Generator|generator]] to identify a Types module as a guidance type module. This means that a Type module is capable of having subject matter expert guidance applied. Guidance type modules can be filtered by selecting &quot;Guidance Type&quot; = Yes from the Module module, [[SearchScreen|Search screen]] user interface. The Guidance Types central submodule provides a central view of all &quot;types&quot; entered into the system and can be viewed by navigating to:

 MainMenu|Global|Views|Guidance|Types

*'''[[:Category:Considerations Module|Considerations modules]]''': Considerations modules are used to capture guidance provided by a subject matter expert. The considerations modules are accessed by navigating to the Guidance branch of the Navigation menu (Figure 1).
[[Image:AuditGuidanceType.png|thumb|right|Figure 2]]
:'''''Example''''': A Quality Assurance (QA) professional may want to suggest that rodent traps be inspected on a daily basis. The QA subject matter expert would use the [[Asset_Protection_Considerations_Module|Audit Considerations]] module to achieve this. Once the audit consideration is entered into the system, the consideration can be assigned to a variety of types; such as an Ingredient Warehouse by navigating to the &quot;Guidance Types&quot; screen of the Audit Considerations module (Figure 2). The [[SearchSelectGrid|search select grid]] allows the subject matter expert to save the audit consideration to multiple types simultaneously. This is particularly helpful when the same recommendation applies to risks of many different types (i.e. Building: Ingredient Warehouse, Dry Warehouse, Cold Storage, Production Facility; Locations: Boneyard, Shipping Dock, etc.).

::'''''Technical Note''''': All considerations module names end with a &quot;c&quot; (i.e. agrc, aprd, rtcc, bcqc, busc, cntc, orgtc, regc, stdc, etc.).
 

*'''Specified Guidance Type Modules''': Each Types module possessing the two remote fields to the Guidance Types module has a parallel table for associating a &quot;Type&quot; with a specific instance of guidance provided in a Considerations module. For instance, if a QA subject matter expert enters an audit consideration, the consideration will be saved to the Audit Considerations module &lt;aprd&gt;. If the subject matter expert associates the audit consideration (e.g. Inspect rodent traps) with multiple &quot;Types&quot; (i.e. Ingredient Warehouse, Dry Warehouse, and Cold Storage), the consideration will be saved as a separate record for each &quot;Type&quot; within the specific guidance type module. In this example, the specific guidance type module would be the Audit Guidance Types module &lt;aprg&gt;. 
::'''''Technical Note''''': All specified guidance types module names end with a &quot;g&quot; (i.e. aprg, agrg, bcqg, busg, cntg, orgg, orgjg, regg, stdg, etc.).

*'''[[Central_Sub_Modules|Central Sub Modules]]''': Active Agenda allows an organization to capture risk control data in central tables for easier analysis. Most of these central submodules parallel the Considerations modules. For example, the Audit Considerations module &lt;aprd&gt; has a companion central submodule to capture actual Audit items in a central table &lt;apr&gt;. The guidance functionality allows a user to view audit guidance in a [[Transfer Grid]] above the Audit edit grid on respective screens. The transfer grid allows a user to select audit guidance and save it to a local edit grid, thereby inheriting the guidance of the guidance provider. If a QA subject matter expert adds audit guidance associated with a Building - Ingredient Warehouse, a user will see the guidance displayed on the Audit screen of the Building module when the building type = Ingredient Warehouse. If the user chooses, s/he may transfer the audit items to the current Ingredient Warehouse record and stipulate more specific requirements if necessary.

*'''[[Transfer_Grid|Transfer Grid]]''': A transfer grid allows users to transfer guidance from a specified guidance types module to a central submodule, where the guidance can be adopted and customized to reflect local operating differences.

 Note: The transfer grid functionality is currently under development. 


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Importing data</title>
    <id>2633</id>
    <revision>
      <id>8109</id>
      <timestamp>2010-05-16T00:11:15Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">'''Data import''' is currently possible via the s2a-import-data.php command-line script. This supported file format is comma-separated values (CSV), although XML data imports are in the works as well.

The s2a-import-data.php import script allows you to import records into the database one module at the time. It will save data not only to the module's own database tables, but also supports [[RemoteField]]s which save data into &quot;remote&quot; tables.

The CSV data file is expected to contain field names in the first row, that is, any [[TableField]] or [[RemoteField]] that is defined in the module's [[XML Module Definition|XML Definition]]. Here's an example from the States module:

 StateID, StateName, StateAbbreviation, CountryID
 &quot;1&quot;,&quot;None&quot;,&quot;_&quot;,3
 &quot;2&quot;,&quot;California&quot;,&quot;CA&quot;,1
 &quot;3&quot;,&quot;Oregon&quot;,&quot;OR&quot;,1
 &quot;4&quot;,&quot;Jalisco&quot;,&quot;JA&quot;,2
 &quot;5&quot;,&quot;Nevada&quot;,&quot;NV&quot;,1
 &quot;6&quot;,&quot;Arizona&quot;,&quot;AZ&quot;,1
 &quot;7&quot;,&quot;Washington&quot;,&quot;WA&quot;,1
 
 ...(etc)

Numbers do not need to be enclosed within quotes, but quotes won't hurt if your file has them. Text values '''should''' be quoted as a rule, because commas within a value would cause a problem otherwise. If there are any quotes, they should be escaped, i.e. &quot; becomes \&quot; within a text value. We generally create our CSV files with OpenOffice's Spreadsheet program. It will correctly quote and escape the data.

== Primary Keys and Imports ==
A very important thing to look out for in import files is whether the primary key field is included or not. In the States example above, StateID is the primary key field of the &quot;sta&quot; module. Importing a CSV file where the primary key is included will ''update'' any matching existing records with the data from the file. Rows where the supplied primary key value does not match an existing record will be inserted. 

If, on the other hand the primary key column is not included in the CSV file, there will not be any matching against existing data, so all the rows will be inserted.  That has a serious implication in that if you run the import a second time, the records will be inserted again, which will probably create a lot of duplicates.

== Running the import ==
The s2a-import-data.php script takes two parameters. The first parameter is the path to the CSV file you want to import. The second parameter is the [[moduleID]] of the module where you want to import the data.

 [your-php-command] s2a-import-data.php [path-to-data-file.csv] [moduleID]

=== Example: ===
The s2a/util folder contains some master data CSV files for countries and states. You can experiment with importing them into your database (providing that you haven't already entered states or countries).

 mattias@mumin:~/s2a$ php s2a-import-data.php util/sta_master_data.csv sta

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Index</title>
    <id>2571</id>
    <revision>
      <id>5943</id>
      <timestamp>2007-11-20T19:26:02Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <text xml:space="preserve">The '''Index''' element in the [[XML Module Definition]] defines a table index in the database. Indexes aren't required, but may help improve database performance (sometimes dramatically so) in certain situations. They do impose some overhead when data is being saved, and also use some disk space

Because the performance gains of a specific index may vary between database platforms, it may make sense to eventually support separate XML index definition files, outside of the Module Definition XML files.

== XML Syntax ==
''(Note: optional attributes omitted):''

If specified, the Index element should be defined in the ModuleFields element (see [[XML Module Definition]]).

At least one [[FieldRef]] to a TableField in the same module is required. The order in which they are specified will determine the order of the fields in the table index in the database.

 &lt;Index&gt;
     &lt;FieldRef name=&quot;Field1&quot;/&gt;
     (more than one FieldRef may be specified)
 &lt;/Index&gt;

== Attributes ==
The Index element takes two optional attributes.

;name: ''(Optional)'' A name for the index. If no name is specified, the generator will create a name based on the fields included in the index.
;unique: ''(Optional)'' When given the value &quot;yes&quot;, the index will be created as a UNIQUE constraint. That is, the database system (where supported) will enforce that no two rows in the table contain the same combination of values in the fields of the index. ''(Note: this was recently implemented and is not supported in version 0.8.2.)''

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Installation</title>
    <id>1326</id>
    <revision>
      <id>8110</id>
      <timestamp>2010-05-16T00:11:33Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">The Active Agenda '''installation instructions''' are also included in the distributed installation packages, in the &quot;installation.txt&quot; file:

 activeagenda-[version number]/s2a/installation/install.txt 

These instructions apply to installing the 0.8.2 release of February 28th, 2007. If you already are running 0.8.1, please look at the [[upgrade|upgrading]] instructions instead.

For installing 0.8.3 snapshots, see [[Installing 0.8.3]].

== Requirements ==

If your server isn't already running some of the required MySQL-Apache-PHP software, you might wish to look into XAMPP, an integrated installer that covers all the required software. This is especially helpful for the Windows platform, which doesn't have easy package managers like most Linux distributions.

See:
* [[Windows Install with xampp|Active Agenda Windows Install with XAMPP Guide]]
* [http://www.apachefriends.org/en/xampp-windows.html XAMPP web site]

=== 1. MySQL Database Server ===

Active Agenda was developed against MySQL 4.1, and additionally tested against MySQL 5.0. MySQL versions prior to 4.1 are not supported, since Active Agenda makes use of 4.1 features like subqueries.

Download and install the latest &quot;Generally Available&quot; version from http://dev.mysql.com/downloads/, making sure to also verify the integrity of the file.

As part of the MySQL installation, you should set up a &quot;root&quot; password (master user password). You will need the MySQL root password when installing the Active Agenda database. (This is not the same password as the system &quot;root&quot; password on Linux/Unix systems).  See the MySQL documentation here:

http://dev.mysql.com/doc/refman/4.1/en/default-privileges.html

In brief, you can set the root password with the following statements (but do this only if there isn't already a MySQL root password assigned):

 UPDATE mysql.user SET Password = PASSWORD('newpwd') WHERE User = 'root';
 FLUSH PRIVILEGES;

=== 2. Web Server, such as Apache HTTP Server 2.0 ===

Any web server that works with PHP should be possible here. We've been mostly running Active Agenda on Apache 2.0, and haven't tested Apache 2.2 yet.  You can download Apache from http://httpd.apache.org/download.cgi.  Again verify the file.

=== 3. PHP 4 or 5? ===

The 0.8.2 release of Active Agenda was written for PHP 4. The difference between PHP 4 and 5 is large enough that the code will not work under PHP 5.  You can download the latest version of PHP 4 (currently 4.4.4) from http://www.php.net/downloads.php.

Your PHP 4 version must be at least '''4.3.10''' (released December 2004) or later.

'''Note: The latest source of Active Agenda ''DOES'' support PHP 5. See [[Getting the latest code|this article]] how to use it.'''

Make sure that the following required PHP extensions are available, and enabled in the php.ini file:

* gd2
* gettext
* mbstring
* mime_magic
* mysql      (often included by default)

'''Command-line executable'''

The Active Agenda database installation scripts, as well as the other command-line scripts, were written for the PHP-CLI executable. The Windows binary distributions include this, and most Linux packaged distributions also include this executable as the default for command-line PHP scripts. 

On Windows, the PHP-CLI executable is located in the &quot;cli&quot; sub-folder inside the PHP folder location. Something like this:

 C:\php\cli\php.exe

To verify (on Linux or other Unix-like system) that you are using PHP-CLI, type ''php -v'' at the command prompt. You should see something like this (note &quot;(cli)&quot;): 

 $ php -v
 PHP 4.4.4 (cli) (built: Dec  2 2006 04:17:20)
 Copyright (c) 1997-2006 The PHP Group
 Zend Engine v1.3.0, Copyright (c) 1998-2004 Zend Technologies

More information here:
[http://us3.php.net/manual/en/features.commandline.php PHP manual on Command-line features]

=== 4. pdftk (optional, used for some PDF reports) ===

pdftk is a command-line utility that is used by Active Agenda to fill in PDF documents that have &quot;fillable&quot; forms (fdf) with data.  This is how our OSHA 300 log is filled in.

[http://www.accesspdf.com/pdftk/ AccesPDF web site]

== Installation Procedure ==

=== 1. Extract contents to the file system. ===

Decide first where to put the files:  '''Do not choose a location that is automatically published to the web by your web server''', such as (on Unix-like systems) /var/www/html, or public_html.

Extract the contents of the active_agenda-X.X.X.zip or .tar.gz archive file to a temporary location.  This will take a little while, perhaps a couple minutes, because there are MANY files in the archive.  Navigate into the resulting new folder, and copy the &quot;s2a&quot; subfolder to the location you have chosen.

'''Additional folders:''' The 0.8.2 .zip file for some reason did not include the following two empty, but necessary folders. This will be fixed in the upcoming release, but with 0.8.2, just add them manually:

 s2a/active_agenda/s2alog
 s2a/active_agenda/uploads

=== 2. Configuration files. ===

The next step is to make some settings in the configuration files.  Navigate from the s2a folder into the active_agenda folder. There are two sample configuration files, config-dist.php and gen-config-dist.php.  Open these with a plain-text editor (such as Notepad on Windows), modify them, and save as config.php and gen-config.php.

The default values are fine in many cases, as long as the names and relative locations of the sub-folders of the s2a folder were not changed.

The important settings in '''gen-config.php''' are:

'''GEN_DB_USER'''&lt;br /&gt;
'''GEN_DB_PASS'''&lt;br /&gt;
These are the MySQL credentials to be used when installing the database, and also when generating or re-generating modules in the application.  This user requires more MySQL privileges than the regular MySQL user that is used when the application is used in normal operation.

The important settings in '''config.php''' are:

'''SITE_NAME'''&lt;br /&gt;
Enter a name of the Active Agenda instance. This will be displayed in the application.

'''S2A_FOLDER'''&lt;br /&gt;
The full file path to the s2a folder.

'''CRYPT_SEED'''&lt;br /&gt;
A unique, random character sequence to be used as the encryption seed for passwords in Active Agenda.  This should be set before you proceed with the next step.  If you change this when there are already some users, then their passwords will no longer work and would need to be re-set.

'''DB_NAME'''&lt;br /&gt;
The name of the database for the installation.  If there are several Active Agenda sites on the same server, they will each need unique names.  If you only run one instance of Active Agenda on your MySQL server, the default will be fine.

'''DB_USER'''&lt;br /&gt;
'''DB_PASS'''&lt;br /&gt;
These are the MySQL credentials to be used in production.  This user will have limited privileges in the database, and will not be able to delete data, or drop or modify tables.

'''DB_HOST'''&lt;br /&gt;
This should probably be 'localhost' unless you're using a dedicated MySQL server.

'''PATH_SEPARATOR'''&lt;br /&gt;
This can be kept as-is, but since it determines the correct value based on the operating system, it can be simplified as follows:

If your OS is Windows, use:
 if(!defined('PATH_SEPARATOR')){
     define('PATH_SEPARATOR', ';');  //Windows
 }

If your OS is Linux or another Unix-like system:
 if(!defined('PATH_SEPARATOR')){
     define('PATH_SEPARATOR', ':');  //non-Windows
 }

=== 3. Install the Active Agenda database ===

To install the supplied database, we recommend that you use the supplied database installation wizard, named s2a-install-db.php, located in the s2a folder.  You will need the MySQL root password.

:'''''Note:''' If you don't have the MySQL root password, or are otherwise unable to use this script, look into the [[alternative database installation]] procedure instead. This still assumes you are able to create a separate MySQL database for the Active Agenda installation.''

This is a command-line utility, so you will need to start your command-line program, navigate to the &quot;install&quot; folder, and run the wizard with a command like:

 php s2a-install-db.php

If your PHP executable is not in the default execution path, you will need to supply the actual location of the PHP executable, for instance:

 c:\php4\php.exe s2a-install-db.php

If your MySQL client executable is not in the default execution path, the script will prompt you for the location. If you used LAMPP (on Linux) and installed it to the default location, that location would be /opt/lampp/bin/mysql.

'''The installation utility will do the following:'''

* Install the Active Agenda database with the name supplied in config.php (DB_NAME).
* Add a Generating User, using the name (GEN_DB_USER) and password (GEN_DB_PASS) specified in gen-config.php, and assingn &quot;ALL&quot; privileges to this MySQL user for the new database (and no others that may be on the server).
* Add a Web User, using the name (DB_USER) and password (DB_PASS) specified in config.php, and assingn &quot;INSERT, UPDATE, SELECT&quot; privileges to this MySQL user for the Active Agenda database.
* Install empty database tables.
* Install master data.
* Optionally install sample data. This is recommended if you are installing Active Agenda for training purposes.
* Install a default &quot;admin&quot; user so that there is a way to log in to the site.

=== 4. Configure your web server ===

It is very important that only the files in the folder s2a/active_agenda/web are served by the web server.  There are many ways to accomplish this in your Apache configurations.  Here are some:

a) In the web root folder of your server (/var/www/html on Linux/Unix/etc.), create a soft link to the s2a/active_agenda/web folder.  (Requires that the FollowSymLinks option is enabled for the location)

Or, b) Accomplish the same thing with a few lines in the httpd.conf configuration file:

 Alias /active_agenda &quot;C:/s2a/active_agenda/web&quot;
 &lt;Directory &quot;C:/s2a/active_agenda/web&quot;&gt;
    Order allow,deny
    Allow from all
 &lt;/Directory&gt;

Or, c) If your machine is dedicated to hosting Active Agenda (just one site), you could point your DocumentRoot setting in httpd.conf to the s2a/active_agenda/web folder.

Or, d) You could set up a virtual host (VHost) for the Active Agenda site.

=== 5. Log in to Active Agenda from your browser ===

Start up your browser, and enter the correct address (depending on how you chose to configure the web server) for the new Active Agenda site.  Log in with the Admin user name and password that you set in step 3 above.

=== 6. Fine-tune file permissions ===

The 0.8.2 release comes with a rudimentary utility to check folder/file permissions to ensure functionality: After logging in to the application as an administrator, you will see a link at the bottom of the Dashboard screen, titled &quot;Check server configuration&quot;. This is a simple script that checks the folders and files that need to be writeable by the web server (i.e. Apache). It does not check for &quot;overly permissive&quot; permissions or other security risks.

This is NOT a security check, so if you are using Active Agenda in a production environment, or in any way exposed to the Wild Wild Web, you should read on:

Button down the file permissions so that other users or programs on your server can't tamper with them.

Active Agenda was designed with the philosophy of 'least required privileges'.  This means that the one goal in the design of the application is to not impose arbitrary requirements that would necessitate less restrictive permissions.

The running web server should run under a separate user account, not shared with any other programs or human users.

The web server account needs writing access to only two locations in the s2a folder tree:

* s2a/active_agenda/uploads (destination for file uploads from the Attachments module)
* s2a/active_agenda/s2alog  (error log messages are saved here)

It needs reading access to most folders and files in the s2a folder tree, but not:
* s2a/active_agenda/gen-config.php (configuration settings used when generating modules)
* s2a/active_agenda/xml            (XML module definitions used when generating modules)

It is prudent to limit the access permissions to the s2a files to a small number of human users.  When generating modules with the s2a.php command-line utility, writing permission is required in s2a/active_agenda/s2alog and s2a/active_agenda/.generated.

=== 7. Set up a scheduled job for Notifications ===
To make sure [[Notifications]] get delivered, follow the [[ Notification Setup]] instructions.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>LinkField</title>
    <id>1292</id>
    <revision>
      <id>6445</id>
      <timestamp>2009-04-16T17:26:48Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* XML syntax */</comment>
      <text xml:space="preserve">The '''LinkField''' is a [[ModuleField]] that represents a link to any module or record in the Active Agenda database.  This simplifies the creation of viewable fields that display links to places in the application.


== XML syntax ==
''(Note: optional attributes omitted):''
 &lt;LinkField name=&quot;FieldName&quot; moduleIDField=&quot;RelatedModuleID&quot; recordIDField=&quot;RelatedRecordID&quot; phrase=&quot;[[Phrase|Short Phrase|Long phrase]]&quot;/&gt;

-- or --

 &lt;LinkField name=&quot;FieldName&quot; foreignModuleID=&quot;abc&quot; recordIDField=&quot;RelatedRecordID&quot; phrase=&quot;[[Phrase|Short Phrase|Long phrase]]&quot;/&gt;

''Adding a LinkField as a ListFeld:''

 &lt;ListField name=&quot;FieldName&quot; link=&quot;LinkFieldName&quot;/&gt;
 &lt;InvisibleField name=&quot;LinkFieldName&quot;/&gt;

''Adding a LinkField as a ViewField:''

 &lt;ViewField name=&quot;FieldName&quot; link=&quot;LinkFieldName&quot;/&gt;

== Attributes ==
;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.
;moduleIDField:''Required unless foreignModuleID is specified.'' The name of a modulefield that represents the moduleIDs of the modeules that the link should point to.
;recordIDField:''Optional.'' If present, the link will point to the View screen of the related record. Otherwise, the link will point to the List screen of the related module.
;foreignModuleID:''Required unless moduleIDField is specified.'' If the module pointed to is static, specify the moduleID here. Specifying a moduleIDField causes this attribute to be ignored.
;phrase:''Required.'' A [[phrase]] that contains the English label that the field should be displayed with in the application.
;sample:''Optional.'' A value that serves as sample data when viewing an XML module definition file with the [[XSL viewer]].

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ListCondition</title>
    <id>1298</id>
    <revision>
      <id>3235</id>
      <timestamp>2006-05-31T21:27:04Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">'''ListCondition''' elements are used for describing conditions to be applied to drop-down lists (i.e. [[ComboField]], [[CodeComboField]], [[OrgComboField]]).  The list condition is ''defined'' on the corresponding &quot;list&quot; module field, however. This ensures that all the drop-down lists by the same name in a module are affected by the list condition in the same way, and avoids code duplication.

The ListCondition element is only valid within a [[ForeignField]] or a [[CodeField]].

== Sample Syntax ==
 &lt;ForeignField name=&quot;Organization&quot; (other attributes omitted)&gt;
      &lt;ListCondition fieldName=&quot;Participant&quot; mode=&quot;equals&quot;&gt;
           &lt;StaticValue value=&quot;true&quot;/&gt;
       &lt;/ListCondition&gt;
 &lt;/ForeignField&gt;

 &lt;CodeField name=&quot;WeightVolUnitCategory&quot; (other attributes omitted)&gt;
      &lt;ListCondition fieldName=&quot;CodeID&quot; mode=&quot;in&quot;&gt;
           &lt;StaticValue value=&quot;5&quot;/&gt;&lt;!-- Volume --&gt;
           &lt;StaticValue value=&quot;6&quot;/&gt;&lt;!-- Weight --&gt;
      &lt;/ListCondition&gt;
 &lt;/CodeField&gt;

 &lt;ForeignField name=&quot;Department&quot; (other attributes omitted)&gt;
      &lt;ListCondition fieldName=&quot;OrganizationID&quot; mode=&quot;equals&quot;&gt;
           &lt;FieldValue value=&quot;OrganizationID&quot;/&gt;&lt;!-- filed in current Module --&gt;
      &lt;/ListCondition&gt;
 &lt;/ForeignField&gt;

== Attributes ==
;name:''Required.'' The name of the module field ''in the list source module'' to which the condition is applied.  The list source module is always the Codes module in the case of a CodeField, while it is the module specified in the foreignTable attribute in the case of a ForeignField.
;mode:''Required.'' This attribute governs the type of condition to be made. Currently, the valid values are &quot;in&quot;  and &quot;equals&quot;. &quot;equals&quot; will expect a single sub-element, while &quot;in&quot; is a way of specifying a number of valid values.

== Sub-elements ==
One or more &quot;value&quot; sub-elements are required. The choices are StaticValue (expects a non-changing value such as a number, or &quot;true&quot; or &quot;false&quot;) and FieldValue (expects the name of a module field in the current module, from which matching vaules are used).

== Troubleshooting tip ==
When using a FieldValue sub-element, the field referenced by the FieldValue must be present on every page or form where any drop-down list affected by the ListCondition is present. This could mean adding an [[InvisibleField]] to the screen or grid form if a visible field is not already present.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ListReportScreen</title>
    <id>2624</id>
    <revision>
      <id>6402</id>
      <timestamp>2009-02-07T18:39:21Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Image:ListReportScreen.png|frame|right|&quot;Reports&quot; screen inserted within List Screen tabs]]

:'''REVISION 1500 NOTE : List and record report screens (i.e. tabs) are now inserted automatically when a module has a ReportDef matching list or report level. There is no longer a need to insert RecordReportScreen and ListReportScreen elements in a ModuleDef.'''

The &quot;Reports&quot; screen tab is inserted into the screen tab hierarchy by adding the ListReportScreen element to the module definition file immediately above the closing &lt;Screens&gt; tag. This element inserts the &quot;Reports&quot; screen tab immediately above the [[Global Modules|Global Module]] screen tabs. On the [[List Screen]], this places the &quot;Reports&quot; tab immediately above the &quot;Notification List&quot; screen tab.

The Reports screen lists all [[Report Definition File|report definitions]] that correspond with the respective module ID prefix (e.g. acc) AND include the ReportLocation element with the level=&quot;List&quot; attribute. Reports listed on the Reports screen are grouped by adding the group=&quot;xxxxx&quot; attribute within the report definition file. 



 

== XML syntax ==

'''''Adding Reports Screen''':

 &lt;ListReportScreen name=&quot;ListReports&quot; phrase=&quot;Reports|View reports based on current search criteria&quot;/&gt;

== Elements ==
;ListReportScreen:''Required.'' The ListReportScreen element is required to insert the Reports tab on the List screen. The element MUST be placed after the last [[EditScreen]] within the Screens section. The element automatically inserts the tab immediately above the Global Module tabs (e.g. Notification List).

== Attributes ==
;name:''Required.'' A name attribute is required but can be any name consisting of alpha characters and no spaces.
;phrase:''Required.'' The phrase attribute is required but can be any name consisting of alpha characters and no spaces. The short [[Phrase|phrase]] defines the tab name but should be brief to avoid text wrapping on the tab. It is recommended that this tab always be named &quot;Reports&quot; to maintain consistency from an application usability perspective.



[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ListScreen</title>
    <id>1295</id>
    <revision>
      <id>6372</id>
      <timestamp>2008-12-11T19:25:43Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Default Ordering of List Screens */</comment>
      <text xml:space="preserve">The List Screen displays record fields of the table in a columnar format. List Screens can be filtered using the [[SearchScreen|Search Screen]] and search results may be saved as the default list on a user-by-user basis. 

=List Screen Syntax=
Lists screens are constructed within a module's XML file within the &quot;Screens&quot; section. List screens are comprised of one or more module fields from the module fields section of the XML file. List screens are defined using the following syntax:

 &lt;ListScreen name=&quot;List&quot; phrase=&quot;List|List situation contacts&quot;&gt;
   &lt;ListField name=&quot;SituationContactID&quot; phrase=&quot;Record ID&quot;/&gt;
   &lt;ListField name=&quot;Situation&quot; phrase=&quot;Situation&quot;/&gt;
   &lt;ListField name=&quot;Organization&quot; phrase=&quot;Organization&quot;/&gt;
   &lt;ListField name=&quot;PersonAccountable&quot; phrase=&quot;Contact&quot;/&gt;
   &lt;ListField name=&quot;RiskSeverityTerm&quot; phrase=&quot;Risk Severity&quot;/&gt;
   &lt;ListField name=&quot;ContactWithin&quot; phrase=&quot;Contact Within&quot;/&gt;
   &lt;ListField name=&quot;LastUpdate&quot; phrase=&quot;Last Updated&quot;/&gt;
 &lt;/ListScreen&gt;

== Aligning List Field Data Within List Screen Columns ==

List fields included within the list screens can be aligned to improve the presentation of data. Aligning list fields within list screen columns is accomplished by adding the &quot;align&quot; attribute to one or more list fields. The example below illustrates how to align fields within the list screen:

 &lt;ListScreen name=&quot;List&quot; phrase=&quot;List|List modules&quot;&gt;
   &lt;ListField name=&quot;ModuleID&quot; phrase=&quot;Record ID&quot;/&gt;
   &lt;ListField name=&quot;Name&quot; phrase=&quot;Module Name&quot;/&gt;
   &lt;ListField name=&quot;GlobalDiscussionAddress&quot; phrase=&quot;Global Discussion ID&quot; '''align=&quot;center&quot;'''/&gt;
   &lt;ListField name=&quot;ModuleDependencies&quot; phrase=&quot;Dependent Modules&quot; '''align=&quot;center&quot;'''/&gt;
   &lt;ListField name=&quot;CodeDependencies&quot; phrase=&quot;Dependent Codes&quot; '''align=&quot;center&quot;'''/&gt;
   &lt;ListField name=&quot;Revision&quot; phrase=&quot;XML Revision&quot;/&gt;
 &lt;/ListScreen&gt;

The &quot;align&quot; attribute can be used to align fields to the:
:Left: align=&quot;left&quot;
:Center: align=&quot;center&quot;
:Right: align=&quot;right&quot; 

== Default Ordering of List Screens  - OrderByField Element ==

A default list order can be applied to list screens by applying the &quot;OrderByField&quot; element to the list screen, list fields. The &quot;OrderByField&quot; element must be added after the last list field on a respective list screen. More than one field may be used to order a list screen and the ordering will follow the order in which the &quot;OrderByField&quot; elements are placed at the end of the list fields. An example of the &quot;OrderByField&quot; element and its use to order list fields is provided below:

 &lt;ListScreen name=&quot;List&quot; phrase=&quot;List|List situation contacts&quot;&gt;
   &lt;ListField name=&quot;SituationContactID&quot; phrase=&quot;Record ID&quot;/&gt;
   &lt;ListField name=&quot;Situation&quot; phrase=&quot;Situation&quot;/&gt;
   &lt;ListField name=&quot;Organization&quot; phrase=&quot;Organization&quot;/&gt;
   &lt;ListField name=&quot;PersonAccountable&quot; phrase=&quot;Contact&quot;/&gt;
   &lt;ListField name=&quot;RiskSeverityTerm&quot; phrase=&quot;Risk Severity&quot;/&gt;
   &lt;ListField name=&quot;ContactWithin&quot; phrase=&quot;Contact Within&quot;/&gt;
   &lt;ListField name=&quot;LastUpdate&quot; phrase=&quot;Last Updated&quot;/&gt;
   '''&lt;OrderByField name=&quot;RiskSeverityTerm&quot; direction=&quot;desc&quot;/&gt;'''
   '''&lt;OrderByField name=&quot;Situation&quot;/&gt;'''
 &lt;/ListScreen&gt;

The example above will order the list in descending order by Risk Severity Term, and then in ascending order by Situation.

= Attributes =
;direction:''Optional.'' A direction attribute is optional but can be added to apply a sort order to the fields within a list. Adding the direction=&quot;asc&quot; attribute will sort the fields in ascending order. Adding the direction=&quot;desc&quot; attribute will sort the fields in descending order.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>MemoField</title>
    <id>2597</id>
    <revision>
      <id>6090</id>
      <timestamp>2007-11-27T22:43:19Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Image:MemoField.png|frame|right|&quot;Description&quot; MemoField]]
The '''MemoField''' element is used to establish the height and width of the the data entry form for text fields on the graphical user interface. The MemoField element also provides a multi-line text input field, with a wysiwyg HTML editor for some simple text formatting.






== XML syntax ==

'''''Text Edit''' for [[Data_type|text]] fields'':

 &lt;MemoField name=&quot;Description&quot; rows=&quot;5&quot; cols=&quot;75&quot;/&gt;
	
== Attributes ==
;name:''Required.'' A [[Data_type|&quot;text&quot;]] [[ModuleField]] name that exists within the XML definition file's ModuleFields section.
;rows:''Required.'' The rows attribute is used to establish the height of the data entry box on the graphical user interface.
;cols:''Required.'' The cols attribute is used to establish the width of the data entry box displayed on the graphical user interface. 


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Module</title>
    <id>1025</id>
    <revision>
      <id>3253</id>
      <timestamp>2006-04-21T20:16:36Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Functional definition */</comment>
      <text xml:space="preserve">== Technical definition ==
A '''module''' is a Active Agenda metaphor for a database [[table]] (excluding [[log table]]s), together with all the specific logic and relationships that are necessary to enable users to view and edit the data in that table. The database table definitions and presentation logic (as well as module-specific documentation) are specified in an [[XML Module Definition|XML file]], for ease of maintenance.

== Functional definition ==
Since it is often necessary to use several tables together (including minor &quot;helper tables&quot;) in order to usefully capture data related to a particular function, the strict number of tables can be somewhat misleading when describing the functionality or overall complexity of the application. When we talk about &quot;over 60 modules&quot; on the web site, this excludes minor tables that contains lookup list data and the like. The actual number of database tables is over a hundred.
[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Module Generating Times</title>
    <id>1398</id>
    <revision>
      <id>3415</id>
      <timestamp>2006-11-15T19:58:47Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">== Module Generating Times ==


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ModuleField</title>
    <id>1019</id>
    <revision>
      <id>6338</id>
      <timestamp>2008-11-29T04:33:48Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Types of ModuleFields */</comment>
      <text xml:space="preserve">A '''ModuleField''' is a metaphor for any data-retrieving field in a module.  
This includes the [[TableField]], which directly corresponds to a physical field in the module's database table, but also other &quot;virtual&quot; fields, which encapsulate information required to retrieve related data from other modules.

The ModuleField type is an ''abstract type'', intended only to serve as a base type for the types that descend from it. &lt;code&gt;&lt;ModuleField&gt;&lt;/code&gt; is not a valid element in the [[XML Module Definition]]s, and the corresponding PHP class should not be instantiated.

All ModuleFields should be declared in the &lt;code&gt;&lt;ModuleFields&gt;&lt;/code&gt; section of the XML module definition.  
The corresponding PHP classes are declared in the &lt;code&gt;app/classes/modulefields.php&lt;/code&gt; file.

All [[ScreenField]]s must have a corresponding ModuleField (by having the same name) in their corresponding modules.

== Types of ModuleFields ==
;[[TableField]]:Represents a field in the module's database table.
;[[ForeignField]]:Represents a field in a different module, and contains the necessary information to derive a SQL join to it from the current module. The field referred to must be a TableField or a RemoteField in the foreign module.
;[[CodeField]]:A sub-type of the ForeignField which is hard-coded to join to the [[Codes]] module. Provides a standardized method of incorporating data from basic lookup lists that are kept as codes.
;[[RemoteField]]:Similar to ForeignField in that it represents a field in a different module, but it also has the capability of writing data to it. The field referred to must be a TableField in the [[Remote Module|remote module]].
;[[DynamicForeignField]]:Similar to ForeignField but dynamically joins to the [[RecordDescription]] field in ''&quot;any&quot;'' other module, on a per-record basis. Requires that the current module has fields that contains values for what module and record to join to.
;[[CombinedField]]:Concatenates values of other ModuleFields that are declared in the same module.
;[[CalculatedField]]:Calculates simple math on fields in the same module: add, subtract, multiply, divide, dateadd, datediff, etc.
;[[SummaryField]]:Calculates summary expressions on sub-modules: count, average, sum, etc.
;[[RecordMetaField]]:Represents the date/time when the record was created, or when it was last modified. Attributes can also be applied to retrieve and display the name of the PersonID of the user creating or modifying a record.
;[[RangeField]]:Similar to ForeignField but matches against a range of values instead of exact matches.
;[[LinkField]]:A special form of calculated field that constructs a valid internal URL for a record or module.
;[[StaticField]]:A field that always returns the same value, but is useful for &quot;dummy&quot; fields in forms.

== Attributes that are valid for all ModuleField types ==
;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.
;type:''Required for TableField.'' The [[data type]] of the field in the database table.
;phrase:''Required.'' A [[phrase]] that contains the English label that the field should be displayed with in the application.
;sample:''Optional'' A value that serves as sample data when viewing an XML module definition file with the [[XSL viewer]].

== Sub-elements ==
Some ModuleFields allow sub-elements within them. Currently the only allowed sub-element is [[ListCondition]], which can be placed in a [[ForeignField]] or a [[CodeField]].

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ModuleID</title>
    <id>2416</id>
    <revision>
      <id>5946</id>
      <timestamp>2007-11-20T19:38:08Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>merged from competing article</comment>
      <text xml:space="preserve">A '''ModuleID''' is 3 to 5 letter combination that uniquely identifies a [[module]] in Active Agenda. The complete list of modules, along with [[XML_Definition_File_Names | their moduleIDs]] can be found within the application in the [[Modules Module]]. 

== Uses ==
ModuleIDs are used in the application in several ways:
* As names for database tables.
* In the names of [[XML Module Definition]] files.
* In the names of the generated files.
* In HTML links within the application.
* In references from [[global module]]s or [[central submodule]]s to records in any other module.

== Naming ==
A three-letter module ID is used for &quot;parent&quot; modules (has many submodules), or stand-alone modules (has neither parent- nor submodules). Four- or five-letter module IDs are reserved for submodules, and the three first letters should be the same as the parent module's module ID. This practice helps in finding related modules when sorted alphabetically by module ID.

'''chm''' - Main Chemicals module.
:'''chmin''' - Chemical Inventory module (a submodule of chm).

=== Use &quot;x&quot; prefix in Custom Module IDs ===
If you develop a custom module for Active Agenda, it is possible that you might choose a module ID that is later chosen for a new module by the Active Agenda project and distributed in a new release of the application. In order to avoid naming conflicts, please use &quot;'''x'''&quot; as the first letter in the module ID of your custom modules (the maximum number of characters is still five). We will not assign &quot;x&quot; as the first letter of new module IDs, so this will also identify your module as a custom module.

=== Reserved character combinations because of Windows legacy ===
Because of legacies from DOS days, certain file names are reserved in the Windows operationd systems. That applies not only to files without a file extension, but files with any extension, if the first part of the file name is a reserved word.

This created problems for MySQL, where a table file named &quot;con.frm&quot; couldn't be created. 

The reserved names to NOT use in module IDs are:
*con
*prn
*aux
*nul


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>MoneyField</title>
    <id>1304</id>
    <revision>
      <id>6087</id>
      <timestamp>2007-11-27T22:35:32Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Image:MoneyField.png|frame|right|MoneyField Display]]

A '''MoneyField''' is a [[ModuleField]] that is used to represent money values as fields.

== XML syntax ==
''(Note: optional attributes omitted):''

 &lt;TableField
            name=&quot;FieldName&quot; 
            type=&quot;money&quot; 
            validate=&quot;[[Validation instructions|Validation instructions]]&quot;
            phrase=&quot;[[Phrase|Short Phrase|Long phrase]]&quot;/&gt;

== Attributes ==
;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.
;type:''Required.'' 
* TableField:  type=&quot;money&quot;
;validate:''Optional.'' [[Validation instructions|Validation instructions]] used to require data entry or permit the saving of empty fields.
;key:''Required.''
;phrase:''Required.''A [[phrase]] that contains the English label that the field should be displayed with in the application.
;sample:''Optional.'' A value that serves as sample data when viewing an XML module definition file with the [[XSL viewer]].


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Navigation XML</title>
    <id>2456</id>
    <revision>
      <id>8114</id>
      <timestamp>2010-05-16T00:12:40Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">Active Agenda uses an XML file to stipulate the navigation order and module links within the Main Menu navigation hierarchy. The file name is '''Navigation.xml''' and it is located in the s2a/active_agenda file folder.

== XML syntax ==
Module navigation and order are defined in the Navigation.xml module as follows:
 &lt;Navigation&gt;
    &lt;'''Category''' phrase=&quot;Global&quot;&gt;
        &lt;Category phrase=&quot;Modules|Manage associated information throughout the application&quot;&gt;
            &lt;'''ModuleLink''' moduleID=&quot;act&quot; phrase=&quot;&quot;/&gt;
            &lt;'''ExternalLink''' target=&quot;activeagenda.net/discussions/&quot; phrase=&quot;&quot;/&gt;
        &lt;/Category&gt;
    &lt;/Category&gt;
 &lt;/Navigation&gt;

== Category Element Attributes ==
;phrase:''Required.'' A short word or phrase used to identify a grouping of modules nested beneath the category phrase.

== ModuleLink Element Attributes ==
;moduleID:''Required.'' The [[moduleID]] of the module the navigation link will open.
;phrase:''Required.'' A short word or phrase used to identify the module the navigation link will open.


== ExternalLink Element Attributes ==
;target:''Required.'' The uniform resource locater (URL) the navigation link will open.
;phrase:''Optional.'' A short word or phrase used to identify the uniform resource locater (URL) the navigation link will open..

== Custom Module Navigation File ==
Active Agenda enables the development and deployment of custom modules to meet a user's distinct requirements. When naming custom modules, developers should adhere to the custom module naming schema when defining [[ModuleID|custom module IDs]].

=== Using A Custom Navigation Menu ===

A custom navigation menu is enabled, and can utilized by looking for the CUSTOM_NAVIGATION_FILE setting in the config-dist.php file. This setting must be copied to, and &quot;uncommented&quot; within, the config.php file. The suggested file name for a custom navigation file is customNavigation.xml. The file must be placed in the same folder as the Navigation.xml file. The name of the custom navigation file can be changed so long as it corresponds with the CUSTOM_NAVIGATION_FILE setting within the config.php file.

'''The custom navigation menu file will not be overwritten during updates and can include custom module links'''. A custom menu is ideal for substantial changes to the default menu structure. A custom navigation menu will require manual comparisons and updates with the Navigation.xml file. If the default menu structure, automated updates, and limited custom module insertion is desired, the xNavigation.xml file (see below) is the ideal way to achieve this outcome.

=== Inserting Custom Modules Into the Navigation Menu ===
Inserting custom modules into the main menu navigation requires the use of a file named '''xNavigation.xml'''. This file has been named to correlate with the custom module naming schema and it '''must be located in the same folder as the Navigation.xml file'''. '''xNavigation.xml''' is required to insert custom modules into the main menu navigation (custom or default) and prevent the overwriting of the custom module links when [[Getting the latest code|getting the latest code]].

'''The xNavigation.xml file must exactly reproduce the parent lineage within the Navigation.xml file''' (marked in bold below). The custom items will appear at the end of level where they are inserted. The syntax below will insert the custom modules as the last category beneath the Facilities category within the Navigation.xml file.

 &lt;Navigation&gt;
    &lt;Category phrase=&quot;&quot;&gt;
        &lt;Category phrase=&quot;Facilities|Manage information associated with facilities&quot;&gt;
            &lt;ModuleLink moduleID=&quot;xra&quot; phrase=&quot;Risk Assessments|&quot;&gt;
                &lt;ModuleLink moduleID=&quot;xrarc&quot; phrase=&quot;Category Values|&quot;/&gt;
                &lt;ModuleLink moduleID=&quot;xrapv&quot; phrase=&quot;Probability Values|&quot;/&gt;
                &lt;ModuleLink moduleID=&quot;xrasv&quot; phrase=&quot;Severity Values|&quot;/&gt;
                &lt;ModuleLink moduleID=&quot;xrarr&quot; phrase=&quot;Reductions|View, or modify risk reductions&quot;/&gt;
            &lt;/ModuleLink&gt;
        &lt;/Category&gt;
    &lt;/Category&gt;
 &lt;Navigation&gt;


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>OrgComboField</title>
    <id>2598</id>
    <revision>
      <id>6208</id>
      <timestamp>2008-02-27T18:41:12Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>/* Attributes */ updated findMode info</comment>
      <text xml:space="preserve">[[Image:OrgCombo.png|frame|right|OrgComboField Display]]
The '''OrgComboField''' element is used to insert an organization [[ForeignField]] using a combo box within the graphical user interface.




== XML syntax ==

'''''Organization Selection''' for [[Data_type|int]] fields'':

 &lt;OrgComboField name=&quot;OrganizationID&quot; findMode=&quot;text&quot; suppressItemAdd=&quot;yes&quot;&gt;
   &lt;SampleItem ID=&quot;1&quot; name=&quot;Active Agenda, HQ&quot;/&gt;
   &lt;SampleItem ID=&quot;2&quot; name=&quot;Active Agenda, Sweden&quot;/&gt;
   &lt;SampleItem ID=&quot;3&quot; name=&quot;Active Agenda, Latvia&quot;/&gt;
 &lt;/OrgComboField&gt;

== Attributes ==
;name:''Required.'' A [[ModuleField]] name that exists within the XML definition file's ModuleFields section and the field is a valid &quot;int&quot; [[Data_type|data type]]. The TableField must correspond with an [[Organizations Module|Organizations module]] [[ForeignField]] used to display the organization name.
;findMode:''Optional.''The findMode attribute enables searching of combo box list items based on text entered into a text box preceeding the combo box. There is currently one available findMode, &quot;text&quot;, which filters the list items based on the contents of the text entered into the text box, alphabetically. An older findMode value, &quot;alpha&quot; is now implemented the same way. &quot;text&quot; and &quot;alpha&quot; are therefore synonymous.
;suppressItemAdd:''Optional.'' Adding the suppressItemAdd=&quot;yes&quot; attribute to any Code, Person, or Org Combo field will suppress the functionality that allows users to edit these lists from an edit screen.

== Elements ==
;SampleItem:''Optional.'' The SampleItem element is used to help XML authors understand the types of data anticipated. This attribute is always optional.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>OrgListOptions</title>
    <id>2421</id>
    <revision>
      <id>7424</id>
      <timestamp>2009-10-28T17:17:12Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Special keywords */</comment>
      <text xml:space="preserve">The '''orgListOptions''' attribute is an attribute which applies to [[TableField]]s, [[RemoteField]]s, and [[ForeignField]]s. This attribute is primarily used with TableFields; however, when applied to RemoteFields and ForeignFields, the attribute will override the characteristics of the corresponding TableField.

Its purpose is to allow Organization drop-lists (which must be defined as [[OrgComboField]]s) to be ordered and/or filtered by particular characteristics of the organizations listed. The two basic characteristics used are &quot;Internal&quot; and &quot;Participant&quot;. 

The organizations will be limited to those that match the given keywords. If more than one keyword is included (space-separated), the organizations will be grouped by the first keyword that they match and groups will appear in the order specified (but see the exception about the all_others keyword below).

== Internal/Participant keywords ==
Keywords that indicate internal/participant status are composed of two parts: First three letters about the internal status (internal/external/either), then three letters about the participant status (participant/non-participant/either).  Internal organizations are those where the value of the &quot;Internal&quot; field in the Organizations module is marked as &quot;yes&quot; (true). Conversely, those where the value is &quot;no&quot; (false) are considered &quot;external&quot;. The &quot;Participant&quot; field in the Organizations module corresponds to the &quot;participant&quot; status similarly.

'''Possible values for &quot;internal&quot;:'''
 int - Internal
 ext - External
 all - Either internal or external

'''Possible values for &quot;participant&quot;:'''
 par - Participant
 non - Non-participant
 all - Either participant or not.

The following are possible combinations:
 intpar
 intnon
 intall
 extpar
 extnon
 extall
 allpar
 allnon
 allall (possible but not useful)

== Special keywords ==

There are also &quot;special&quot; keywords that match a different characteristic of an organization. All the currently implemented special keywords require a corresponding &quot;bool&quot; field in the Organizations module.

 Keyword               Module Bool Field
 =================     ==================
 accrediting_body      AccreditingBody
 contractor            Contractor
 customer              Customer (since SVN revision 1123)
 disposal_facility     DisposalFacility
 emergency_responder   EmergencyResponder
 government_agency     GovAgency
 insurance_broker      InsuranceBroker
 insurance_carrier     InsuranceCarrier
 law_firm              LawFirm
 manufacturer          Manufacturer
 medical_provider      MedicalProvider
 reinsurer             Reinsurer
 standards_provider    StandardsProvider
 supplier              Supplier
 waste_transporter     WasteTransporter

 Example: orgListOptions=&quot;standards_provider&quot;

== Ordering ==
Organizations will be grouped into the first group that they match. The groups will appear in the list in the order specified (with the possible exception of ''all_others'' which always appears last). Within each group, organizations are sorted alphabetically by name.

== The all_others keyword ==
The ''all_others'' keyword is special in that it matches any organization that doesn't match any other given keyword. It is also special in that ordering does not strictly matter - the organizations matching the ''all_others'' keyword will always appear at the end of the list no matter where in the attribute string it is inserted.

Technically, the ''all_others'' keyword omits the WHERE condition in that would otherwise be inserted into the SQL statement that retrieves the list. This means that organizations where the matching column is neither ''true'' nor ''false'' but ''NULL'' will appear in this group.

== A note about NULLs ==
If an organization has no value entered (i.e. the value is NULL) in the Internal or Participant fields, it will NOT match the &quot;external&quot; or &quot;non-participant&quot; categories, respectively. If you expect to see an organization in your list but cannot find it, ensure that the &quot;No&quot; value is selected in the organization's record in the Organizations module.

It is possible to set the value for all the organizations through the MySQL client:

 UPDATE `org` SET Internal = 0 WHERE Internal IS NULL;
 UPDATE `org` SET Participant = 0 WHERE Participant IS NULL;

== Examples ==
Below are examples of combinations of keywords that are actually used in the Active Agenda XML code. In order to facilitate the conversion from an earlier syntax (the listType attribute), the earlier syntax is given first in each example.

In cases where all organizations should appear (i.e. all keywords together match the entire set), I consistently use ''all_others'' as the last keyword.

 listType=&quot;allParticipants&quot; (old syntax)
 orgListOptions=&quot;allpar&quot;    (new syntax)

 listType=&quot;allParticipants allNonParticipants&quot; (old syntax)
 orgListOptions=&quot;allpar all_others&quot;            (new syntax)

 listType=&quot;allParticipants internalNonParticipants&quot; (old syntax)
 orgListOptions=&quot;allpar intnon&quot;                     (new syntax)

 listType=&quot;allParticipants internalNonParticipants 
           externalNonParticipants&quot;                (old syntax)
 orgListOptions=&quot;allpar intnon all_others&quot;         (new syntax)

 listType=&quot;externalAll internalAll&quot; (old syntax)
 orgListOptions=&quot;extall all_others&quot; (new syntax)

 listType=&quot;internalAll&quot;  (old syntax)
 orgListOptions=&quot;intall&quot; (new syntax)

 listType=&quot;internalAll externalAll&quot; (old syntax)
 orgListOptions=&quot;intall extall&quot;     (new syntax)

 listType=&quot;internalParticipants&quot; (old syntax)
 orgListOptions=&quot;intpar&quot;         (new syntax)

 listType=&quot;internalParticipants externalParticipants&quot; (old syntax)
 orgListOptions=&quot;intpar extpar&quot;                       (new syntax)

 listType=&quot;internalParticipants internalNonParticipants&quot; (old syntax)
 orgListOptions=&quot;intpar intnon&quot;                          (new syntax)

 listType=&quot;internalParticipants internalNonParticipants externalParticipants&quot; (old syntax)
 orgListOptions=&quot;intpar intnon extpar&quot;                                        (new syntax)

 listType=&quot;internalParticipants internalNonParticipants externalParticipants externalNonParticipants&quot; (old syntax)
 orgListOptions=&quot;intpar intnon extpar all_others&quot; (new syntax)

 listType=&quot;special=1&quot;        (old syntax)
 orgListOptions=&quot;contractor&quot; (new syntax)

 listType=&quot;special=2&quot;          (old syntax)
 orgListOptions=&quot;manufacturer&quot; (new syntax)

 listType=&quot;special=4&quot;               (old syntax)
 orgListOptions=&quot;insurance_carrier&quot; (new syntax)

 listType=&quot;special=5&quot;              (old syntax)
 orgListOptions=&quot;insurance_broker&quot; (new syntax)

 listType=&quot;special=6&quot;       (old syntax)
 orgListOptions=&quot;reinsurer&quot; (new syntax)

 listType=&quot;special=7&quot;      (old syntax)
 orgListOptions=&quot;law_firm&quot; (new syntax)

 listType=&quot;special=9&quot;               (old syntax)
 orgListOptions=&quot;government_agency&quot; (new syntax)

 listType=&quot;special=10&quot;              (old syntax)
 orgListOptions=&quot;disposal_facility&quot; (new syntax)

 listType=&quot;special=11&quot;              (old syntax)
 orgListOptions=&quot;waste_transporter&quot; (new syntax)

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>OwnerField</title>
    <id>1140</id>
    <revision>
      <id>3115</id>
      <timestamp>2006-02-07T22:24:47Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">&lt;OwnerField name=&quot;OrganizationID&quot;/&gt;

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>PHP 5 conversion</title>
    <id>2390</id>
    <revision>
      <id>7928</id>
      <timestamp>2010-03-18T00:51:02Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">The development of the current incarnation of Active Agenda was started when PHP 4 was the best and greatest, most stable PHP there ever was. If I recall correctly, PHP 5 was in alpha or early beta stage.

Now, however, we're seeing the end-of-life nearing for PHP 4, so conversion of the Active Agenda source code to PHP is getting urgent.

Please add your experiences with using AA on PHP 5 to this page.

'''UPDATE:''' We have a thread about this in the [http://sourceforge.net/tracker/index.php?func=detail&amp;aid=1712814&amp;group_id=176991&amp;atid=879451 SourceForge Tracker].

== PHP 5.2.1 (cli) ==

Installed database with s2a-install-db.php from 0.8.2, surprisingly without issues?!? --[[User:AADocAdmin|...aaadmin]] 14:22, 4 May 2007 (PDT)

=== login.php - pear/DB.php ===
Error message when accessing the login page:
 
 An error of type  happened to  (ID , IP 127.0.0.1) at Fri, 04 May 2007 15:14:09 -0700.
 File /home/mattias/activeagenda/trunk/pear/DB.php, line 470:
 Assigning the return value of new by reference is deprecated
 REQUEST_URI: /aatrunk/login.php?dest='L2FhdHJ1bmsvZnJhbWVzLnBocA=='
 
 GET: Array
 (
     [dest] =&gt; \'L2FhdHJ1bmsvZnJhbWVzLnBocA==\'
 )
 
 backtrace:
 (1) function require_once, file /home/mattias/activeagenda/trunk/active_agenda/web/login.php,  line 63
--[[User:AADocAdmin|...aaadmin]] 16:10, 4 May 2007 (PDT)



== SVN repository updates ==

'''Revision 753:'''

* All instances (where it matters: not in user messages) of get_class() have been wrapped in strtolower() in order to work around the fact that the get_class() function PHP 5 returns the class names as specified and not lower-cased like PHP 4. --[[User:AADocAdmin|...aaadmin]] 13:46, 5 May 2007 (PDT)

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ParentListModuleField</title>
    <id>2645</id>
    <revision>
      <id>6281</id>
      <timestamp>2008-08-11T21:14:03Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">The parentListModuleField is a hint to get the parser to generate the right SQL statement that can retrieve the list choices in a [[ComboField]] which is being &quot;filtered&quot; by a parent field.

Its name is a bit confusing, since it refers to a field in the module that populates the ComboField itself, not the parent ComboField. When the name of the parentField is different from the matching field in the list module, the parser needs to know which field to use for parent filtering.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>PersonComboField</title>
    <id>2613</id>
    <revision>
      <id>6209</id>
      <timestamp>2008-02-27T18:42:00Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>/* Attributes */ updated findMode info</comment>
      <text xml:space="preserve">[[Image:PersonComboField.png|frame|right|PersonComboField Display]]
The '''PersonComboField''' element is used to insert a person [[ForeignField]] using a combo box within the graphical user interface.










== XML syntax ==

'''''Person Selection''' for [[Data_type|int]] fields'':

 &lt;PersonComboField name=&quot;PersonAccountableID&quot; findMode=&quot;alpha&quot;&gt;
   &lt;SampleItem ID=&quot;1&quot; name=&quot;Dan Zahlis&quot; orgName=&quot;Active Agenda, HQ&quot;/&gt;
   &lt;SampleItem ID=&quot;2&quot; name=&quot;Larry Hansen&quot; orgName=&quot;Active Agenda, Norway&quot;/&gt;
   &lt;SampleItem ID=&quot;3&quot; name=&quot;Mattias Thorslund&quot; orgName=&quot;Active Agenda, Sweden&quot;/&gt;
   &lt;SampleItem ID=&quot;4&quot; name=&quot;Jane Doe&quot; orgName=&quot;Active Agenda, Latvia&quot;/&gt;
 &lt;/PersonComboField&gt;


== Attributes ==
;name:''Required.'' A [[ModuleField]] name that exists within the XML definition file's ModuleFields section and the field is a valid &quot;int&quot; [[Data_type|data type]]. The TableField must correspond with a [[People Module|People module]] [[ForeignField]] that is used to display the person name.
;findMode:''Optional.''The findMode attribute enables searching of combo box list items based on text entered into a text box preceeding the combo box. There is currently one available findMode, &quot;text&quot;, which filters the list items based on the contents of the text entered into the text box, alphabetically. An older findMode value, &quot;alpha&quot; is now implemented the same way. &quot;text&quot; and &quot;alpha&quot; are therefore synonymous.
;suppressItemAdd:''Optional.'' Adding the suppressItemAdd=&quot;yes&quot; attribute to any Code, Person, or Org Combo field will suppress the functionality that allows users to edit these lists from an edit screen.

== Elements ==
;SampleItem:''Optional.'' The SampleItem element is used to help XML authors understand the types of data anticipated. This attribute is always optional.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Phrase</title>
    <id>1212</id>
    <revision>
      <id>3237</id>
      <timestamp>2006-05-22T18:47:13Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">&lt;div style=&quot;float:right;width:315px;&quot;&gt;
  [[image:Phrase.png|none|thumb|300px|Field Phrase]]
&lt;/div&gt;


Active Agenda uses &quot;phrases&quot; to describe numerous screen objects, active links, and other [http://en.wikipedia.org/wiki/Graphical_user_interface GUI] elements that are capable of performing an action, such as an icon or button. 

When a phrase is included within a module's [[XML Module Definition|XML file]], the phrase becomes visable to users when a user [http://en.wikipedia.org/wiki/Mouseover &quot;mouses over&quot;] a field name. This feature is intended to provide additional help to users and improve a user's understanding of each field's intended purpose.

Active Agenda uses short (e.g. field name) and long (e.g. field description) phrases throughout the application by inserting them into a respective module's XML file. This method of design allows translaters to export the phrases into a single translation utility, such as [http://en.wikipedia.org/wiki/Gettext gettext]. Once the phrases are translated and saved into a language file, Active Agenda can be used in the language selected within the User administration area of the application.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>PrimaryKey</title>
    <id>2575</id>
    <revision>
      <id>5942</id>
      <timestamp>2007-11-20T19:25:47Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>new article</comment>
      <text xml:space="preserve">The '''PrimaryKey''' element defines a primary key on a table in the database. The primary key is required, and should be defined in the ModuleFields element (see [[XML Module Definition]]).

Except for some system modules, the primary key should refer to a single field only, which should have an integer data type and use ''auto_increment''. If any uniqueness constraints are needed on other table fields in the module, use a separate [[Index]] element with unique=&quot;yes&quot;.

== XML Syntax ==

 &lt;PrimaryKey&gt;
     &lt;FieldRef name=&quot;RecordID&quot;/&gt;
 &lt;/PrimaryKey&gt;

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Public Charts</title>
    <id>2428</id>
    <revision>
      <id>5724</id>
      <timestamp>2007-08-30T00:07:20Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <text xml:space="preserve">''NOTE: this article covers recently implemented functionality which is available only by [[getting the latest code]] via SVN. It will be part of the next public release.''

The '''public charts''' functionality allows non-users to view specific charts generated from data in your Active Agenda installation. It is intended for integration into a public web site (which may be run on a different server) or corporate intranet site and the like. It is designed to be flexible and allow for many kinds of uses and server/network environments.

The chart export functionality can export the dashboard charts of any valid user in your Active Agenda installation. We recommend creating a dedicated user account for this purpose, however. Permissions can be kept very strict, without any Edit permissions, and with View permissions only for the modules that you would like to publish charts for. To define which charts to be exported, simply log in under the dedicated user's account and start adding charts to the user's dashboard. Search conditions and organization permissions will be respected.

== Settings ==
This functionality requires two new configuration settings in your config.php file. They are:

;CHART_EXPORT_LOCATION:This defines location of the export folder, discussed below.
;CHART_EXPORT_TEMPLATE:This defines the name and location of the HTML template file, discussed below.

Also see the comments in the latest version of the config-dist.php file in the SVN repository.

== Export folder ==
The charts and other files may be exported to any folder on the server's file system or even &quot;shared folder&quot; on a remote computer (using [http://en.wikipedia.org/wiki/Samba_%28software%29 SAMBA], [http://en.wikipedia.org/wiki/SSHFS sshfs] or something else). You may also be able to use [http://en.wikipedia.org/wiki/Rsync rsync] to update the remote computer.

== Template file ==
The chart export command creates not only an image file for each chart, but also XML and HTML files which are intended to aid in integrating the images with your web site. The templates for the HTML files (described below) are defined in a file named export_html.php in your current theme folder.

If you are using the default aa_theme theme, you will get this file when you update with your SVN client. If you are using a custom theme, you will need to either copy the file from the aa_theme folder (in s2a/active_agenda/web/themes/aa_theme) to your custom theme folder, or re-build your current theme with the s2a-build-theme.php command:

 [user@host s2a]$ php s2a-build-theme.php your_theme

== The export command ==
Before we schedule the cron job, we might want to test that everything works fine thus far. You can simply execute the export command manually from the command prompt:

 [user@host s2a]$ php lib/cron/cron-export-charts.php chart_user

Instead of ''chart_user'', use the name of the user whose charts you want to export. If there was ''no output'', all went well. You can go to the export folder and look at the exported files. 

=== Custom chart dimensions ===
By default, the exported images are sized to 200 pixels tall by 300 pixels wide. If you would like smaller or larger charts, you may specify the height and width after &lt;username&gt;. 

 [user@host s2a]$ php lib/cron/cron-export-charts.php chart_user 300 450

You may omit the width parameter, which will then default to 1.5 times the height.

=== Verbose mode ===
If you would like to convince yourself that the export script is in fact &quot;doing something&quot;, you may pass the value &quot;yes&quot; as a fourth parameter. This will turn on &quot;verbose&quot; mode and the script will tell you what it's doing:

 [user@host s2a]$ php lib/cron/cron-export-charts.php chart_user 300 450 yes
 Chart: sgg Radar01 Suggestions By Risk Imperative
    Conditions: All records
 Chart: inv Pie04 Involvement By Person Involved
    Conditions: Organization: Active Agenda, Inc.
 File /home/user/s2a/active_agenda/web/public/chart_user_chartInfo.xml saved.
 File /home/user/s2a/active_agenda/web/public/chart_user_charts_embed.html saved.
 File /home/user/s2a/active_agenda/web/public/chart_user_charts.html saved.

== The cron job ==
On a Linux/Unix machine, the mechanism to execute the export the command periodically is called ''[http://en.wikipedia.org/wiki/Crontab cron]''. On Windows, you can use the command-line &quot;at&quot; command or the Windows Task Scheduler (if you have experience/feedback using any of these, we'd very much appreciate your comments).

You may want to consult a Linux book or other documentation about how to set up a cron job on your system, but here are at least some pointers:

You may need to specify the exact location of the PHP executable explicitly. To find out where your executable, type &quot;which php&quot;.

To edit your cron jobs, use the command &quot;crontab -e&quot;. This command will open the &quot;crontab&quot; (cron schedule) file for cron jobs under your user account, in your default command-line editor (such as '''vi''' or '''nano'''). See available online documentation (or books) for the syntax of crontab files and how to use your editor.

The following example will execute the chart export every five minutes (note the */5), and send an  an error report by email if something goes wrong.

 MAILTO=&quot;you@example.com&quot;
 
 */5 * * * * /usr/local/bin/php /home/user/s2a/lib/cron/cron-export-charts.php chart_user

== The exported files ==
The export will create one chart image file (as PNG) for each chart on the user's desktop. It will also create one XML file and two HTML files:

;[userName]_charts.html:This is a simple (but valid) HTML file that displays the charts (as long as the chart images are in the same directory as this file) in your browser. This could be easily included in any web page, using an &lt;IFRAME&gt; element.
;[userName]_charts_embed.html:This is a partial HTML file (and therefore not strictly valid by itself), intended for easy inclusion into your web site. If your web server can read the contents of this file and include it (dynamically, as with server-side includes or PHP) in the page being displayed.
;[userName]_chartInfo.xml:This file describes the chart images in a machine-readable XML format and is intended for developers who would like to integrate the charts in their site beyond the possibilities provided by the HTML files.

Common to all these files is that they provide meta-information about each chart (title, search conditions), and that they will be updated with each new export of the charts so that they stay synced with the charts defined in your Active Agenda installation.

The look-and-feel of the HTML files can be customized by editing the export_html.php template file in your current Active Agenda theme folder. Possibilities include adding CSS rules, CSS imports or changing the HTML structure of the templates.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>RadioField</title>
    <id>2609</id>
    <revision>
      <id>6122</id>
      <timestamp>2007-11-28T07:01:14Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Image:RadioField.png|frame|right|RadioField with orientation=&quot;vertical&quot; attribute]]
The '''RadioField''' element is used to display [[ForeignField]] items using [http://en.wikipedia.org/wiki/Radio_button radio buttons] within the graphical user interface. 







== XML syntax ==

'''''Code Item Selection''' for [[Data_type|int]] fields'':

 &lt;RadioField name=&quot;AnswerID&quot; orientation=&quot;vertical&quot;&gt;
   &lt;SampleItem ID=&quot;1&quot; name=&quot;Do Not Agree&quot;/&gt;
   &lt;SampleItem ID=&quot;3&quot; name=&quot;Somewhat Agree&quot;/&gt;
   &lt;SampleItem ID=&quot;5&quot; name=&quot;Agree&quot;/&gt;
   &lt;SampleItem ID=&quot;5&quot; name=&quot;Strongly Agree&quot;/&gt;
   &lt;SampleItem ID=&quot;5&quot; name=&quot;Totally Agree&quot;/&gt;
   &lt;SampleItem ID=&quot;5&quot; name=&quot;no value&quot;/&gt;
 &lt;/RadioField&gt;


== Attributes ==
;name:''Required.'' A [[TableField]] name that exists within the XML definition file's ModuleFields section and the field is a valid &quot;int&quot; [[Data_type|data type]]. The TableField must correspond with a [[ForeignField]].
;orientation:''Optional.'' The orientation attribute enables the display of radio buttons in a horizontal or vertical alignment. The default value is horizontal. The method for displaying radio buttons in a vertical alignment is as follows: orientation=&quot;vertical&quot;

== Elements ==
;SampleItem:''Optional.'' The SampleItem element is used to help XML authors understand the types of data anticipated. This attribute is always optional.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Record Description Cache</title>
    <id>1400</id>
    <revision>
      <id>6434</id>
      <timestamp>2009-03-17T03:33:49Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>Added troubleshooting paragraphs</comment>
      <text xml:space="preserve">The '''Record Description Cache''' is a system module ''(moduleID: '''rdc''')'' that contains auto-calculated data which is used for describing any record in the database when referenced from a global module or central sub-module. Each module has its own definition of the record description, but they generally consist of a combination of various important fields in the module.

Typically, the record description will include not only table fields but also foreign fields and other &quot;virtual&quot; module fields which derive their data from other modules that are related to the module. For instance, the record description of the Locations module (orgl) consists of a combination of the Building, RoomName and LocationName fields. Out of these, the Building field is a ForeignField to the BuildingName field in the Buildings (bui) module, and the RoomName field is a ForeignField to the RoomName field in the Building Rooms (buir) module.

When data in any of those related modules is changed, the record descriptions of the dependent records will need to be updated. In the example, if the room named &quot;Handle Extruder Room&quot; were to be renamed into &quot;Handle Production Room&quot;, the RDC records for Locations in this room would need to be updated to reflect this. How can the system find these records easily? The answer is RDC triggers.

== What is an RDC Trigger? ==

An RDC trigger is a SQL SELECT statement that finds records that depend on a particular record for their record description.

== How RDC Triggers are generated: ==

The triggers for the Record Description Cache serve to determine which records (if any) in the RDC module that need to be updated when a record in a module is saved. Modules of a more descriptive character (&quot;types&quot; and &quot;codes&quot;) are more likely to be included in record descriptions of other modules.

It is easy to determine the modules that contribute to a particular module's Record Description, and also not hard to determine which records in related modules that a particular record's record description depends on. But it is considerably harder to determine this relationship from the other end: it is after all changes in the depended-on records that must trigger an update in the RDC.

Because of this, the s2a generator can only insert the triggers executed by the depended-on modules (in the example: bui, buir) when generating the depending (orgla) module but not otherwise. So a module's triggers can only be fully generated when ''all'' the modules are generated.

This also means that when a table field is dropped (due to changes in the data structure), there might still remain RDC triggers that use this field as part of their SQL statement. This can cause the confusing experience that errors with saving data suddenly occur in modules that seem unrelated to the module where a change occurred.

In order to remove obsolete RDC triggers and make sure all RDC triggers are up-to-date, you may use the s2a.php generator with the -t switch and regenerate all modules:

 php s2a.php -t

== Troubleshooting ==
If the record descriptions aren't properly populated when saving or importing data, this happens most likely because recent XML Module Definition changes where not followed by a full regeneration job. Generating just the changed modules may leave out the creation of RDC triggers in modules that depend on the modified ones.

To re-populate the RDC:
* First run a full generation job with '''php s2a.php -t''' as above. 
* Then run the RDC refresh (i.e. re-populate) script. Depending on the amount of data in the database, this can take some time:
 php s2a-rdc-refresh.php

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>RecordDescriptionField</title>
    <id>1143</id>
    <revision>
      <id>3104</id>
      <timestamp>2006-02-08T21:00:25Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">The RecordDescriptionField is used to display a record's description within a related module. The RecordDescriptionField is located within the ModuleInfo section of the XML file and &quot;points&quot; to the &quot;namesake field,&quot; which is simply named for the module's PrimaryKey (minus the ID). A module's &quot;namesake&quot; field is a combined field used to group one or more fields together to generate a short, but thorough description of a module record. The syntax for the RecordDescriptionField is as follows:

 &lt;ModuleInfo&gt;
     &lt;PrimaryKey&gt;
          '''&lt;FieldRef name=&quot;''Checklist''ID&quot;/&gt;'''
     &lt;/PrimaryKey&gt;
     &lt;OwnerField name=&quot;OrganizationID&quot;/&gt;
     '''&lt;RecordDescriptionField name=&quot;''Checklist''&quot;/&gt;'''
     &lt;RecordLabelField name=&quot;RecordLabel&quot;/&gt;
 &lt;/ModuleInfo&gt;

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>RecordLabelField</title>
    <id>1122</id>
    <revision>
      <id>3098</id>
      <timestamp>2006-02-07T20:35:59Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">The RecordLabelField is used to provide a concise description of a record.  The RecordLabelField is similar to the [[RecordDescription]] combined field but is used to display a shorter record description when such is desired. The RecordLabelField points to a single ModuleField (any) and is displayed on the top of each screen associated with a record. Alternatively, a [[CombinedField]] can be used to display more than one ModuleField as a record label. The RecordLabelField affects the screen label and shortcut descriptions.

The following represents the necessary elements to create or modify a record label:

'''ModuleFields Section'''

 &lt;ModuleFields&gt;
   &lt;TableField name=&quot;ActionID&quot;/&gt;
   &lt;ForeignField name=&quot;PersonAccountable&quot;/&gt;
   &lt;RemoteField name=&quot;DueDate&quot;/&gt;
   &lt;CodeField name=&quot;ActionStatus&quot;/&gt;
   &lt;CombinedField name=&quot;RecordLabel&quot; 
     phrase=&quot;Record Label|The short, concise, label of the record for display purposes&quot; 
     sample=&quot;Mattias Thorslund | 01-01-2006 | Ongoing&quot;&gt;
      &lt;CombinedFieldRef name=&quot;PersonAccountable&quot;/&gt;;_
      &lt;CombinedFieldRef name=&quot;DueDate&quot;/&gt;;_
      &lt;CombinedFieldRef name=&quot;ActionStatus&quot;/&gt;
   &lt;/CombinedField&gt;
 &lt;/ModuleFields&gt;

'''ModuleInfo Section'''

 &lt;ModuleInfo&gt;
   &lt;RecordLabelField name=&quot;RecordLabel&quot;/&gt;
 &lt;/ModuleInfo&gt;

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>RecordMetaField</title>
    <id>1220</id>
    <revision>
      <id>3180</id>
      <timestamp>2006-04-01T00:20:31Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <text xml:space="preserve">A '''RecordMetaField''' is a [[ModuleField]] that provides access to meta data of a record, specifically the date/time or user ID of the first or most recent change. 

== XML syntax ==
''(Note: optional attributes omitted):''
 &lt;RecordMetaField 
            name=&quot;FieldName&quot; 
            returnType=&quot;(returnType)&quot; 
            lookupType=&quot;(lookupType)&quot; 
            phrase=&quot;[[Phrase|Short Phrase|Long phrase]]&quot;/&gt;

== Attributes ==
;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.
;returnType:''Required.''  Which type of meta data to return.
:Valid instructions:
:*&quot;date&quot; - returns the date of the modification.
:*&quot;userID&quot; - returns the person ID of the user who made the modification.
;lookupType:''Required.''  Which record change to return meta data from: either the first or the most recent.
:Valid instructions:
:*&quot;created&quot; - The first record change.
:*&quot;modified&quot; - The most recent record change.
;phrase:''Required.'' A [[phrase]] that contains the English label that the field should be displayed with in the application.
;sample:''Optional.'' A value that serves as sample data when viewing an XML module definition file with the [[XSL viewer]].

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>RecordReportScreen</title>
    <id>2623</id>
    <revision>
      <id>6401</id>
      <timestamp>2009-02-07T18:37:52Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Image:RecordReportScreen.png|frame|right|&quot;Reports&quot; screen inserted within Edit Screen tabs]]

:'''REVISION 1500 NOTE : List and record report screens (i.e. tabs) are now inserted automatically when a module has a ReportDef matching list or report level. There is no longer a need to insert RecordReportScreen and ListReportScreen elements in a ModuleDef.'''

The &quot;Reports&quot; screen tab is inserted into the screen tab hierarchy by adding the RecordReportScreen element to the module definition file immediately above the closing &lt;Screens&gt; tag. This element inserts the &quot;Reports&quot; screen tab immediately above the [[Global Modules|Global Module]] screen tabs. On an [[EditScreen|Edit Screen]], this places the &quot;Reports&quot; tab immediately above the &quot;Actions&quot; screen tab.

The Reports screen lists all [[Report Definition File|report definitions]] that correspond with the respective module ID prefix (e.g. acc) AND include the ReportLocation element with the level=&quot;Record&quot; attribute. Reports listed on the Reports screen are grouped by adding the group=&quot;xxxxx&quot; attribute within the report definition file. 



 

== XML syntax ==

'''''Adding Reports Screen''':
 &lt;RecordReportScreen name=&quot;RecordReports&quot; phrase=&quot;Reports|View reports...&quot;/&gt;

== Elements ==
;RecordReportScreen:''Required.'' The RecordReportScreen element is required to insert the Reports tab on the respective edit screen. The element MUST be placed after the last [[EditScreen]] within the Screens section. The element automatically inserts the tab immediately above the Global Module tabs (e.g. Actions).

== Attributes ==
;name:''Required.'' A name attribute is required but can be any name consisting of alpha characters and no spaces.
;phrase:''Required.'' The phrase attribute is required but can be any name consisting of alpha characters and no spaces. The short [[Phrase|phrase]] defines the tab name but should be brief to avoid text wrapping on the tab. It is recommended that this tab always be named &quot;Reports&quot; to maintain consistency from an application usability perspective.






[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>RecordSummaryFields</title>
    <id>2581</id>
    <revision>
      <id>6042</id>
      <timestamp>2007-11-21T21:48:06Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>simplified heading: all code is from fbk (nice article btw)</comment>
      <text xml:space="preserve">The Record Summary Fields XML section is used to replicate the display of a group of view fields. Any [[ViewField|view field]] encapsulated within the RecordSummaryFields section will be displayed on the respective view screen where the RecordSummaryFieldsRef element is inserted. The RecordSummaryFieldsRef tag is very useful when a basic list of view fields is desired on a series of edit screens.

[[Image:RecordSummaryFields.png|400px|right|Check boxes on the Search Screen]]
== Example Using Feedback (fbk) Module==

Feedback module view fields encapsulated within the RecordSummaryFields section (as below) with a corresponding RecordSummaryFieldsRef element inserted within the Feedback module Responses Screen (as below), will result in the view fields being displayed on the Responses edit screen without having to stipulate each view field separately (see image).

 &lt;RecordSummaryFields&gt;
   &lt;ViewField name=&quot;FeedbackID&quot;/&gt;
   &lt;ViewField name=&quot;Organization&quot;/&gt;
   &lt;ViewField name=&quot;FeedbackDate&quot;/&gt;
   &lt;ViewField name=&quot;Anonymous&quot;/&gt;
   &lt;ViewField name=&quot;FeedbackProvider&quot;/&gt;
   &lt;ViewField name=&quot;FeedbackType&quot;/&gt;
   &lt;ViewField name=&quot;FeedbackRecipient&quot;/&gt;
   &lt;ViewField name=&quot;Department&quot;/&gt;
   &lt;ViewField name=&quot;FeedbackTitle&quot;/&gt;
   &lt;ViewField name=&quot;FeedbackProvided&quot;/&gt;
   &lt;ViewField name=&quot;TotalEstOpp&quot;/&gt;
   &lt;ViewField name=&quot;TotalEstExp&quot;/&gt;
   &lt;ViewField name=&quot;FeedbackStatus&quot;/&gt;
 &lt;/RecordSummaryFields&gt;

RecordSummaryFieldsRef element:

 &lt;EditScreen name=&quot;Responses&quot; phrase=&quot;Responses|Associate feedback responses with feedback&quot;&gt;
   &lt;'''RecordSummaryFieldsRef'''/&gt;
   &lt;EditGrid moduleID=&quot;fbkr&quot;/&gt;
 &lt;/EditScreen&gt;

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>RemoteField</title>
    <id>1121</id>
    <revision>
      <id>6196</id>
      <timestamp>2008-02-22T05:29:27Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>/* Attributes */</comment>
      <text xml:space="preserve">A '''RemoteField''' is a [[ModuleField]] that represents a field in a &quot;remote&quot; module, i.e. a module other than the one where it is declared. Unlike the [[ForeignField]] it can save data to the remote module. 

In the PHP code, the RemoteField class has methods to generate the necessary SQL snippets to be inserted in the SELECT and FROM clauses of a SQL SELECT query. The SaveRemoteFields() function saves the submitted values of all RemoteFields in a form to their respective remote tables.

== XML syntax ==
''(Note: optional attributes omitted):''
 &lt;RemoteField 
  name=&quot;FieldName&quot; 
  remoteModuleID=&quot;xyz&quot;
  remoteModuleIDField=&quot;ModuleIDFieldInRemoteModule&quot;
  remoteRecordIDField=&quot;RecordIDFieldInRemoteModule&quot;
  remoteField=&quot;FieldInRemoteModule&quot;
  phrase=&quot;[[Phrase|Short Phrase|Long phrase]]&quot;
 /&gt;

== Attributes ==
;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.
;type:''Required.'' The [[data type]] of the field in the database table.
;remoteModuleID:''Required.'' The [[moduleID]] of the module from which to retrieve and save data.
;remoteModuleIDField:''Required.'' A field in the remote module that contains the current module's ModuleID.
;remoteRecordIDField:''Required.'' A field in the remote module that matches the RecordID value (Primary Key) of a row in the current module. 
;remoteField:''Required.'' The name of a field in the remote module, whose matching value should be displayed in the local module.
;remoteDescriptorField:''Required if the module has more than one RemoteField to the same remote module.'' The name of an additional field in the remote module, used for identifying the correct row in the remote module.
;remoteDescriptor:''Required if the module has more than one RemoteField to the same remote module.'' A value that identifies the row in the remote module, matching with the field of remoteDescriptorField.
:: '''Note:''' If there are more than one RemoteField with the same remoteModuleID and remoteDescriptor, they will address the same row in the remote module. This is possible only if the remoteField values are different, i.e. the different RemoteFields address different fields in the remote module.
;defaultValue:''Optional.'' Instructions for the default state of form and grid fields, as when entering a new record. 
:Valid instructions:
::&quot;today&quot; - applies to data type &quot;date&quot; or &quot;datetime&quot;.
::&quot;currentuser&quot; - applies to data type &quot;int&quot;, when used by a PersonComboField.
;validate:''Optional.'' One or more [[validation instructions]], separated by a space character.
;[[orgListOptions]]:''Optional. Applies only when the field is a foreign key to org.OrganizationID'' A set of keywords that describes which organizations to be displayed in corresponding drop-lists. This is passed on to [[OrgComboField]]s and [[PersonComboField]]s only.
;phrase:''Required.'' A [[phrase]] that contains the English label that the field should be displayed with in the application.
;sample:''Optional.'' A value that serves as sample data when viewing an XML module definition file with the [[XSL viewer]].

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Report Definition File</title>
    <id>1327</id>
    <revision>
      <id>8116</id>
      <timestamp>2010-05-16T00:13:06Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">Active Agenda uses an XML schema to generate report definition files. The report definition files can be used to generate HTML reports or custom generated Adobe pdf reports.

The following is a very basic outline of the XML structure in a report definition XML file (ReportDef):

  &lt;ReportGroup&gt;
    &lt;Report&gt;
      &lt;ReportLocation/&gt;
        &lt;ReportField/&gt; (One or more ReportFields)
        &lt;OrderByField/&gt; (One or more OrderByFields)
        &lt;ReportPage&gt;
          &lt;PageField/&gt; (One or more PageFields)
            &lt;PageLines&gt; (One or more PageLines)
              &lt;PageLine&gt;
                &lt;PageField/&gt;
              &lt;/PageLine&gt;
            &lt;/PageLines&gt;
            &lt;PageMetaField name=&quot;page&quot; type=&quot;current_page_nbr&quot;/&gt;
            &lt;PageMetaField name=&quot;pages&quot; type=&quot;total_nbr_pages&quot;/&gt;
        &lt;/ReportPage&gt;
  &lt;/Report&gt;
  &lt;/ReportGroup&gt;

''Please note that required attributes have been omitted above, for clarity. Also note that text within round parenteses are comments and not actually part of the code.''

== Report Group Element ==
A requirement for valid XML is that there is any document contains a single &quot;root element&quot;. In the Active Agenda Report definition, this element is called '''&lt;ReportGroup&gt;'''. Therefore, all other XML elements must be contained between the ''&lt;ReportGroup&gt;'' and ''&lt;/ReportGroup&gt;'' tags in the report definiton.

=== Attributes ===


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Revision XML element</title>
    <id>1221</id>
    <revision>
      <id>3181</id>
      <timestamp>2006-04-04T22:03:50Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">The '''Revision''' element is a means of tagging the XML files with information about the version and author of the XML file itself. Every module definition should have this element. It should be located at the very end, just before the &lt;/Module&gt; tag.


'''Typical display:'''
''(The line break for clarity only.)''
 &lt;Revision author=&quot;$Author: mattias $&quot; id=&quot;$Revision: 102 $&quot; 
   date=&quot;$Date: 2006-04-04 15:43:56 -0700 (Tue, 04 Apr 2006) $&quot;/&gt;

There is no need to edit the Revision element at all: The properties are kept up-to-date by our source control system, Subversion.


'''Initial entry:'''
The following can be pasted into every new Module Definition XML file. Subversion will expand what's between the $$'s with the relevant data.

 &lt;Revision author=&quot;$Author$&quot; id=&quot;$Revision$&quot; date=&quot;$Date$&quot;/&gt;

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>S2a scripts</title>
    <id>2669</id>
    <revision>
      <id>8117</id>
      <timestamp>2010-05-16T00:13:26Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">There are various command-line scripts for maintaining your Active Agenda installation. Most of these scripts will print a complete list of the available options when run with the '''-h''' option:

 php &lt;scriptname&gt; -h

;[[s2a.php]]:Generates and re-generates multiple modules.
;(s2a-apply-db-upgrade.php):Used for upgrading the database format from previous formats to 0.8.2. This is now obsolete because the generating process is now much better at modifying database tables.
;s2a-apply-patches.php: Checks for [[patches]] that have not yet been applied, determines whether they are needed, and prompts the user to apply them. This script is automatically called by s2a.php but can also be run separately.
;s2a-apply-table-changes.php: Checks for table changes which need confirmation before being applied. This script is automatically called by s2a.php but can also be run separately.
;s2a-attach-files.php: A utility to &quot;attach&quot; files to records in the application, as a batch job.
;s2a-build-graphs.php: A utility to build ''dot'' graphs of relationships between modules.
;s2a-build-theme.php: Rebuilds a theme (color scheme, graphical look-n-feel) by merging theme-specific definitions with a template.
;s2a-check-modifications.php: A simple utility to determine whether files have been modified since installation from a packaged release.
;s2a-check-uploads.php: A utility to determine whether file attachments in the uploads directory match the records in the `att` module. (This script is out of date.)
;s2a-export-codes.php: A utility to export [[Codes Module|codes]] definitions as SQL scripts.
;s2a-generate-module.php: The main script that generates a module. This script can be called separately but since it outputs a lot of debug data, and because it only generates a single module, the easiest way to use it is by running s2a.php.
;s2a-import-data.php: Imports data from a [http://en.wikipedia.org/wiki/Comma-separated_values CSV] file into any module. The CSV file can have any name and be placed in any folder. The path (relative or absolute) and target module must be included with the import script. The example below will import data from a CSV file named chm_importdata.csv, located in the &quot;util&quot; folder, into the Chemicals &lt;chm&gt; module: 

 php s2a-import-data.php util/chm_importdata.csv chm

;s2a-install-db.php: Installs the Active Agenda database and sets up an initial user so that there is a way to log in to a newly installed application.
;s2a-rdc-refresh.php: Rebuilds [[Record Description Cache|record description cache]] records, fixing any missing ones. '''Note:''' If you are experiencing missing RDC records, be sure to also run a full module regeneration job before running this script.
;s2a-remove-module.php: Uninstalls a module, removing all generated files, tables and associations in the application.
;s2a-reset-password.php: Utility to reset the login password of a 
;s2a-smc-refresh.php: Like the RDC refresh script, this rebuilds all submodule record cache. (This script is somewhat out of date)


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ScreenField</title>
    <id>2593</id>
    <revision>
      <id>6157</id>
      <timestamp>2007-11-29T22:33:30Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">The term '''screen field''' represents a type of component that can display the data of a [[ModuleField]]. Many screen fields also provide the ability to modify data.

In the XML module definition, each screen field is defined by an XML element of one of the below types. In the PHP implementation, all the screen field classes are defined in the lib/classes/components.php file.

== Non-editing screen fields ==
These are the only types of fields allowed in [[ViewScreen]]s and [[ViewGrid]]s. They may also be used in [[EditScreen]]s and [[EditGrid]]s.

;[[ViewField]]: Displays the data of a field in a screen, or grid.
;[[InvisibleField]]: Retrieves the data of a field but does not display it. The value is however available to the PHP script and may be used by custom PHP functions or, more commonly, by a different field in the page which depends on it (so maybe the generator should be smarter).

== Editing screen fields ==
These may be used in [[EditScreen]]s, [[EditGrid]]s and [[SearchScreen]]s. Some display somewhat differently in a SearchScreen, in order to provide a useful search interface.

;[[EditField]]: Provides a simple one-line Input field (HTML: &lt;Input type=&quot;text&quot;&gt;).
;[[DateField]]: Provides a date-entry field with a handy calendar widget.
;[[TimeField]]: Provides a simple field to handle time entry.
;[[MoneyField]]: Provides a field for entry of monetary amounts. This field doesn't provide much extra functionality compared with the EditField besides displaying the currency code in front of the field. However, if we do implement multi-currency support, the MoneyField functionality would be improved to provide a useful interface for this.
;[[CheckBoxField]]: Contrary to the name, this displays a set of radio fields (HTML &lt;Input type=&quot;radio&quot;&gt;) for &quot;Yes&quot;, &quot;No&quot; and &quot;No value&quot; (for the NULL value).
;[[MemoField]]: Provides a multi-line text input field (HTML &lt;Textarea&gt;), with a wysiwyg HTML editor for some simple text formatting.
;[[ComboField]]: Provides a drop-down list field (HTML &lt;Select&gt;).
;[[CodeComboField]]: Provides a drop-down list field for [[Codes Module|code]] items.
;[[OrgComboField]]: Provides a drop-down list field for Organizations.
;[[PersonComboField]]: Provides a set of drop-down list fields for selecting a Person.
;[[RadioField]]: Provides a set of radio fields (HTML &lt;Input type=&quot;radio&quot;&gt;).
;[[CodeRadioField]]: Provides a set of radio fields for code items.
;[[UploadField]]: ''(Allowed in an [[UploadGrid]] only.)'' Provides a file upload field.
;[[PasswordField]]: Provides a password entry field.
;[[HiddenField]]: Retrieves the data and puts it in a hidden HTML form field (HTML &lt;Input type=&quot;hidden&quot;&gt;). The data could be manipulated by custom JavaScript functions or simply re-posted wit the form.

== Search-only fields ==
;[[ComboSearchField]]:
;[[CodeCheckSearchField]]:


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Screens</title>
    <id>2426</id>
    <revision>
      <id>6340</id>
      <timestamp>2008-11-29T04:45:25Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">A '''Screen''' is a &quot;page&quot; that appears in the application user interface. Screens are broadly categorized into those that apply to a module in general (&quot;list level&quot;), and those that apply to just one record of a module (&quot;record level&quot;). The XML syntax of [[ScreenField|ScreenFields]] vary by screen type.

Screens are defined in a module's [[XML Module Definition|XML definition]]. For consistency and ease of navigation, they appear in a particular order:



;[[ListScreen]]: ''(one per module)'' The default &quot;landing spot&quot; when you click on an item in the navigation menu. This screen normally displays all the records in the module, but depending on user permissions and active search conditions, it may display a subset only.
;[[SearchScreen]]: ''(one per module)'' The Search screen is a &quot;list&quot; level screen like the ListScreen, and can be reached from the navigation tabs on the List screen. This is where the user can choose to filter the records by any of the given fields.

;[[ViewScreen]]: ''(one per module)'' This screen displays all the data of a given record in a non-editable form. Besides the fields of the record itself, related submodule records are displayed in [[ViewGrid]]s. It also provides navigation to all [[EditScreen]]s of the module, allowing permitted users to change or add information to the record.
;[[EditScreen]]: ''(multiple per module)'' An EditScreen displays editable fields of the record, ''or'' an [[EditGrid]] which allows editing submodule data. The first EditScreen in a module is by convention named &quot;Form&quot;, and is the screen which will be used when entering a new record into a module (via the &quot;Add New&quot; tab in the List screen).
;[[AnonEditScreen]]: ''(one per module)'' This screen enables anonymous data entry and possesses a simple self-closing page.
;[[RecordReportScreen]]: Provides a list of available record level reports.
;[[ListReportScreen]]: Provides a list of available list level reports.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>SearchScreen</title>
    <id>2570</id>
    <revision>
      <id>5930</id>
      <timestamp>2007-11-20T18:20:18Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Search Screen Syntax */</comment>
      <text xml:space="preserve">The Search Screen allows users to filter records based on the fields included on the screen. Search Screen results are displayed on the [[ListScreen|List Screen]] and can be saved as the default list of records for any module. The Search Screen filter is also used to define the data to be included within [[Charts|charts]] and reports. 

=Search Screen Syntax=
Search screens are constructed within a module's XML file within the &quot;Screens&quot; section. Search screens are comprised of one or more [[ModuleField|module field]] from the module fields section of the XML file. The Search Screen uses the same elements as the [[EditScreen|Edit Screen]]. Search screens are defined using the following syntax:

 &lt;SearchScreen name=&quot;Search&quot; phrase=&quot;Search|Search meeting attendees&quot;&gt;
   &lt;OrgComboField name=&quot;OrganizationID&quot; '''findMode'''=&quot;text&quot;/&gt;
   &lt;ComboField name=&quot;MeetingTypeID&quot; '''findMode'''=&quot;text&quot;/&gt;
   &lt;PersonComboField name=&quot;MtgAttendeeID&quot; '''findMode'''=&quot;alpha&quot;/&gt;
   &lt;CodeRadioField name=&quot;AttendanceID&quot;/&gt;
   &lt;CodeComboField name=&quot;PunctualnessID&quot;&gt;
   &lt;CodeCheckSearchField name=&quot;RiskImperativeID&quot; subModuleID=&quot;rsk&quot;
      subModuleModuleIDField=&quot;RelatedModuleID&quot; subModuleRecordIDField=&quot;RelatedRecordID&quot;
      codeIDField=&quot;RiskImperativeID&quot; codeTypeID=&quot;234&quot; phrase=&quot;Risk Imperatives|...&quot;/&gt;
 &lt;/SearchScreen&gt;

The '''findMode''' attribute allows a user to search a list using the small entry field adjacent to the displayed field.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>SearchSelectGrid</title>
    <id>2588</id>
    <revision>
      <id>6342</id>
      <timestamp>2008-11-29T04:49:02Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Inserting Search Select Grids Into &quot;Exports&quot; Section */</comment>
      <text xml:space="preserve">[[Image:SearchSelect.png|thumb|100px|right|Search Select Grid]]
Search select grids are used for adding multiple sub-module records simultaneously. [[SelectGrids|Select grids]] are search select grids without list filtering capabilities. 

Search select grids must be inserted within the [[Exports|Exports]] section of an XML module definition file in order to be available within a parent module. Search select grids must also be declared within a parent file's SubModules section and added as an edit screen.

==Inserting Search Select Grids Into &quot;Exports&quot; Section==

In order for a search select grid to be available for sub-module record associations, the search select grid elements must be inserted into the Exports section of the module where the select grid data will reside. Search fields are looked up from the list module of the primaryListField, therefore, fields must match field names in the primaryListField's list module.

 &lt;SearchSelectGrid moduleID=&quot;mtga&quot; phrase=&quot;Meeting Attendees&quot; primaryListField=&quot;MtgAttendee&quot;&gt;
   &lt;SearchForm&gt;
     &lt;OrgComboField name=&quot;OrganizationID&quot; findMode=&quot;text&quot;&gt;
       &lt;UpdateFieldRef name=&quot;DepartmentID&quot;/&gt;
     &lt;/OrgComboField&gt;
     &lt;ComboField name=&quot;DepartmentID&quot; parentField=&quot;OrganizationID&quot;/&gt;
   &lt;/SearchForm&gt;
 &lt;/SearchSelectGrid&gt;

===Elements===

;SearchSelectGrid :''Required.'' The SearchSelectGrid is required to define the contents of a search select grid.
;SearchForm:''Required.'' The SearchForm element is used to group the fields included within the search select grid.
;parentField:''Optional.'' The parentFieldelement is used to filter the data in a series of filtering fields and is used to identify the field dependency. This element is only necessary when multiple fields are being used to filter the search select grid list.
;UpdateFieldRef:''Optional.'' The UpdateFieldRef element is used to filter the data in a series of filtering fields and is used to identify the target dependency. This element is only necessary when multiple fields are being used to filter the search select grid list.

===Attributes===
;moduleID:''Required.'' The moduleID attribute is required to identify the search select grid for modules inheriting the functionality. The moduleID attribute value must be the same as the module exporting the search select grid.
;phrase:''Optional.'' A [[phrase]] that contains the English label that the field should be displayed with in the application. The phrase attribute is used to define the sub-module folder label. This label will be blank if the phrase attribute is omitted. The phrase attribute can be overridden by inserting the attribute on the SearchSelectGrid element within the module inheriting the functionality.
;primaryListField: Required. The primaryListField attribute determines which field will be displayed in the search select grid.

==Inserting Search Select Grids Into Module Edit Screens==
To make a search select grid available within a module, the sub-module containing the exported select grid must be declared within the SubModules section of the parent module's XML module definition file. The search select grid must also be added to an [[EditScreen|edit screen]] of the parent module.

=== Sub-Module Declaration  ===

 &lt;SubModule moduleID=&quot;mtga&quot; name=&quot;Meetings Attendees&quot; parentKey=&quot;MeetingID&quot; localKey=&quot;MeetingID&quot;/&gt;

=== Adding A Search Select Grid to An Edit Screen  ===
For a search select grid to appear within a module, the search select grid must be added to an [[EditScreen|edit screen]] of a module. The XML syntax for adding a search select grid to an edit screen is as follows:

 &lt;EditScreen name=&quot;Attendees&quot; phrase=&quot;Attendees|Assign attendees to a meeting&quot;&gt;
   &lt;RecordSummaryFieldsRef/&gt;
   &lt;InvisibleField name=&quot;OrganizationID&quot;/&gt;
   &lt;InvisibleField name=&quot;DepartmentID&quot;/&gt;
   &lt;SearchSelectGrid moduleID=&quot;mtga&quot;/&gt;
 &lt;/EditScreen&gt;

===Elements===
;RecordSummaryFieldRef: Optional. Adding the RecordSummaryFieldsRef element will display all view fields included within the [[RecordSummaryFields|RecordSummaryFields]] section, assuming the section has been added to the module definition file. Alternatively, view fields can be stipulated on a field-by-field basis..
;InvisibleField: Required. The InvisibleField element is required for all fields used to filter the search select grid list.
;SearchSelectGrid: Required. The SearchSelectGrid element is required for the module to identify, locate, and insert the search select grid during module generation.

===Attributes===
;name: Required. The name attribute is required for the module to identify the table fields used to filter the search select grid list.
;moduleID: Required. The moduleID attribute is required for the module to identify the module exporting the search select grid.

===Search Select Grid Folder Tab Labels===
[[Image:SearchSelect.png|frame|none|Search Select Grid Folder Label = &quot;Meeting Attendees&quot;]]
The search select grid folder label is stipulated within the Exports section of the module generating the search select grid. This label can be overridden by inserting the phrase attribute on the SearchSelectGrid element of the inheriting module as follows:

 &lt;EditScreen name=&quot;ExposureRoutes&quot; phrase=&quot;Routes|Associate routes of chemical exposure&quot;&gt;
   &lt;RecordSummaryFieldsRef/&gt;
   &lt;SelectGrid moduleID=&quot;chmer&quot; phrase=&quot;Exposure Routes&quot;/&gt;
 &lt;/EditScreen&gt;

The folder tab labels are automatically generated as links to the search select grid's module.

==Generating Grids==
The Exports section of a module definition file is generated when a module that relies on a grid is  [[Generating a Module|generated]]. If you make modifications to an Exports section of a module definition file, you will need to generate the module, or modules, dependent upon the export grid to see your changes take affect.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>SelectGrid</title>
    <id>2586</id>
    <revision>
      <id>6065</id>
      <timestamp>2007-11-23T20:10:21Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Elements */</comment>
      <text xml:space="preserve">[[Image:SelectGrid.png|thumb|100px|right|Select Grid]]
Select grids are used for adding multiple sub-module records simultaneously. [[SearchSelectGrids|Search select grids]] are select grids with list filtering capabilities. 

Select grids must be inserted within the [[Exports|Exports]] section of an XML module definition file in order to be available within a parent module. Select grids must also be declared within a parent file's SubModules section and added as an edit screen.

==XML Syntax - Inserting Select Grids Into &quot;Exports&quot; Section==

In order for a select grid to be available for sub-module record associations, the select grid element must be inserted into the Exports section of the module where the select grid data will reside.

 &lt;Exports&gt;
   &lt;SelectGrid moduleID=&quot;chmer&quot; primaryListField=&quot;ChemicalExposureRoute&quot; phrase=&quot;Exposure Routes&quot;/&gt;
 &lt;/Exports&gt;

===Elements===

;SelectGrid :''Required.'' The SelectGrid element is required to define the list contents of a select grid.

===Attributes===
;moduleID:''Required.'' The moduleID attribute is required to identify the select grid for modules inheriting the functionality. The moduleID attribute value must be the same as the module exporting the select grid.
;phrase:''Optional.'' A [[phrase]] that contains the English label that the field should be displayed with in the application. The phrase attribute is used to define the sub-module folder label. This label will be blank if the phrase attribute is omitted. The phrase attribute can be overridden by inserting the attribute on the SelectGrid element within the module inheriting the functionality.
;primaryListField: Required. The primaryListField attribute determines which field will be displayed in the select grid.

==XML Syntax - Inserting Select Grids Into Module Edit Screens==
To make a select grid available within a module, the sub-module containing the exported select grid must be declared within the SubModules section of the parent module's XML module definition file. The select grid must also be added to an [[EditScreen|edit screen]] of the parent module.

=== Sub-Module Declaration  ===

 &lt;SubModule moduleID=&quot;chmer&quot; name=&quot;Exposure Routes&quot; parentKey=&quot;ChemicalID&quot; localKey=&quot;ChemicalID&quot;/&gt;

[[:Category:Central Sub-Modules|Central Sub-Modules]] or [[:Category:Association Modules|Association Sub-Modules]]:
 &lt;SubModule moduleID=&quot;prta&quot; name=&quot;Accountabilities&quot; parentKey=&quot;FeedbackID&quot; LocalKey=&quot;RelatedRecordID&quot;&gt;
   &lt;SubModuleCondition field=&quot;RelatedModuleID&quot; value=&quot;fbk&quot;/&gt;
 &lt;/SubModule&gt;

=== Adding A Select Grid to An Edit Screen  ===
For a select grid to appear within a module, the select grid must be added to an [[EditScreen|edit screen]] of a module. The XML syntax for adding an edit grid to an edit screen is as follows:

 &lt;[[EditScreen|EditScreen]] name=&quot;Responses&quot; phrase=&quot;Responses|Associate feedback responses with feedback&quot;&gt;
   &lt;[[RecordSummaryFields|RecordSummaryFieldsRef]]/&gt;
   &lt;SelectGrid moduleID=&quot;fbkr&quot;/&gt;
 &lt;/EditScreen&gt;

===Elements===
;RecordSummaryFieldRef: Optional. Adding the RecordSummaryFieldsRef element will display all view fields included within the [[RecordSummaryFields|RecordSummaryFields]] section, assuming the section has been added to the module definition file. Alternatively, view fields can be stipulated on a field-by-field basis.
;SelectGrid: Required. The SelectGrid element is required for the module to identify, locate, and insert the select grid during module generation.

===Attributes===
;moduleID: Required. The moduleID attribute is required for the module to identify the module exporting the select grid.

===Select Grid Folder Tab Labels===
[[Image:SelectGrid.png|frame|none|Select Grid Folder Label = &quot;Exposure Routes&quot;]]
The select grid folder label is stipulated within the Exports section of the module generating the select grid. This label can be overridden by inserting the phrase attribute on the SelectGrid element of the inheriting module as follows:

 &lt;EditScreen name=&quot;ExposureRoutes&quot; phrase=&quot;Routes|Associate routes of chemical exposure&quot;&gt;
   &lt;RecordSummaryFieldsRef/&gt;
   &lt;SelectGrid moduleID=&quot;chmer&quot; phrase=&quot;Exposure Routes&quot;/&gt;
 &lt;/EditScreen&gt;

The folder tab labels are automatically generated as links to the select grid's module.

==Generating Grids==
The Exports section of a module definition file is generated when a module that relies on a grid is  [[Generating a Module|generated]]. If you make modifications to an Exports section of a module definition file, you will need to generate the module, or modules, dependent upon the export grid to see your changes take affect.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>SubModule</title>
    <id>2450</id>
    <revision>
      <id>6203</id>
      <timestamp>2008-02-26T16:00:40Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>/* Sub Module Conditions */</comment>
      <text xml:space="preserve">A '''SubModule''' relationship is defined in the SubModules section of the [[XML Module Definition]] file. It allows multiple records in a submodule to be associated with a single record in a given module. This relationship is used by the [[Generator|generator]] to determine the proper filtering in [[ViewGrid]]s, [[EditGrid]]s etc. For instance, in Organizations ([[org]]), the People ([[ppl]]) module is associated as a SubModule, which allows viewing a list of the employees of a given organization, based on the fact that each person is associated with its organization.

== XML syntax ==
Submodule relationships are defined in the parent module's [[XML Module Definition]] as follows:

 &lt;SubModules&gt;
    &lt;SubModule moduleID=&quot;ppl&quot; name=&quot;People&quot; parentKey=&quot;OrganizationID&quot; localKey=&quot;OrganizationID&quot;/&gt;
 &lt;/SubModules&gt;

Within the &lt;SubModules&gt; section of the parent XML module definition, there can be any number of &lt;SubModule&gt; elements.

== SubModule Element Attributes ==
;moduleID:''Required.'' The [[moduleID]] of the submodule to be related with the parent module.
;name:''Optional.'' The name of the submodule. This is optional but increases the readability of the code.
;parentKey:''Required.'' A field in the parent module that is to be matched against the values in the submodule's local key field.
;localKey:''Required.'' A field in the submodule that is to be matched against the values in the parent key field.

== Sub-elements ==
If the localKey and parentKey fields do not sufficiently delimit the records in the submodule that should match a record in the parent module, additional constraints can be added in one or more SubModuleCondition elements. This is the case if the submodule is designed to allow multiple parent modules, as in a [[Global Module]] or [[Central Sub Modules|Central Sub-Module]]. Typically, the SubModuleCondition would then refer to the field in the submodule that contains the moduleID of a record's parent module.

=== Sub Module Conditions ===
The '''field''' sub module condition must reflect a local field and be encapsulated within quotation marks as follows: &quot;FieldID&quot;

When the '''value''' sub module condition is used to identify a field within the current parent module, the field name must be encapsulated within brackets and asterisks as follows: [*FieldID*]

 &lt;SubModule moduleID=&quot;lin&quot; name=&quot;Injuries&quot; parentKey=&quot;OrganizationID&quot; localKey=&quot;OrganizationID&quot;&gt;
     &lt;SubModuleCondition '''field'''=&quot;RegulatoryRecordable&quot; '''value'''=&quot;1&quot;/&gt;
 &lt;/SubModule&gt;

More than one sub module condition can be used to limit relationships to records matching stipulated fields. Multiple sub module conditions are used to filter related records.

 &lt;SubModule moduleID=&quot;hzas&quot; name=&quot;Hazards&quot;&gt;
    &lt;SubModuleCondition '''field'''=&quot;LocationOrganizationID&quot; '''value'''=&quot;[*SituationOrganizationID*]&quot;/&gt;
    &lt;SubModuleCondition '''field'''=&quot;SituationTypeID&quot; '''value'''=&quot;[*SituationTypeID*]&quot;/&gt;
 &lt;/SubModule&gt;

=== Global or Central Sub Module ===
 &lt;SubModule moduleID=&quot;prti&quot; name=&quot;Involvement&quot; parentKey=&quot;SituationOrgIndexID&quot; localKey=&quot;RelatedRecordID&quot;&gt;
    &lt;SubModuleCondition field=&quot;RelatedModuleID&quot; value=&quot;sitoi&quot;/&gt;
 &lt;/SubModule&gt;

== [[Generating a Module]] ==


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Submodule Record Cache</title>
    <id>1399</id>
    <revision>
      <id>3416</id>
      <timestamp>2006-11-15T19:59:26Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">== Submodule Record Cache ==

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>TableField</title>
    <id>1021</id>
    <revision>
      <id>6447</id>
      <timestamp>2009-04-22T17:21:15Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Attributes */</comment>
      <text xml:space="preserve">The '''TableField''' is a [[ModuleField]] that represents a field in a module's database [[table]].


== XML syntax ==
''(Note: optional attributes omitted):''
 &lt;TableField name=&quot;FieldName&quot; type=&quot;[[Data type]]&quot; phrase=&quot;[[Phrase|Short Phrase|Long phrase]]&quot;/&gt;


== Attributes ==
;name:''Required.'' A valid field name that is unique among all the [[ModuleField]]s of the module.
;type:''Required.'' The [[data type]] of the field in the database table.
;dbFlags:''Optional.'' Any special formatting instructions to be passed on to the database server, such as NOT NULL, UNSIGNED or AUTO_INCREMENT.
;defaultValue:''Optional.'' Instructions for the default state of form and grid fields, as when entering a new record. 
:Valid instructions:
:*&quot;today&quot; - applies to data type &quot;date&quot; or &quot;datetime&quot;.
:*&quot;userID&quot; - applies to data type &quot;int&quot;, when used by a PersonComboField.
:*&quot;defaultorgID&quot; - applies to data type &quot;int&quot;, when used by an OrgComboField or PersonComboField. The default organization is established within the User module and affects the user data population experience by automatically defaulting organization fields to the value selected.
:*The name of any modulefield of the same module, enclosed between [* and *]. For the data population to work, the referenced field must also be present on the same page/form as fields using this TableField.
:*A literal value, preceded by the # character. 

  Example: defaultValue=&quot;#-1&quot; on a bool field would set the default value to &quot;No&quot;

;validate:''Optional.'' One or more [[validation instructions]], separated by a space character.
;[[orgListOptions]]:''Optional. Applies only when the field is a foreign key to org.OrganizationID'' A set of keywords that describes which organizations to be displayed in corresponding drop-lists. This is passed on to [[OrgComboField]]s and [[PersonComboField]]s only.
;phrase:''Required.'' A [[phrase]] that contains the English label that the field should be displayed with in the application.
;sample:''Optional.'' A value that serves as sample data when viewing an XML module definition file with the [[XSL viewer]].

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Technical documentation</title>
    <id>936</id>
    <revision>
      <id>6152</id>
      <timestamp>2007-11-29T22:20:04Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">''This will serve as the &quot;root&quot; page for all technical topics. It should link directly or indirectly to every technical article in the wiki.''

The current version of Active Agenda is built for the [[wikipedia:Linux|Linux]] - [[wikipedia:Apache HTTP Server|Apache]] - [[wikipedia:MySQL|MySQL]] - [[wikipedia:PHP|PHP]] platform (the &quot;[[wikipedia:LAMP (software bundle)|LAMP]]&quot; stack), but thanks to the XML-based [[XML Module Definition|meta structure]] of its [[module|modules]], it can be ported to support other platforms.

Active Agenda is intended to be installed on a [[wikipedia:dedicated server|dedicated server]] or a [[wikipedia:virtual dedicated server|virtual dedicated server]], but not on a [[wikipedia:shared hosting|shared hosting]] account. 
Current installations have all involved placing the MySQL database on the same box as the web server, but separating them shouldn't involve too many problems.  


== Installing Active Agenda ==

''See: [[Installation|Installing Active Agenda]].''

== Architecture ==

Active Agenda is, technically speaking, a large relational database with a web interface that allows users to add and modify data.
Each table in the database is represented by a &quot;[[module]]&quot;, which serves as the metaphor for all meta-data that is associated with that table.
This meta-data is defined in an [[XML Module Definition|XML file]] for each module, consolidating data table structure together with relationships with other tables, user interface &quot;[[screens]]&quot; and form [[ScreenField|fields]], as well as module-specific documentation.

Rather than turning the XML meta-data into a running application &quot;on the fly&quot;, Active Agenda uses a &quot;[[generator]]&quot; that translates the XML structure into [[generated files]] that contain the module-specific logic.
Therefore we speak of &quot;generating time&quot; and &quot;run time&quot; as separate [[execution states|states]] in which the code might be executed.
The generator will typically hard-code data from the XML definitions into the generated files, whick will then remain static unless the XML definition changes.

Functionality which is not module-specific is coded directly into the framework application, and is not represented in any XML file. This includes the user login functionality, user permissions, and the logic that handles the basic page display.

== Development Process ==
''Also see [[:Category:The Technology]] and [[:Category:Developer Topics]].''

An important benefit of the [[XML_Module_Definition|XML]] module definition approach is that it enabled a &quot;power user&quot; (but non-programmer) to 
define what fields are displayed on what screen, how they are labeled and how the data in one module relates to another.
Dan Zahlis, our [[domain]] expert, designed most of the user interface of the application and also did most of the data modelling. 

Under a tradtional programming model, the domain expert would create specs or change requests using less structured formats (such as free form text or pictures), to be interpreted and implemented by a programmer. 
After the programmer is done, the domain person would check the new functionality, and if corrections or changes are needed (because of failures in the human communication), a new change request is started.
Frequently, seeing the new functionality in action would give the domain person new ideas for improvements, or lead to the realization that the user interface is flawed from a user interaction perspective, which would then require another change request.

'''Active Agenda's XML spec development process changes all that.'''  We refer to it as &quot;[[spec2app]]&quot;.  It means that the user expert can implement new modules, and do many changes, fixes and updates to the user interface and data structure without having to involve (and wait for) a programmer before seeing them in action.  Precise definitions in a highly structured format also means that the risk of human misunderstandings in communicating and interpreting these specs is reduced. The XML specs also double as reference documentation.

== Customizing Active Agenda ==

* Look-and-feel, layout, colors: [[Customizing HTML]]
* Module structure changes (new [[sub-module]], new [[module field|module fields]]): [[Customizing a Module]]
* [[Adding a Module]]
* [[Generating a Module]]
[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>TimeField</title>
    <id>2620</id>
    <revision>
      <id>6148</id>
      <timestamp>2007-11-28T23:50:32Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">[[Image:TimeField.png|frame|right|TimeField Display]]
The '''TimeField''' element is used to insert a time value using a simple edit field. The [[DateField|datetime]] element is the preferred method for adding time values. The TimeField element was created for situations requiring a time entry without a corresponding date.


== XML syntax ==

'''''Time Entry''' for [[Data_type|time]] fields'':

 &lt;TimeField name=&quot;CallTime&quot;/&gt;

== Attributes ==
;name:''Required.'' A [[ModuleField]] name that exists within the XML definition file's ModuleFields section and the field is a valid &quot;time&quot; [[Data_type|data type]].


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>UniquenessIndex</title>
    <id>2674</id>
    <revision>
      <id>7716</id>
      <timestamp>2010-03-15T19:14:55Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">== XML Syntax ==
[[Image:UniquenessIndex.png|thumb|Uniqueness Index|500px]]
 &lt;UniquenessIndex name=&quot;AgreementTypeTitle&quot;&gt;
      &lt;FieldRef name=&quot;AgreementTypeTitle&quot;/&gt;
 &lt;/UniquenessIndex&gt;

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Validation instructions</title>
    <id>1218</id>
    <revision>
      <id>6282</id>
      <timestamp>2008-09-04T20:08:09Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>/* Requiring Validation */ added som validation types with descriptions</comment>
      <text xml:space="preserve">[[image:Validation.png|thumb|right|Figure 1]]

Validation instructions exist to &quot;force&quot; data entry into [[TableField|table fields]], or permit a field to be left blank during data entry. Validation instructions are screen specific. Validation is required for one or more of the following reasons:

* The field's value is displayed in a related module
* The field's value is included within a [[CombinedField|combined field]] which is used to describe a record from within a related module using a [[RecordDescriptionField|record description field]].
* Business rules or best practices require a documentated answer to a field's question.
* Triggers, alarms, or calculations are based on the value entered into the field.

The same syntax is used to apply no validation (allowing data entry blanks) to all module fields. However, the syntax used to create validation requirements varies based on the type of module field they are associated with.

== No Validation ==
Allowing users to save blank fields during data entry requires the ommission of the validation attribute from the XML syntax entirely (default is no validation) or associating the term noValidation (see below) with the validate attribute.

 &lt;TableField name=&quot;OnCoPropID&quot; type=&quot;int&quot; validate=&quot;'''noValidation'''&quot; phrase=&quot;Sample Phrase|This 
 is a sample phrase&quot; sample=&quot;1&quot;/&gt;

== Requiring Validation == 
Requiring validation for module fields is accomplished by adding the one or more of the following terms within the validate attribute:

;notZero: Value must be numeric and may not be 0.
;notEmpty: The field must not be left empty. Typically used with varchar, text or float data types.
;notNegative: Value must be numeric and may not be less than 0.
;Email: Must contain a valid-looking email address. If the VALIDATE_EMAIL_DOMAINS configuration setting is true, the validation will also check that the domain name part of the email address is a valid domain name.
;Integer: Value must be numeric and must not contain decimal values.
;Money: Value must be a number but may contain a $ character and/or a comma as thousands-separator.
;Number: Value must be numeric.
;RequireSelection: The field must not be left unselected. Useful for drop-down lists, checkbox fields, date fields, radio fields).

A combination that requires a positive value to be entered in a Money field might look like:
 validate=&quot;Money notZero notNegative&quot;

== Stylized Text Applied to Validated Fields == 
Applying validation instruction to a module field will result in user displayed feedback (Figure 1 above) if a record is saved without entering data into all validated fields. System feedback includes text treatments applied to the field phrases, including italicized text for required fields and bold, blinking, text applied to required data entry fields that were overlooked by the user. An additional message is included at the top of the data entry screen that lists the fields which are required and were not completed.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ViewGrid</title>
    <id>2594</id>
    <revision>
      <id>6068</id>
      <timestamp>2007-11-23T20:22:33Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <comment>/* Attributes */</comment>
      <text xml:space="preserve">[[Image:ViewGrid.png|thumb|100px|right|View Grid]]
View grids are used to display sub-module records in a columnar format. View grids must be inserted within the Exports section of an XML module definition file in order to be available within a parent module.

==Inserting View Grids Into &quot;Exports&quot; Section==

In order for a view grid to be available to display sub-module record data, the view grid XML tags must be inserted into the Exports section of the module where the view grid data resides.

 &lt;Exports&gt;
   &lt;ViewGrid moduleID=&quot;hza&quot; phrase=&quot;Hazards&quot;&gt;
     &lt;InvisibleField name=&quot;HazardID&quot;/&gt;
     &lt;ViewField name=&quot;ReportDate&quot; sample=&quot;Report Date&quot;/&gt;
     &lt;ViewField name=&quot;HazCategory&quot; sample=&quot;Chemical&quot;/&gt;
     &lt;ViewField name=&quot;HazardType&quot; sample=&quot;Dermititis&quot;/&gt;
     &lt;ViewField name=&quot;HazardTitle&quot; sample=&quot;Skin disorders from airborne sugar&quot;/&gt;
     &lt;ViewField name=&quot;HazardStatus&quot; sample=&quot;Ongoing&quot;/&gt;
   &lt;/ViewGrid&gt;
 &lt;/Exports&gt;

===Elements===
;ViewGrid:''Required.'' The ViewGrid element is required to define the view grid columns.
;InvisibleField:''Required.'' The InvisibleField element is needed to establish the data relationships between the view grid module and the module of the parent table where the view grid will be displayed.
;[[ViewField|ViewField]]:''Required.'' The ViewField element is required to display the fields of the view grid module. All view fields must exist within the ModuleFields section.

===Attributes===
;moduleID:''Required.'' The moduleID attribute is required to identify the view grid for modules inheriting the functionality. The moduleID attribute value must be the same as the module exporting the view grid.
;phrase:''Optional.'' A [[phrase]] that contains the English label that should be displayed within the application. The phrase attribute is used to define the sub-module folder label. This label will be blank if the phrase attribute is omitted. The phrase attribute can be overridden by inserting the attribute on the ViewGrid element within the module inheriting the functionality.

==Inserting View Grids Into Module View Screens==
To make a view grid available within a module, the sub-module containing the exported view grid must be declared within the SubModules section of the parent module's XML module definition file. The view grid must also be added to a [[ViewScreen|view screen]] of the parent module.

=== Sub-Module Declarations  ===
Direct sub-module:

 &lt;SubModule moduleID=&quot;hzas&quot; name=&quot;Situations&quot; parentKey=&quot;HazardID&quot; localKey=&quot;HazardID&quot;/&gt;

[[:Category:Central Sub-Modules|Central Sub-Modules]] or [[:Category:Association Modules|Association Sub-Modules]]:

 &lt;SubModule moduleID=&quot;hza&quot; name=&quot;Hazards&quot; parentKey=&quot;HazardID&quot; localKey=&quot;RelatedRecordID&quot;&gt;
   &lt;SubModuleCondition field=&quot;RelatedModuleID&quot; value=&quot;hzr&quot;/&gt;
 &lt;/SubModule&gt;

=== Adding A View Grid to A View Screen  ===
For a view grid to appear within a module, the view grid must be added as a [[ViewScreen|view screen]] of the module. The XML syntax for adding a view grid to a view screen is as follows:

 &lt;ViewScreenSection name=&quot;Associations&quot; phrase=&quot;Associations&quot;&gt;
   &lt;ViewGrid moduleID=&quot;hza&quot; phrase=&quot;Hazards&quot; isInfo=&quot;yes&quot;/&gt;
 &lt;/ViewScreenSection&gt;

===Elements===
;ViewScreenSection :''Optional.'' The ViewScreenSection element is used to organize view grids within logical groups or sections. View grids can be inserted into a view screen as standalone grids or within sections. One or many view grids can be inserted within a ViewScreenSection.
;ViewGrid:''Required.'' The ViewGrid element is required to identify the view grid's source module.

===Attributes===
;isInfo: ''Optional.'' This attribute controls the display of record icons within view grids. Setting this to &quot;yes&quot; removes the record icons, and thereby eliminates direct record access to a view grid's records. This attribute is most commonly used when a module includes a view grid without a corresponding edit grid. An example of this attribute can be viewed on one of the view screens of the [http://demo.activeagenda.net/view.php?mdl=cspp&amp;rid=1 confined space entry permits module].
;moduleID:''Required.'' The moduleID attribute is required to identify the view grid for modules inheriting the view grid functionality. The moduleID attribute value must be the same as the module exporting the view grid.
;phrase:''Optional (ViewScreenSection).'' A [[phrase]] containing a label that is displayed within the application. The phrase attribute within the ViewScreenSection element is used to define the label applied to a section, or group of related view grids. This phrase will be inserted in a &quot;header&quot; format above the view grids grouped within the ViewScreenSection elements. 
;phrase:''Optional (ViewGrid).'' A [[phrase]] containing a label that is displayed within the application. The phrase attribute is used to define the sub-module folder label. This label is inherited from the view grid export but can be overridden by inserting the phrase attribute on the ViewGrid element within the ViewScreen section.

===Expanding View Fields Within A View Grid===

View grid fields can be limited or expanded (customized) by encapsulating view field names within the ViewGrid elements. However, any field included within the ViewGrid tags must exist within the view grid module's ModuleFields section. The syntax for stipulating different view grid fields is the same syntax used for [[ViewScreen|view screens]] and view grid exports.

===View Grid Folder Tab Labels===
[[Image:ViewGrid.png|frame|none|View Grid Folder Label = &quot;Hazards&quot;]]
The view grid folder label is stipulated within the Exports section of the module generating the view grid. This label can be overridden by inserting the phrase attribute on the ViewGrid element of the inheriting module as follows:

 &lt;ViewScreenSection name=&quot;Associations&quot; phrase=&quot;Associations&quot;&gt;
   &lt;ViewGrid moduleID=&quot;hza&quot; phrase=&quot;Hazards&quot;/&gt;
 &lt;/ViewScreenSection&gt;

The folder tab labels are automatically generated as links to the view grid module.

===Default Ordering of View Grid Fields===

A default list order can be applied to grids by applying the &quot;OrderByField&quot; element to the export grid fields. The &quot;OrderByField&quot; element must be added after the last list field on a respective grid. More than one field may be used to order grid fields and the ordering will follow the order in which the &quot;OrderByField&quot; elements are placed at the end of the grid fields. An example of the &quot;OrderByField&quot; element and its use to order grid fields is provided below:

 &lt;ViewGrid moduleID=&quot;sitc&quot; phrase=&quot;Contact Criteria&quot;&gt;
   &lt;ViewField name=&quot;PersonAccountable&quot; sample=&quot;Mattias Thorslund&quot;/&gt;
   &lt;ViewField name=&quot;Severity&quot; sample=&quot;SLIGHT: Minor First Aid Injury; 900.00 to 9,000.00&quot;/&gt;
   &lt;ViewField name=&quot;ContactWithin&quot; sample=&quot;1 Day(s)&quot;/&gt;
   &lt;ViewField name=&quot;LastUpdate&quot; sample=&quot;09-21-2003&quot;/&gt;
   '''&lt;OrderByField name=&quot;Severity&quot; direction=&quot;desc&quot;/&gt;'''
   '''&lt;OrderByField name=&quot;PersonAccountable&quot;/&gt;'''
 &lt;/ViewGrid&gt;

The example above will order the list in descending order by Risk Severity, and then in ascending order by Person Accountable.

==Generating Grids==
The Exports section of a module definition file is generated when a module that relies on a grid is  [[Generating a Module|generated]]. If you make modifications to an Exports section of a module definition file, you will need to generate the module, or modules, dependent upon the export grid to see your changes take affect.


[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>ViewScreen</title>
    <id>2590</id>
    <revision>
      <id>6031</id>
      <timestamp>2007-11-21T18:36:56Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <comment>/* Advanced example, with ViewScreenSection element */</comment>
      <text xml:space="preserve">The '''View Screen''' is where all the information in a module record is displayed on a single screen. This includes submodule records, i.e. records in other modules which are associated with the record being viewed.

== XML Syntax ==
The ViewScreen element should be defined in the Screens section within the module's [[XML Module Definition|XML Definition]]. It should contain a [[ViewField]] element to any relevant [[ModuleField]] to be displayed. &quot;ID&quot; fields, i.e. those fields that contain foreign key values to other modules are typically omitted because they provide little useful information to the typical user.

Submodule data is displayed via View Grids, which are declared with [[ViewGrid]] elements. By convention, we list the ViewFields before the ViewGrids, which is also the order in which they will appear.

In modules with many fields and many submodules, we use [[ViewScreenSection]] elements to break the screen into several sections. Besides the benefits of a thematic organization of a large page, there is also another technical reason for this: We found that the generated SQL statement that retrieves the data for the View screen sometimes would exceed the maximum number of tables that can be queried in a single statement (in MySQL 4.1, about 30 tables). The solution was to generate a separate SQL SELECT statement for each ViewScreenSection.

== Simple example ==
 &lt;ViewScreen name=&quot;View&quot; phrase=&quot;View|View information about this record&quot;&gt;
    &lt;ViewField name=&quot;RecordID&quot;/&gt;
    &lt;ViewField name=&quot;Name&quot;/&gt;
    &lt;ViewField name=&quot;Description&quot;/&gt;
    &lt;ViewGrid moduleID=&quot;xyz&quot; phrase=&quot;Related XYZs&quot;/&gt;
 &lt;/ViewScreen&gt;

== Advanced example, with ViewScreenSection element ==
Several ViewScreenSections may be defined. Each may contain ViewField elements, ViewGrid elements or a combination of both.

 &lt;ViewScreen name=&quot;View&quot; phrase=&quot;View|View information about this record&quot;&gt;
    &lt;ViewField name=&quot;RecordID&quot;/&gt;
    &lt;ViewField name=&quot;Name&quot;/&gt;
    &lt;ViewField name=&quot;Description&quot;/&gt;
    &lt;ViewGrid moduleID=&quot;xyz&quot;/&gt;
    &lt;ViewScreenSection name=&quot;ThemeOne&quot; phrase=&quot;Theme One&quot;&gt;
       &lt;ViewField name=&quot;SomeDate&quot;/&gt;
       &lt;ViewField name=&quot;PersonAccountable&quot;/&gt;
       &lt;ViewField name=&quot;SomeField&quot;/&gt;
       &lt;ViewGrid moduleID=&quot;xyx&quot; phrase=&quot;Related XYXs&quot;/&gt;
       &lt;ViewGrid moduleID=&quot;xyy&quot; phrase=&quot;Related XYYs&quot;/&gt;
    &lt;/ViewScreenSection&gt;
    &lt;ViewScreenSection name=&quot;ThemeTwo&quot; phrase=&quot;Theme Two&quot;&gt;
       &lt;ViewGrid moduleID=&quot;zyx&quot; phrase=&quot;Related ZYXs&quot;/&gt;
       &lt;ViewGrid moduleID=&quot;zyy&quot; phrase=&quot;Related ZYYs&quot;/&gt;
    &lt;/ViewScreenSection&gt;
 &lt;/ViewScreen&gt;

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>Windows Install with xampp</title>
    <id>1328</id>
    <revision>
      <id>7647</id>
      <timestamp>2010-01-09T09:06:54Z</timestamp>
      <contributor>
        <username>AADocAdmin</username>
        <id>1</id>
      </contributor>
      <text xml:space="preserve">'''The following instructions are outdated. Installing Active Agenda on Windows with XAMPP requires no special tweaks anymore.
'''


-- old instructions --

This page documents tweaks and nuances required to get Active Agenda running on a Windows XP Install with [http://www.apachefriends.org/en/xampp-windows.html XAMPP] ( [http://www.apachefriends.org/en/xampp-windows.html#641 v1.5.4a] at time of writing).

''Disclaimer: This is not intended to be a guide to a production install, it was only ever intended for testing on a users home laptop to assess Active Agendas viability. Please investigate MySQL and Apache security configurations before deploying this setup in a production environment''

== Requirements ==

=== Windows XP ===
Tested on:
XP Pro Service Pack 2 - Root file system c:\

=== Xampp 1.5.4a  ===
The .exe package installed to c:\Program Files\xampp (Installed with defaults)

=== Active Agenda 0.8.0 beta ===
Installed to - c:\Program Files\ActiveAgenda\s2a

== Config Changes ==

=== Xampp ===
*Switch to PHP4 - Run  C:\Program Files\xampp\php-switch.bat 
*Set mysql root Password - http://localhost/security/xamppsecurity.php 
*Symlink xampp Pear directory to the s2a pear directory - this is to avoid a fatal error received when running php s2a-install-db.php (is it correct? Who knows?)
*Setup apache - [[Installation#4. Configure your web server|Installation: Configure your web server]]

=== Active Agenda ===
*Edit s2a-install-db.php - change 

 $mysql_start_folder = 'C:\\Program Files\\xampp\\MySQL';

*Edit Active Agenda config files - [[Installation#2._Configuration_files.|Installation: Configuration files]]
*Install the Active Agenda Database - 

 cd \&quot;Program Files\activeagenda\s2a\&quot;
 C:\&quot;Program Files\xampp\php\php.exe&quot; s2a-install-db.php

== Restart Apache ==
*Restart Apache then Point browser to - http://localhost/active_agenda

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>XML Module Definition</title>
    <id>964</id>
    <revision>
      <id>8120</id>
      <timestamp>2010-05-16T00:14:07Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">'''Module Definition''' files define the structure of a [[module]] in Active Agenda, in a specific XML format. These files typically reside in the s2a/active_agenda/xml folder in the source tree. A recent feature allows placing [[Custom XML Definitions|customized]] (for a specific installation of AA) files in a subdirectory, which keeps customizations from getting overwritten when updating.

The following is a very basic outline of the XML structure in a module definition XML file:

 &lt;Module&gt;
   &lt;ModuleFields&gt;
      (Any valid [[ModuleField]])
   &lt;/ModuleFields&gt;
   &lt;ModuleInfo&gt;
      &lt;[[PrimaryKey]]&gt;
         (One or more [[FieldRef]]s)
      &lt;/PrimaryKey&gt;
      &lt;[[Index]]&gt; (several allowed)
         (One or more [[FieldRef]]s)
      &lt;/Index&gt;
      &lt;[[OwnerField]] /&gt;
      &lt;[[RecordDescriptionField]] /&gt;
      &lt;[[RecordLabelField]] /&gt;
      &lt;[[Consistency Conditions|ConsistencyCondition]]&gt; (several allowed)
         (One or more ConditionTriggers)
         (One or more LocalFieldTargets)
         (One or more SubModuleTargets)
      &lt;/ConsistencyCondition&gt;
   &lt;/ModuleInfo&gt;
   &lt;SubModules&gt;
      ([[Submodule]] definitions)
   &lt;/SubModules&gt;
   &lt;Screens&gt;
      (Any valid [[Screen]] definitions)
   &lt;/Screens&gt;
   &lt;RecordSummaryFields&gt;
      ([[RecordSummaryFields]] definitions)
   &lt;/RecordSummaryFields&gt;
   &lt;Exports&gt;
      ([[Exports|Export]] grid definitions)
   &lt;/Exports&gt;
   &lt;Documentation&gt;
      ([[DocumentationSection]] definitions)
   &lt;/Documentation&gt;
   &lt;[[Revision XML element|Revision]]/&gt;
 &lt;/Module&gt;
''Please note that required attributes have been omitted above, for clarity. Also note that text within round parenteses are comments and not actually part of the code.''

== The Module Element ==
A requirement for valid XML is that every document contain a single &quot;root element&quot;. In the Active Agenda Module definition, this element is called '''&lt;Module&gt;'''. Therefore, all other XML elements must be contained between the ''&lt;Module&gt;'' and ''&lt;/Module&gt;'' tags in the module definiton.

=== Attributes ===

;addNewName: ''Optional.'' An abbreviated, more generic, version of the module name. ''Example: &quot;Permit&quot;''
;allowAddRecord: ''Recommended.'' Whether users can add records directly in this module.  Setting this to &quot;no&quot; still allows records to be added from an editable grid in a parent module.  If not indicated, &quot;yes&quot; is applied by default. Valid choices: &quot;yes&quot;, &quot;no&quot;.
;dataCollectionForm: ''Recommended.'' Whether the module will generate a blank data collection form during module generation. Setting this to &quot;yes&quot; enables a user to generate a blank data collection form for a module and its sub-modules from the List screen. This attribute can also be inserted on an edit grid to suppress a sub-module data collection form from being included in a parent module's data collection form. Valid choices: &quot;yes&quot;, &quot;no&quot;.
;extendsModuleID: ''Optional.'' Used if the module should [[extending modules|extend]] another module.
;isMasterData: ''Optional.'' Used if the module data should be included in the default installation file.
;name: ''Required.'' A short but descriptive name for the module. ''Example: &quot;Hot Work&quot;''
;moduleID: ''Required.'' A unique letter combination (3-5 characters) that identifies the module. For new modules, please check the [[XML_Definition_File_Names|list of Module IDs]] to ensure that the selected [[moduleID]] is not already taken. Also see the guidelines for [[ModuleID#Naming|choosing a module ID]]. ''Example: &quot;hwk&quot;''
;pluralRecordName: ''Recommended.'' A word or phrase that describes a single record. ''Example: &quot;Hot Work Activities&quot;''
;singularRecordName: ''Recommended.'' A word or phrase that describes a single record. ''Example: &quot;Hot Work Activity&quot;''

=== Subsections ===
For convenience and clarity, the definitions in the module definition file are grouped into separate parent elements, which we call ''subsections''.  Although it's not strictly required, we suggest that you always keep the subsections in the order below.

;ModuleFields: ''Required.'' This section defines the database meta-structure of the module. Any valid [[ModuleField]] is allowed here; for instance:
* [[CalculatedField]]s
* [[CodeField]]s 
* [[CombinedField]]s
* [[DynamicForeignField]]s
* [[ForeignField]]s
* [[RemoteField]]s
* [[SummaryField]]s
* [[TableField]]s
;ModuleInfo: ''Required.'' A place holder for additional definitions that affect the database table structure. These include:
* [[PrimaryKey]] definition (required),
* [[Index]] definitions,
* [[OwnerField]] element that governs the [[permissioning]] behavior of the module,
* [[RecordDescriptionField]] that allows [[Central Sub Modules]] (CSMs) to display the record description of related records using [[DynamicForeignField]]s.
* [[RecordLabelField]] that enables the use of a short record label description on screens. Multiple ModuleFields can be used within a record label using a combined field. If a RecordLabelField is not used, the screen label will be the RecordDescription combined field by default.
* [[Consistency Conditions|ConsistencyCondition]]s that notify users of field entry requirements necessary to maintain data entry consistency.
;SubModules: ''Required if any of the screens below contain any [[grids]].''  Contains [[SubModule]] definitions, which describe the logical relationship between the data in the parent module (the current module definition) and that of any submodules.
;ListFields: ''Optional, to be deprecated.'' Currently defines the fields that appear in the [[ListScreen|List]] screen. This is inconsistent with the definition of other screen and will be deprecated.
;Screens: ''Optional.'' This section defines much of the module-specific parts of the user interface. A typical module would contain a:
* [[ListScreen|List Screen]]
* [[SearchScreen|Search Screen]]
* [[ViewScreen|View Screen]]
* [[EditScreen|Edit Screen]] (one or many)
;[[RecordSummaryFields]]: ''Optional.'' Contains view-only fields that are re-used by [[EditScreen|Edit]] screens by using the RecordSummaryFieldsRef element.
;[[Exports]]: ''Optional.'' Contains standard implementations of [[grids]].  These can be referenced by a parent module by defining an empty (no fields defined) grid. When parsing the parent module, the parser will import any matching grid definitions from submodules. In other words, the module where the grids are defined will &quot;push&quot; the grid to any module containing the empty grid definition.

:Custom view grids may be used to display stipulated fields from a module included within the sub module reference section and can include any field contained in the respective sub module's [[ModuleField|module field]] section. In this instance, the parent module &quot;pulls&quot; the data from the sub module on an included field basis.
;[[Charts]]: ''Optional.'' Contains the definitions required to produce charts for display on the Charts screen.
;Documentation: ''Optional.'' Contains module-specific documentation, organized in [[DocumentationSection]] elements.

== Add-on definitions ==
In order to enable easier distribution of additions to the standard module definitions, recent changes implement support for separate [[add-on files]] to a module. These will be processed together with the main XML file, and the resulting generated application will reflect the contents of both the main XML file and all the applied add-ons.

[[Category:The Technology]]</text>
    </revision>
  </page>
  <page>
    <title>XML attributes and values by element</title>
    <id>2877</id>
    <revision>
      <id>8121</id>
      <timestamp>2010-05-16T00:14:22Z</timestamp>
      <contributor>
        <username>Danzahlis</username>
        <id>2</id>
      </contributor>
      <text xml:space="preserve">
[[Category:The Technology]]</text>
    </revision>
  </page>
</mediawiki>
